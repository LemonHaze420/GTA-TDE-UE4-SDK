#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class AGamefaceGameModeBase : public AGameModeBase
		TEST_METHOD(Class__Gameface__GamefaceGameModeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGamefaceGameModeBase, 0x02C0);
		}

		// class UModelDataCommandlet : public UCommandlet
		TEST_METHOD(Class__Gameface__ModelDataCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelDataCommandlet, 0x0080);
		}

		// class UUI_HUD_WeaponWheel_Base_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_WeaponWheel_Base__UI_HUD_WeaponWheel_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, UnknownData_JVPL, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MainCanvas, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MainText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, TextScaleBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponAmmo, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponImageContainer, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponScaleBox, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WheelImage, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WheelWidgets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WheelMaterial, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, ItemSizeMultiplier, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, LastIndexSelected, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MinWheelRadius, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MaxWheelRadius, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, GetTimeSinceLastSelection, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, SelectionFadeTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, ItemWidget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, AreaAnchors, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MinWheelRadiusOverride, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MaxWheelRadiusOverride, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MainTextFont, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MainTextColor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, ItemAngleOffset, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, BackgroundFadeTime, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MainTextShadowOffset, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, MainTextShadowColor, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, AmmoTextFont, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, AmmoTextColor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, AmmoTextShadowOffset, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, AmmoTextShadowColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponTextFont, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponTextShadowOffset, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, WeaponTextShadowColor, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, bUseWeaponText, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, UnknownData_9CLY, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, AvailableColor, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_Base_C, UnavailableColor, 0x054C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_WeaponWheel_Base_C, 0x055C);
		}

		// class UUI_EmptyCanvas_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_EmptyCanvas__UI_EmptyCanvas_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_EmptyCanvas_C, 0x0260);
		}

		// class UUI_HUDItem_PlayerInfo_GTA3_C : public UUI_HUDItem_PlayerInfo_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_PlayerInfo_GTA3__UI_HUDItem_PlayerInfo_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, UnknownData_O79W, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, AmmoText, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, ArmorImage, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, ArmorText, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, HealthImage, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, HealthText, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, MoneyText, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, Star1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, Star2, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, Star3, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, Star4, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, Star5, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, Star6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, TimeText, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, WantedStarsBox, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, WeaponImage, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, OriginalHealthColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_GTA3_C, OriginalArmorColor, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_PlayerInfo_GTA3_C, 0x0430);
		}

		// class UUI_MenuBackground_3Menu_C : public UUI_MenuBackground_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MenuBackground_3Menu__UI_MenuBackground_3Menu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuBackground_3Menu_C, ColorBackground, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuBackground_3Menu_C, MainImage, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MenuBackground_3Menu_C, 0x02A8);
		}

		// class AMediaPlayerAudioSpawner_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MediaPlayerAudioSpawner__MediaPlayerAudioSpawner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMediaPlayerAudioSpawner_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMediaPlayerAudioSpawner_C, IntroSound, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMediaPlayerAudioSpawner_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMediaPlayerAudioSpawner_C, 0x0238);
		}

		// class UUI_Brief_GTA3_C : public UUI_Brief_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Brief_GTA3__UI_Brief_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_GTA3_C, UberGraphFrame, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_GTA3_C, SlotStyle_1, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Brief_GTA3_C, 0x08C8);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_C7FQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0060);
		}

		// class UUI_Options_Menu_Tab_Game_GTA3_C : public UUI_OptionsMenuTab_Game_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Options_Menu_Tab_Game_GTA3__UI_Options_Menu_Tab_Game_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Menu_Tab_Game_GTA3_C, UberGraphFrame, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Options_Menu_Tab_Game_GTA3_C, 0x05F0);
		}

		// class ABP_Explosion_Car_C : public ABP_Explosion_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Explosion_Car__BP_Explosion_Car_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Explosion_Car_C, 0x0288);
		}

		// class ABP_HeightFog_Base_C : public AGTAHeightFog
		TEST_METHOD(BlueprintGeneratedClass__BP_HeightFog_Base__BP_HeightFog_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HeightFog_Base_C, 0x02B0);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USoundModulatorBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulatorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulatorBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_61S5, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04E0);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KU5F, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_G5C6, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_7H5V, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_S07X, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_F297, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_EV4V, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_021P, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_FW3L, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_7MDK, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_8NW0, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_AI66, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_VTKI, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_48V4, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_FI1T, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_8TJ9, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilWriteMask, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_FN86, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_4084, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_8VFA, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_XFPK, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0598);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0598);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// class ULandscapeLODStreamingProxy : public UStreamableRenderAsset
		TEST_METHOD(Class__Landscape__LandscapeLODStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLODStreamingProxy, UnknownData_PXT1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLODStreamingProxy, 0x0068);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_KJ05, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_NDD2, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_N27P, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_0X48, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODStreamingProxy, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_798P, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_VHGF, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_8FBK, 0x0600);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0670);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_WJF9, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGizmoRenderComponent, UnknownData_7DTO, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0450);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_YX4S, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_5IHS, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_DMTA, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_P8V8, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_SZHR, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0528);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_1258, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_PHDE, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_FW4K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_XXQI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_8AMN, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0380);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_RMF8, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0540);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_DPK5, 0x04F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0500);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_WJYZ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, UnknownData_N7FN, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0480);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_MIUP, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_F5EV, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_Y5WE, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x05B8);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_15XA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0048);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_71IC, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_FFVC, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_JY1X, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_3XYZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_3CD7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_ZMJ3, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_Q3LJ, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_FK36, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_1IVV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapePhysicalMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapePhysicalMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_K8Z5, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_G6HW, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_8FFM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_TQMQ, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_KZ5J, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_WRMD, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_Y2N0, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class UGooglePADFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0028);
		}

		// class UUI_Button_MainMenu_C : public UUI_Button_Menu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_MainMenu__UI_Button_MainMenu_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_MainMenu_C, 0x0671);
		}

		// class UTransition_ERRORFADE_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_ERRORFADE__Transition_ERRORFADE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_ERRORFADE_C, UnknownData_B6UZ, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_ERRORFADE_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_ERRORFADE_C, BlockingButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_ERRORFADE_C, FadeIn1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_ERRORFADE_C, Image1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_ERRORFADE_C, RandomImages, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_ERRORFADE_C, StartingColor, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_ERRORFADE_C, 0x0320);
		}

		// class UUI_TabbedLayout_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_TabbedLayout__UI_TabbedLayout_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, LeftBumperBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, LeftBumperImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, RightBumperBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, RightBumperImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, RightPanels, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, TabButtons, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, WidgetSelector, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, OpenConfirmation, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, TabStyle, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, SlotStyle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, SlotClasses, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, LastUserSelectedWidget, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, IsForceClosing_Confirmation, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, UsingControllerIcons, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, UnknownData_FJDQ, 0x050A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, TabMoveSound, 0x050A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, SlotButtonInteractSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TabbedLayout_C, HoverSound, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_TabbedLayout_C, 0x0588);
		}

		// class UUI_HUDBar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDBar__UI_HUDBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, Background, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, BackgroundBoarder, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, BottomBar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, MainBar, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, MainSizeBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, TopBar, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, TopBarOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, BackgroundColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, SizeBoxOverride, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, BoarderSize, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, BoarderColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDBar_C, StartingTopColor, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDBar_C, 0x0318);
		}

		// class UUI_OptionsList_Game_C : public UUI_OptionsList_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_OptionsList_Game__UI_OptionsList_Game_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Game_C, UberGraphFrame, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Game_C, FreeSlotText, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_OptionsList_Game_C, 0x0550);
		}

		// class UUI_HUDItem_TitleText_Timer_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_TitleText_Timer__UI_HUDItem_TitleText_Timer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, UnknownData_QOX2, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, ExtraItemScaleBox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, MainCanvas, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, MainHorizontalBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, RichText, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, TextScaleBox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, OverrideTextStyleSet, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, ExtraItem, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, DefaultFont, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, TextAlignment, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, UnknownData_Y9U6, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, TestString, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, BarSizeOverride, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, L, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, UnknownData_L6K0, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Timer_C, BarClass, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_TitleText_Timer_C, 0x03A8);
		}

		// class UUI_HUDItem_Mission_GTA3_C : public UUI_HUDItem_FullScreenText_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_Mission_GTA3__UI_HUDItem_Mission_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Mission_GTA3_C, UberGraphFrame, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Mission_GTA3_C, ContentCanvas, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Mission_GTA3_C, multiline_richtext, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Mission_GTA3_C, BackgroundVerticalPadding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Mission_GTA3_C, BackgroundHorizontalPadding, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Mission_GTA3_C, BackgroundOriginalMargins, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_Mission_GTA3_C, 0x0318);
		}

		// class UWeaponWheelItem_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WeaponWheelItem__WeaponWheelItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, MainCanvas, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, MainImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, MainSizeBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, MainText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, AvailableColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, UnavailableColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, WeaponNameString, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponWheelItem_C, AmmoString, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponWheelItem_C, 0x02F0);
		}

		// class UUI_LegalScreen_GTA3_C : public UUI_LegalScreen_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_LegalScreen_GTA3__UI_LegalScreen_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_GTA3_C, UberGraphFrame, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_LegalScreen_GTA3_C, 0x0360);
		}

		// class UUI_LegalScreen_Base_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_LegalScreen_Base__UI_LegalScreen_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, BackgroundImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, GroveStreetImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, Image_52, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, LegalText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, LogoBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, LogoImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, MainCanvas, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, R*Image, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, R*NorthImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, StudioImagesBox, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, BackgroundTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, LogoTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, GroveStreetTexture, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, R*NorthTexture, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, R*Texture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, LocalizedLegalText, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, LogoAnchorsOverride, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, StudioImagesAnchorsOverride, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalScreen_Base_C, LegalTextAnchorsOverride, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_LegalScreen_Base_C, 0x0358);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_T6P9, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x02C0);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_CM6S, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class UUI_OptionsMenuTab_C : public UUI_TabbedLayout_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_OptionsMenuTab__UI_OptionsMenuTab_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, UberGraphFrame, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, CurrentGameTypeBitMask, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, MenuName, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, UnknownData_MS1E, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, SaveTabStates, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, RefreshOnInputTypeChange, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, UnknownData_I3NK, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, LastInputTypeFlag, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_C, AdjustableControlsClass, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_OptionsMenuTab_C, 0x05C0);
		}

		// class UUI_Button_Option_C : public UUI_Button_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_Option__UI_Button_Option_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_Option_C, 0x0671);
		}

		// class ABP_Marker_Cylinder_C : public ABP_Marker_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Marker_Cylinder__BP_Marker_Cylinder_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Cylinder_C, UnknownData_DI24, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Cylinder_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Cylinder_C, PointLight, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Marker_Cylinder_C, 0x02F0);
		}

		// class UUI_HUDItem_TitleText_Vehicle_GTA3_C : public UUI_HUDItem_TitleText_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_TitleText_Vehicle_GTA3__UI_HUDItem_TitleText_Vehicle_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_TitleText_Vehicle_GTA3_C, 0x0379);
		}

		// class UUI_ConfirmationDialog_FullScreen_GTA3_C : public UUI_ConfirmationDialog_FullScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ConfirmationDialog_FullScreen_GTA3__UI_ConfirmationDialog_FullScreen_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmationDialog_FullScreen_GTA3_C, UberGraphFrame, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmationDialog_FullScreen_GTA3_C, MenuStyle_1, 0x0C58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ConfirmationDialog_FullScreen_GTA3_C, 0x0D48);
		}

		// class UUI_LegalStartup_GTA3_C : public UUI_LegalStartup_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_LegalStartup_GTA3__UI_LegalStartup_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_GTA3_C, UnknownData_FYD8, 0x034F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_GTA3_C, UberGraphFrame, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_LegalStartup_GTA3_C, 0x0358);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_4A1H, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_AN3D, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, INSTIGATOR, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_GO5U, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_RU0V, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_KMWN, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_TRGK, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_E2OZ, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_6R0S, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_PDM0, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_3ACE, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_BWCD, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_BQD1, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_9WRP, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_HY7T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_S61K, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_8HTJ, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_KURT, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_1X1Z, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_HRN4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_IK0S, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A8);
		}

		// class UDeviceProfileFragment : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileFragment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileFragment, UnknownData_5YEP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileFragment, 0x0038);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_Q05H, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_V12Z, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_UN2H, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ModulationSettings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AssetUserData, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x01B8);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_AXS3, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x01D0);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_AD1Z, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_4LH4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_0A72, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_B7QO, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_ZKVJ, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_6QWI, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_JIJN, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_NKMI, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_4CXM, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_NTE8, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_63F8, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_MQUE, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultPlayerInputClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultInputComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x0140);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_FB0A, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_0IWS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_MUAY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_OC4C, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_NKJ5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_009U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_WS2L, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_UZ2E, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_KECR, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_VND8, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_W3DL, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_5TNB, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_TTI6, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_FKAC, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_GAMQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_KRL0, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_VZV6, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_TU3I, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_8MTP, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_NT2R, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_A5BR, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_767T, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_KQL4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_UI9Y, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_863T, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_D4K7, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_IAZX, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0298);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_5L6C, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_6G9P, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_HA3G, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_VW9G, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_36K7, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_5MBJ, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_NTDG, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_7CRE, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_X5OS, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_Z2F1, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F8);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_KTZ0, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_GQE7, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_Y0WY, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_DVSX, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0676);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_349F, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ModulationRouting, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlayStateChanged, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_26O5, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioVirtualizationChanged, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_0NMA, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_D8BP, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_SADZ, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_1NQL, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_4EQ3, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_UT8K, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0860);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_JUCP, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_IBM7, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MobileRenderBucket, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_TYN5, 0x021A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_NPHZ, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_RE5J, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_CTQ6, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_JFSZ, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_PEC8, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_DNPU, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_3B4A, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_1OFI, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x041F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_8V5A, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0448);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_8DQG, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_2YWF, 0x0469);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0470);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_66WT, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_0XBU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QZDB, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TND9, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_KTDN, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_BCRJ, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ZSXF, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7LZ5, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ISNM, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GW3Z, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QREU, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_L3GO, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_H4MB, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_07CQ, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MIEL, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7VTA, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Z7YP, 0x095D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_HEU0, 0x0961);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_W3WO, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GLWW, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_9MUX, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ALNH, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_M2XZ, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_TQDO, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_YNX7, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_82NM, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_D10E, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_5Q0Q, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_ZCP8, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_SB26, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_A6UB, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_164W, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_G3LH, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0370);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_FZKW, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x03C0);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_9UDA, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_IEYA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_BB83, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_3HY2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSceneInterval, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_I21G, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_PO6Q, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02B8);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_Z7UI, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_3DRX, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_EMFE, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_1Q32, 0x0835);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_5K2D, 0x083D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_J0BJ, 0x0881);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_AALU, 0x089D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_7OKE, 0x08A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08B8);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_3RCW, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_RIGM, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02E8);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_D2DK, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VertexOffsetUsage, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_GZB0, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_HLKY, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_KGVP, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_VEDP, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_N4AZ, 0x05FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_TG6M, 0x0602);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_YMG9, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_4JEM, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_YM7P, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0698);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_9RGW, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_FIXX, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LX2H, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_H46Z, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x08B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_AHZ1, 0x08B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x08B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XOKC, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_YWJT, 0x08BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_VBOC, 0x08C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x08C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_QJ99, 0x08C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bWaitForParallelClothTask, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_NRSU, 0x08F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_VNVV, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_KE7I, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_C976, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_A2U5, 0x0A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_ZYBB, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_5M8C, 0x0B50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0EE0);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_BJ8S, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_PDXZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_1Q4L, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_CIIQ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_1FBY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_P5FL, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0360);
		}

		// class AVolumetricCloud : public AInfo
		TEST_METHOD(Class__Engine__VolumetricCloud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricCloud, VolumetricCloudComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricCloud, 0x0228);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_O9EL, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_GV2J, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_O03B, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_28TR, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_ERMK, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_XH7N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_FN5C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_48KE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_YMH8, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_1JUD, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_ZZHZ, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_IRWG, 0x1528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1AF0);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_KHDG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_ADWK, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_98W5, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_32NF, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_0V62, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_Z4I6, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_BCGH, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_Z5MA, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_PD2S, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_VBYE, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0448);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, PoolPrimeSize, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_2AUJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_4B1Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_7OVE, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_617O, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_WODA, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_5ZHQ, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_0DHH, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_T4JI, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_75ED, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_DERA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_KM3K, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0060);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_G5QW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Downscale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, DownscaleOptions, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_W5KO, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_HCJ8, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00D8);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_S8K0, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0130);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, ForcedLodModel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_Y0EV, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04D8);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_0XLD, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_RVN1, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_5G7E, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_MMZS, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0580);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_QW62, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_ZJOH, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_3PFN, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_4D9N, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_LKKJ, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0670);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_9SML, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_TVJJ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_UCCM, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_OMN4, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_GTEI, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_WN45, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0360);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0368);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_T5RV, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_05RV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_7IIW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_Z2BQ, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_NHXI, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_I982, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, OwnerScalePower, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, UnknownData_A5JT, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B8);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D8);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_9L7D, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bOverrideLODStreamingSettings, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_9TRD, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_TPNP, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0050);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_1K2W, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_9N6O, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_21RS, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_0H7N, 0x0581);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0590);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_MXBV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0068);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0068);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_YD33, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_5AOH, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_WGAX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_Q9EI, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_E48J, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_JE8C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_YAAF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_Z8YY, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0308);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_39ZC, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_5HPM, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_UYJI, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_JHM2, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UPhysicsSettings : public UPhysicsSettingsCore
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_MVFM, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_DDJ9, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_A851, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_ZRR7, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinDeltaVelocityForHitEvents, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_U4V4, 0x019F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x01A0);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_0BM5, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_T7NZ, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_MUOS, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_1LHC, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_V6HX, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_T401, 0x02EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03A0);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MobileReflectionCompression, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_ZVLM, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, bModifyMaxValueRGBM, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_WSJS, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MaxValueRGBM, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_QTFB, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CachedEncodedHDRCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_XVT4, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x0270);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_AAZ2, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_8QLV, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0290);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_3SS2, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_BW1F, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_YWB7, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_ULUV, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_AFEH, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_BH4U, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x26A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_KXBA, 0x26BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, OnAudioFadeChangeEvent, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_TXP2, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_ZG3P, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_GKKO, 0x2782);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x278C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_FKTA, 0x279C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x27A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_YYBN, 0x27A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x27B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_D76A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_IXMV, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_QIUH, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_D5SL, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_OA6F, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_7UB8, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_FFIB, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_X5KT, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_X9GO, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_2R6O, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_04AQ, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_CSV6, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, lightColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_F9RA, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DeepShadowLayerDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_KLOH, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x022C);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_85N1, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_VGCN, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_PL5W, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_QNN2, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_S3AE, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_XZCG, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_NWCA, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_FRB5, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_1CBV, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowRenderDistance, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bDisableSizeFade, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_CALL, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0330);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_H0QY, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_8JRJ, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x034C);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_5JKA, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0360);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_DRMI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_NPZX, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_6P2L, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_SNBW, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_C9JR, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_ULGO, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_VKPF, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_X87W, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_2EQJ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_08Z5, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_RXEJ, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0230);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_UF5Z, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0370);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_44MQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JK5B, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QDNO, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Z90C, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_N22D, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_I2YZ, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6NUZ, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_LPDO, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PQT0, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_786M, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_C6GX, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VKGS, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7C51, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_M2QC, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FXU5, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0FZA, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_A88I, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_P9EO, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_5QAM, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VBDV, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_HC2J, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ULBX, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9RVJ, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_OAW6, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_GFWW, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_M7C7, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7Q66, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnlimitedBonInfluencesThreshold, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobilePlanarReflectionMode, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bStreamSkeletalMeshLODs, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bDiscardSkeletalMeshOptionalLODs, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1EQE, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationColorMaterialPath, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationCustomMaterialPath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationGrayscaleMaterialPath, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0140);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_U8YY, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplayNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ReplayNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayNetConnection, UnknownData_NQQZ, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplayNetConnection, 0x22F0);
		}

		// class UReplaySubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Engine__ReplaySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplaySubsystem, UnknownData_7KI7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplaySubsystem, 0x0038);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_O494, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_3DGP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassEarlyReflections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_PQJJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassLateReflections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_95MD, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_M7TZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_Z7ZB, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_YFSC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bAdaptive, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bContinuousUpdate, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_QBCX, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, LODGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_8AZD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_YPZS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_B54R, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsAlignActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSetBoundsButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSnapBoundsToLandscape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_EMK2, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableScalability, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_ON67, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, ScalabilityGroup, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bHidePrimitives, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_FTS6, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamingTexture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamLowMips, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildStreamingMipsButton, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableCompressCrunch, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildDebugStreamingMips, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_UQZR, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0270);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_1IU4, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_MJWN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_BI6A, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_1W26, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_IAVN, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_6PSN, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_PDAJ, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0100);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_X7WK, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0108);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_IU77, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_A1MR, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_HKL7, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0220);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_QJ3Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_9DWO, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_70OM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_MQAZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_A45H, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_KT4T, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_4NWD, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_G0GB, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_4E60, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_KOYM, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_I1WJ, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_D4KA, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_19AA, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VCDN, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_C0CB, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_DVCB, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_RDQ7, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ATM4, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BLK4, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_D6OY, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_531G, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_XJGN, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2I6F, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0570);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_1RU3, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UBoneReferenceSkeletonProvider : public UInterface
		TEST_METHOD(Class__Engine__BoneReferenceSkeletonProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneReferenceSkeletonProvider, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_A63O, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_8LHW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_GA64, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_LYIR, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_KYA8, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_1Z6Z, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_GXPS, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_0N1Q, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_OSQS, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_YQMP, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_RX2B, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_V6YE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UMaterialExpressionHairColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Melanin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_WFPP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Redness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_43N2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, DyeColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_QGXC, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairColor, 0x0080);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_03U9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_3C4S, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_W88Y, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_LSCW, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_6KRC, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionInverseLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_UJIX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_POLP, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_PTJ7, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstValue, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, bClampResult, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_WTQV, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionInverseLinearInterpolate, 0x0090);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_IX6K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_TOWX, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_H1EM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_006F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_ZVSR, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_7RZY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_GWCJ, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A8);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_BN8D, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_ZS2P, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionCapturePassSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_HOBC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Reflection, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_E1ZC, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionCapturePassSwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_OVZU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_863O, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_8A4N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_02I3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_T8J9, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_7YYP, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_IJKD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_T47G, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_1XJV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_6SKE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_TUEY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_XOZP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_GITF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_RZE0, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_6KLY, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_W05D, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_DXWD, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_TX6A, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_YEPN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_UA14, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_U47L, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_L2ZC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_STYW, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bAdaptive, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_GWS3, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_YBVA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_2V5T, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_LSRM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_K0G6, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_SQD1, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_2T1L, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_8UUA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_8J4B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_WVYS, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepthWithoutWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_O1C9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_8O93, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, ConstInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, FallbackDepth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_LN12, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepthWithoutWater, 0x0068);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_N1EZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_S0AF, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_T89U, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_22WG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, BoneSpaceTransforms, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_XWPP, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x07FF);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_G9TX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_U7WV, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_86P9, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_4WP5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_2SQQ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_9K81, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_WCNP, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_Y2BJ, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_902H, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_DWJX, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_4QRV, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_WXSW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_S7RP, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_46F6, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_B1BS, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_UG7G, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_4FAE, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_4H2G, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_J3VS, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_2NF8, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_U070, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_KWPC, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_V6GL, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_U1DX, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_TK0Q, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_XN2K, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_FLGB, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_KWDX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_VD74, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_JG6I, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_07T7, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_BQVS, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_Z79R, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_WZLH, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_QN28, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_2T0R, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_44JY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_0XLM, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_XWA5, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_206W, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_U81N, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_FUES, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_0EYQ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, Lifetime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_EV07, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_PHWP, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07C0);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_MS4U, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_JNRA, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_GVIO, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_TJYD, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0398);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_01I1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_SRER, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_JYYM, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_4K6I, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_QQHC, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_J4N8, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x02B8);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_6BUG, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_95KU, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_BM0M, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_DTZ1, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0230);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1AF8);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_8UAA, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_RQ16, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_6V5X, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_1S10, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_MWSO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_V38B, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_NX27, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_RJOL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_9JYV, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_WRTU, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_P0Y9, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalOutputs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00A8);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_FEYK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_FW5E, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_HVDQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_PHDR, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_I4EQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_O993, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_VAE4, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_WHUF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_F5IO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_1PY3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_PP5P, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_5SA8, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_S8H5, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_23Z1, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_XS7T, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_NBSP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_PKIJ, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_90OD, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_DRWD, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_5HYU, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_0CLO, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_IIEW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_74JI, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_C79H, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_2D3V, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_J092, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_UD2K, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_HV6Q, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_4N3K, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_ZDHG, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_FWME, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_RGBF, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_SOK1, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_GAFY, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_1MA2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_6V51, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_YYUH, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_IQC3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_CXA3, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_0XWK, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_RLP3, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_7EQO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_ZWWZ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_W950, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_JLCO, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_ZZLV, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_NLNK, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_7ATA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_DB6A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_Y5ZK, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0400);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_DFRT, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_2N4A, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_GFG0, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07A0);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_CSSB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_C6L8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_TR6E, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_PDD7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_5R8F, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_CMB4, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_0VBU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_QU5W, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_HUVJ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_9ZYP, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_LT4D, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_73VJ, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_U4CA, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_LIJZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_QYLQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_50S8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_VJ65, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_S38F, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_2S4S, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_R776, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0078);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_919V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_S4L8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_K52L, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_OHUU, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_A5RX, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCloudSampleAttribute)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCloudSampleAttribute, 0x0040);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_7Z10, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_66H3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_O0HT, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_0ORD, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_07Q1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_88UW, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_BW0V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_7JSW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_PJ9J, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_ODPG, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_2SFO, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_WNYA, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07C0);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0068);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_MXPR, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_H6GU, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_WBD9, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IG67, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_AZ37, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_7CAX, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BakedPerBoneCustomAttributeData, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_OJDF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_CPUO, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x02D0);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_6MEE, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_JPWQ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_M9E8, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_85X3, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowLength, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_BIYJ, 0x0459);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0460);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_W2D7, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_2ARG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bHasCompletedInitialScan, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_QYI6, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0458);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_XE3H, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_B1JP, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_QCJM, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixSendSettings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixOverrideSettings, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02C8);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_C3SC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MapsToPIETest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, PIETestDuration, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, UnknownData_OCJ3, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0340);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_QZ2S, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_7JXX, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_CNQV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_V57K, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_M69C, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_UVEV, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_C6B3, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedPreEndOfFrameSync, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_IN8O, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_7MJN, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_R59L, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0788);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_0ZPN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_PTF4, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_4912, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_NJ8F, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_LXMH, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingDynamic, UnknownData_7SMO, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0160);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_0HT3, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_25U8, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_URAH, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0108);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, UnknownData_749D, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x0118);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_Q36H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_EGB9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_LC2F, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_7UIX, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_UXIG, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_ROTD, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_F65T, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_QDG2, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_95ZE, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_27E8, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_11EL, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_67IV, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_TV6P, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_JJ5Y, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneCustomAttributesNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneNamesWithCustomAttributes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AttributeBlendModes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultAttributeBlendMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_7DNT, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x00D0);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_TMQ6, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Color, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_XX12, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0480);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_SOB9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_SQ90, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_J1P2, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_F4VF, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_K9BA, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_5KX0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_HA9D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_M0W5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnPawnControllerChangedDelegates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_I9XF, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x01A8);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0278);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_UOPA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_WOMB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_EDUS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_NL5U, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_DI63, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_OD49, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_X7Y7, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_GNCE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0058);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_SVCN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_IEOF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_OCGS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_NVSI, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_HLHO, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_MUK3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_MRAE, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_TIXN, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_4XID, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_L8ZC, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_87ZQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_PTA3, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_QRR4, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_354G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_YAB1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CROI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_OGTF, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_WUQY, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_J9YY, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_XEHB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_B8AL, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_DSTD, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MU9G, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZMJJ, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MX1S, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_BM49, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Q6E0, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_0OOU, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_3AZD, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_RCE5, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_XP3C, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_VJ87, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_0PM9, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MY9Y, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_DA5H, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_T2OG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_7HAL, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_BPIE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_AB9Q, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_G7S4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_C57G, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_6JKU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_XCQQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_3NEL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_WZJF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_1B50, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_GJYV, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_FLCV, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_HILY, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_ZLEH, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, PropertyAccessLibrary, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x05B0);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_ZI3T, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_REAW, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_0KNW, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_T0W1, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_S1KO, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_V187, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_ZYJA, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_E5LC, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PropertyAccessLibrary, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0330);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_KRQJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_VDF2, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_627N, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_GOP8, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_K632, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_4AR5, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_8KB5, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_UYM1, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_U0DE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_BKHH, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_PG3Q, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_KLXU, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_UHJN, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_6F7B, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_N5WN, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_A43F, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_A2E0, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_OAUI, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_J671, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_EQ47, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_J235, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_CQ95, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_XLF0, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_HDL0, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_OEKF, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioBus : public UObject
		TEST_METHOD(Class__Engine__AudioBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, AudioBusChannels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, bIsAutomatic, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, UnknownData_HO65, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioBus, 0x0030);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_WZOG, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_MFZA, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_J327, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_87A4, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_VSKT, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_PGRO, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_7DFH, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0170);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_Y8DM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_3SYX, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_55CD, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05C0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_WP8A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_MCGL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_SI05, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_KVVJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_F5LX, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_LQHQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_QNBO, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UCameraShakeBase : public UObject
		TEST_METHOD(Class__Engine__CameraShakeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, bSingleInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_ZIL3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, ShakeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, CameraManager, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_VDM2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeBase, 0x009C);
		}

		// class UMatineeCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__Engine__MatineeCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RotOscillation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, LocOscillation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, FOVOscillation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimPlayRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendInTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendOutTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RandomAnimSegmentDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_HICI, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, Anim, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_6PS9, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillatorTimeRemaining, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimInst, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_UP1G, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeCameraShake, 0x0180);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_UP07, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_XM4E, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_GMFC, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0220);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_8JXM, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_Q1IL, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_1F7B, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_YPNY, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00E0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_E5J5, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x0108);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_C98E, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0128);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_8BK7, 0x045D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0460);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHalfHeight, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_CTBK, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0470);
		}

		// class UBodySetup : public UBodySetupCore
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_ZONE, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_UZ89, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_8U0A, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_TTI2, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x02A0);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_HQPH, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0118);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_S0AP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowCascadeBiasDistribution, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_OZ21, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_VZR8, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowSourceAngleFactor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_BYKJ, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunDiskColorScale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_3HN9, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowStrength, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnAtmosphereStrength, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnSurfaceStrength, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowDepthBias, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowExtent, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowMapResolutionScale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowRaySampleCountScale, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudScatteredLuminanceScale, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_DBI8, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_J95N, 0x03EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03F0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_L2ZS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_Z91Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_3KPQ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_9D4C, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_I3M0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_EKVG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_O2XZ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairAttributes, UnknownData_MO6I, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0048);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_U6UO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_0PCC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_N2M7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_FONY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_WF2J, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_S65V, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_1MZ1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UBoundsCopyComponent : public UActorComponent
		TEST_METHOD(Class__Engine__BoundsCopyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, BoundsSourceActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForSourceBounds, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bKeepOwnBoundsScale, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForOwnBounds, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_B390, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, PostTransform, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyXBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyYBounds, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyZBounds, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_8MM3, 0x0113);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoundsCopyComponent, 0x0120);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x046C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0470);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_EKFO, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_4W85, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0290);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_OWFH, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_MFB7, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Tooltip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_K2L8, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_I5FJ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_DGKR, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0460);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_1PZQ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_JF0R, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_O3KF, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_S4WF, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_G6LT, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_69IV, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_48F9, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_KV0B, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_024A, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCountPreJump, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_Z7AN, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_A9OO, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_52DR, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04C0);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_DDEA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UCustomActorDebugVizInterface : public UInterface
		TEST_METHOD(Class__Engine__CustomActorDebugVizInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomActorDebugVizInterface, 0x0028);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_Q1QI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_HQDT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_I0HU, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_VQOE, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_W7BL, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_A0CY, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_BQBZ, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0240);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_OE9R, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_J4WA, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1B60);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_XSTE, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_PYZS, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_8UKV, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_03N3, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_LTIY, 0x0A38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x12C0);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_E2KJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_O63A, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_A30V, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_EDMC, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_EKAH, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_Z2SK, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_3QF9, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_58W0, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_B15Q, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_QOGY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_TWCE, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_AVMD, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bIgnoreQualityLevel, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_N7I2, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightOffset, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_CPLG, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0130);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0150);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, UnknownData_S5ZD, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0088);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A8);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_N22Q, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_0LUJ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_018W, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, GTARootDrawPower, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_943B, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_T64G, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_N2IX, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_Z9LZ, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_J794, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterMIC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0040);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_OUD0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_3WNY, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_BDMW, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_8W3H, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_WJXV, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_ASZU, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_TE01, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0088);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A8);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_A492, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_1DHO, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_1CH6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_PWYD, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_FDD9, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_KO45, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_5THZ, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_6VXG, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_T2YG, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_UZ6N, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_OM1X, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_2ORE, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_72QJ, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_30GC, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_EHO3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_Z7Y6, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_TCL9, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_U0GZ, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_NBPW, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_6S3B, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerCorrectionRootMotion, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_IOAV, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0MIO, 0x0ADC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0B00);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_62OB, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_V7BU, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_RATK, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_DZGD, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_CK0G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_V4HS, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UActorComponentInstanceDataTransientOuter : public UObject
		TEST_METHOD(Class__Engine__ActorComponentInstanceDataTransientOuter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponentInstanceDataTransientOuter, 0x0028);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_47FT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_Z7H7, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_5QSM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_3CWB, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_6VTA, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00B0);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_6NSY, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00D8);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_RH3E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_24CA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_NS7R, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_B8YE, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_RS8P, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_XHAM, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_ZVOL, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_TFLQ, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_ORBR, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_NR8K, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_FEA7, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, UnknownData_53EF, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0460);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_ZL14, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_PXHK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_1U1W, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0048);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_XYWO, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0060);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0080);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_HISM, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0088);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_9ERJ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_G302, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_O3VD, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_88M8, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_4WTY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_VGWC, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_CBFL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_SDET, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_N9FQ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_YLCA, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_2M0Q, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_MWE1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_CPOL, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_NAB2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_ROHE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialInput, 0x0040);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_YPKL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_ZCZ9, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_36KS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_TT5I, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_PG0Q, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_6NJC, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_Z2GN, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseBlend, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PerSamplePhaseEvaluation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_8M8K, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringApproximationOctaveCount, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringContribution, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringOcclusion, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringEccentricity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGroundContribution, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGrayScaleMaterial, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bRayMarchVolumeShadow, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_E7MN, 0x00EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, 0x00F0);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_BP1K, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_6F7F, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_F513, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_E2NL, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x03B0);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_Y1HK, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0070);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_GIW6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_5MBR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x0108);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_7ANW, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_HSG9, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_OPT1, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_QD73, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_BMJF, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_8WVN, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_0BH3, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_35OU, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_G9TX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_EQIE, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_RFVV, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0490);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_VN7I, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_HQ4C, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_K25T, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_B9W9, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_A5RI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1AF0);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_770Q, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_JQKI, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_34HS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_R92P, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_L7VA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_5W8H, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_4FRF, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_ROB8, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_C4VK, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_LZVX, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_RCNC, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_3MHC, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_2KTP, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_46OO, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_SM8X, 0x0473);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_YG1Z, 0x047F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_1SSQ, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_X3JS, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_I0ZK, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_2D7L, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_MKOS, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ZL7C, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_C999, 0x05A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_YFOY, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x06B0);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_AC91, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_35JO, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_PXLN, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_2I9Q, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_UPNX, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_MAFC, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_R1L1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_BTSX, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_JGWR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UHLODEngineSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__Engine__HLODEngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODEngineSubsystem, 0x0030);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, HLODActors, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0088);
		}

		// class UHLODProxyDesc : public UObject
		TEST_METHOD(Class__Engine__HLODProxyDesc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxyDesc, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_AWG4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_NASY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_5HJY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_7QY9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_82LX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_6Y3R, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_XMCB, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_9GAX, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0068);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_VYOL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_A5C2, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCoordinates : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCoordinates)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCoordinates, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_4QQP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_PVIL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_M61O, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_7BZR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_RV7B, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_5HA6, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_Y2LT, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_Y3L5, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_NKCS, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_PWYY, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0060);
		}

		// class UMaterialExpressionStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_CLYP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_Z06C, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStep, 0x0070);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_GUC7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_EQ4N, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_G0L7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_B2F4, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_1115, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_XMIW, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_PB2P, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_4PQ3, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_99QM, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_IJT4, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_PZF2, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_W18G, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_F3VT, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_B45F, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_Q3VY, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_HM4O, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_TJHX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_4VQA, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_WS3S, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0470);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, SphereRadius, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_I7P7, 0x0464);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0470);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0470);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_GP9X, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_DVKA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_362E, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_NPE6, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_QTMX, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x0527);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_5JB6, 0x052B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_P5LP, 0x053C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0540);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_FVLT, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_LLVF, 0x0566);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_X6JG, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0570);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_6WYJ, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0370);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_YT3Z, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_P3WO, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_1ARN, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_PAY9, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_VYUY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_YALR, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_LZZL, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0150);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_JPZ8, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_ZWXL, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_Z7VN, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_WV89, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_G3VH, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_C9AL, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_AVZ1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_LMIZ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_ERGF, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_9V8X, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_QROC, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_CMKS, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_ERJ1, 0x0491);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x04A0);
		}

		// class UTexture2DArray : public UTexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_SIIX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressX, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressY, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressZ, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_Z7JZ, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0138);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_V7AJ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_NJ4Z, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00F0);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0108);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTarget2DArray : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, Slices, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, UnknownData_WPIQ, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2DArray, 0x0100);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_BN5S, 0x00F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00F8);
		}

		// class UTextureRenderTargetVolume : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, UnknownData_HXZM, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetVolume, 0x0100);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_SV5Y, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_I7AC, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_MGG7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_DL5O, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_Y5WD, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_O78B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_38UV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_WO4M, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_KMCQ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_R9MG, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_BWBZ, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_UXZF, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_LSVF, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_M3VZ, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_LBBC, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_F9G8, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02A0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_9JAU, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_J93C, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_4ST4, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_K0D6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_RVKJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_UAMI, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_LH1F, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_9U14, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_HBBI, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_C6NC, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_MHP7, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0490);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_DPPE, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ETOB, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_7N36, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_VTTC, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_YIS8, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_KIK9, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// class ULODSyncComponent : public UActorComponent
		TEST_METHOD(Class__Engine__LODSyncComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, NumLODs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ForcedLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ComponentsToSync, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CustomLODMapping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentLOD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentNumLODs, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, DriveComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, SubComponents, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncComponent, 0x0140);
		}

		// class ULODSyncInterface : public UInterface
		TEST_METHOD(Class__Engine__LODSyncInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncInterface, 0x0028);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_ZPLY, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_JKBH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_A5UC, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_XPZY, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_BXS0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_NE2O, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_KRPI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_JN7T, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_63DS, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class UMaterialExpressionSmoothStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSmoothStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_PNBT, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Max, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_F0VW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_3D6Y, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstValue, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSmoothStep, 0x0088);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_C761, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_2E99, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_873I, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_P03P, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_AW94, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_AIK5, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_M2IH, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_A9SG, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_U0FL, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_RF02, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_4ETR, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_U2EP, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_6FVH, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_EBY4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_XBPA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_5189, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_US85, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0060);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_Z6LC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_QCVE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_UFVI, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_3SFF, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0048);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0080);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_K8ZD, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_ZOOI, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_87YW, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0088);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0080);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_I12L, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_P3L9, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02E0);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_P8ZY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_FBJH, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_0TWZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_MR2A, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_4RJK, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_XUNV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_DO6X, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_IRQ9, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_KIMG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_7VQC, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_C8QD, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_9GE2, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_W6UK, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_ZCTS, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_CN2O, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_H8GL, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_710U, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DesignScreenSize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_E1ZC, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_Y839, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0270);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_0MEM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_E7PP, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_W6HA, 0x0459);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0470);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_O8AV, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// class UViewportStatsSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ViewportStatsSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewportStatsSubsystem, UnknownData_O0UM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewportStatsSubsystem, 0x0050);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class UVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__VirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, Settings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bContinuousUpdate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bSinglePhysicalSpace, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, UnknownData_FJ85, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture2D, 0x0110);
		}

		// class UVirtualTextureBuilder : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, BuildHash, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureBuilder, 0x0038);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_JQJK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_1DY7, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_NQ2B, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_H7G4, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0130);
		}

		// class UVolumetricCloudComponent : public USceneComponent
		TEST_METHOD(Class__Engine__VolumetricCloudComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_7HAA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, LayerHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingStartMaxDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingMaxDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, PlanetRadius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, GroundAlbedo, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_8UHE, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, SkyLightCloudBottomOcclusion, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ViewSampleCountScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ReflectionSampleCountScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowViewSampleCountScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowReflectionSampleCountScale, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowTracingDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_JP15, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumetricCloudComponent, 0x0240);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_IY25, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_FES6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_VTIE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_Z48C, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_37F5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_XD0Z, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_JNLO, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0090);
		}

		// class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkinningVertexOffsets)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkinningVertexOffsets, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_7WVL, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_O593, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_3O93, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_7TDD, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_UDQO, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_OWL4, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EPMJ, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MZLS, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_CFBH, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_PCX3, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JYF6, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JRCI, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1DEW, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_86JI, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_CJM9, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_S0RD, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_CQ11, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_R6XR, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_PXFZ, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_RPVX, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0490);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_3JPW, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_ORCA, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_UL48, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_HWK4, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_VQCQ, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_RBXM, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_J83K, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_QWW7, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_19RM, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ILTI, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_ATJ0, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_7HXZ, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_30GN, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_JX0V, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_FOZI, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_8AXZ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_A00H, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, CookedQualityLevelIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, UnknownData_DVAZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0050);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_3HR6, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_VUMC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_5ZT9, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_POSC, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0090);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_J511, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, AudioBus, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_9G17, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0388);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_U8YC, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, GainMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_A8KX, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, WetLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, DryLevel, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_XA27, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0090);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_IX8I, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_ZVUB, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x02B8);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_4A66, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_ZGVT, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_RF07, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_Z5NM, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_5X0C, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_M38Q, 0x075D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0760);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_XWIB, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_UDKW, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TraceSampleCountScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPerspectiveStartDepth, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_NQ6B, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_EG39, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02D0);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_E171, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_PK00, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyVarianceParameters, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyReflectionMultiplier, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bDoAsyncCapture, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_DU1Z, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_VBZF, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionStrength, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionExtent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionMapResolutionScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionApertureScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_R942, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_NFR0, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0430);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00D0);
		}

		// class UDFFExtraData : public UDataAsset
		TEST_METHOD(Class__GTABase__DFFExtraData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDFFExtraData, ModelData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDFFExtraData, TextFileLocation, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDFFExtraData, 0x0050);
		}

		// class UDistantHLODBuilder : public UDataAsset
		TEST_METHOD(Class__GTABase__DistantHLODBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistantHLODBuilder, 0x0030);
		}

		// class AGTAGameMode : public AGameModeBase
		TEST_METHOD(Class__GTABase__GTAGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGameMode, Gameface, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGameMode, UnknownData_TEB5, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAGameMode, 0x02F8);
		}

		// class UGameterface : public UObject
		TEST_METHOD(Class__GTABase__Gameterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_UEMK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CinematicPlayer, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_WSOF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, StreamRequests, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, EffectsLibrary, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Cinematics, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CinematicDB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_9DQJ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CarRecordings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Haptics, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, EntityLink, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ExtraPedDensityMult, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ExtraPedDistanceMult, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ExtraCarDensityMult, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ExtraCarDistanceMult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_SV99, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, LoadedObjects, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CurrentCutscene, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Scalability, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Radar, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, TargetHalo, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Skidmarks, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Ropes, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, BloodyFootprints, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, SceneProbes, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Water, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, TextureLookup, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ModelData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, PathfindingNodes, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Fonts, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Paks, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, RoadSignText, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, RoadSignPalettes, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Streams, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, IMGs, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, Markers, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, TargetHaloClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, FireClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, DecalHelperClass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, DefaultScorchedMI, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, WaterDetailDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, WaterDetailDistance_InBoat, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, NeedsInvincibilityCheck, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, InvincibilityNewGameCheck, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_1Q4X, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, SKMsSetUpForGangSigns, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, SpecialCutsceneMappings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, DefaultHeadlightOffMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, DefaultHeadlightOnMaterial, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, BloodPoolClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, SpecialCharacterExcludeFromWindFlapping, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CurrentHudDrawer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CurrentPriorityHudDrawer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, TransitionMap, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CurrentMenu, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_0P72, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, LaunchedFromMainMenu, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, IsMenuMapUpdating, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_ZL5D, 0x031E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, listeningForKeyMapping, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_CXHH, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, items, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_DERC, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CEntityRefCounter, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, DynamicColorBoost, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, HelpTextOverrides, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CollisionCache, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CollisionSectionContainer, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_UWYU, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, PathIplContainer, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, RadioStreams, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, TrafficLightCache, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ReflectionActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CurrentReflectionPosition, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, TargetReflectionPosition, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ReflectionTargetContext, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ActiveTOD, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_7G4Y, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, SSRReflectionClass, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, PlanarReflectionClass, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CubeReflectionClass, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ReflectionMaterialSetups, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ChalkOutlineClass, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, CinematicCarClass, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, IFPFileContainer, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_C5F8, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, SpecialBlankMeshForCutscenes, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, SocialClubUI, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_RVKP, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, IntroMovieClass, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, IntroMovieFile, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, LowQualityIntroMovieFile, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, IntroMovieAsset, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, FramesSinceLastLongDistanceCut, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, VerticalBlurInstance, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, HorizontalBlurInstance, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, ActivityManager, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterface, UnknownData_J1YF, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameterface, 0x0730);
		}

		// class UEntityLinker : public UObject
		TEST_METHOD(Class__GTABase__EntityLinker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEntityLinker, UnknownData_K1WO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEntityLinker, 0x0078);
		}

		// class UGTAOptionsList : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAOptionsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAOptionsList, Category, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAOptionsList, UnknownData_CD8Z, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAOptionsList, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAOptionsList, 0x0048);
		}

		// class UGTAFidelityOption : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAFidelityOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFidelityOption, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFidelityOption, Changables, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFidelityOption, UnknownData_KMCV, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAFidelityOption, 0x0090);
		}

		// class UGameterSettings : public UGameUserSettings
		TEST_METHOD(Class__GTABase__GameterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UnknownData_1S8Y, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, Graphics, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, Controls, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, Gameplay, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, Audio, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, Language, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UnknownData_IBLM, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, DefaultClassName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, FidelitySetting, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, DefaultsVersion, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, HeldLastResolution, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, HeldLastScreenMode, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, HeldLastOutputMonitor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, RequiresRestart, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, bDisableDynamicResolution, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UnknownData_ZTZ6, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UserOverrideCVars, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UserOverrideValues, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, PlatformFidelitySettings, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, LastRefreshRate, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UnknownData_LNRL, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, LastOutputMonitorName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, lastSystemLanguage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, ForcedSCEnvironment, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, TotalTimePlayed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UnknownData_QUJV, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, GPUBenchmarkScore, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameterSettings, UnknownData_0CGZ, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameterSettings, 0x0320);
		}

		// class UDefaultGameterSettings_Rules : public UObject
		TEST_METHOD(Class__GTABase__DefaultGameterSettings_Rules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultGameterSettings_Rules, Graphics, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultGameterSettings_Rules, Controls, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultGameterSettings_Rules, Gameplay, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultGameterSettings_Rules, Audio, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultGameterSettings_Rules, Language, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultGameterSettings_Rules, FidelitySetting, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultGameterSettings_Rules, UnknownData_HRMI, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultGameterSettings_Rules, 0x0148);
		}

		// class AGrungeProxy : public AActor
		TEST_METHOD(Class__GTABase__GrungeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrungeProxy, UnknownData_7S55, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrungeProxy, BuiltComponents, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGrungeProxy, 0x0238);
		}

		// class AGrungePlacementBase : public AActor
		TEST_METHOD(Class__GTABase__GrungePlacementBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrungePlacementBase, Guid, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrungePlacementBase, bIncludeInMapProxy, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrungePlacementBase, UnknownData_SKPT, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGrungePlacementBase, 0x0238);
		}

		// class UGTAActivityManager : public UObject
		TEST_METHOD(Class__GTABase__GTAActivityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAActivityManager, UnknownData_VT3D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAActivityManager, 0x00E8);
		}

		// class AGTAActor : public AActor
		TEST_METHOD(Class__GTABase__GTAActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, ModelID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, UnknownData_LZQ2, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, AttachedFrameComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, FadeDelegate, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, CurrentAlpha, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, UnknownData_QF1Q, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, VariationSeed, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, DynamicAO, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, DynamicUplighting, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, UplightStrength, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, AOStrength, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAActor, UnknownData_M64L, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAActor, 0x02A0);
		}

		// class AGTASMActor : public AGTAActor
		TEST_METHOD(Class__GTABase__GTASMActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASMActor, Mesh, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTASMActor, 0x02A8);
		}

		// class AGTASKActor : public AGTAActor
		TEST_METHOD(Class__GTABase__GTASKActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKActor, Mesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKActor, bHasBoneTransformTweaks, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKActor, UnknownData_O9EW, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKActor, maps, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKActor, bNeedsRawToFinalPose, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKActor, UnknownData_NL3A, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTASKActor, 0x0320);
		}

		// class AGTAAOSkeletalProxy : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAAOSkeletalProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, ConstructedComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, AccompanyComponent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, WheelComponents, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, GeneratedMesh, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, SrcMesh, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, ExcludeBones, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, bIncludeTranslucents, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, bAddWheels, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, UnknownData_2BTE, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, WheelScaling, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, BoneTweaks, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, MinMaxAO, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, AccompanyMesh, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, OnlyTransferBones, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, WindowMIC, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAAOSkeletalProxy, UnknownData_D7Q5, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAAOSkeletalProxy, 0x0328);
		}

		// class AGTASKProxyActor : public AGTASKActor
		TEST_METHOD(Class__GTABase__GTASKProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, CurSeed, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, SkinColorMult, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, ClothingColorMult, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, AccessoryColorMult, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, bValidSkinColorMult, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, bValidClothingColorMult, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, bValidAccessoryColorMult, 0x0356);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASKProxyActor, UnknownData_IEKD, 0x0357);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTASKProxyActor, 0x0358);
		}

		// class UGTAAudioComponent : public UAudioComponent
		TEST_METHOD(Class__GTABase__GTAAudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAAudioComponent, UnknownData_3XLK, 0x0860);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAAudioComponent, 0x0890);
		}

		// class AGTABloodPool : public AGTAActor
		TEST_METHOD(Class__GTABase__GTABloodPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodPool, AlphaValue, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodPool, UnknownData_IHE6, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTABloodPool, 0x02A8);
		}

		// class AGTAVertexSettingsOverride : public AActor
		TEST_METHOD(Class__GTABase__GTAVertexSettingsOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVertexSettingsOverride, bDisallowPerInstanceColors, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVertexSettingsOverride, UnknownData_KGE2, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVertexSettingsOverride, aoSettings, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVertexSettingsOverride, uplightSettings, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAVertexSettingsOverride, 0x0288);
		}

		// class UGTALightingProbeComponent : public USceneComponent
		TEST_METHOD(Class__GTABase__GTALightingProbeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTALightingProbeComponent, UnknownData_33SM, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTALightingProbeComponent, 0x0200);
		}

		// class AGTALightingProbe : public AActor
		TEST_METHOD(Class__GTABase__GTALightingProbe)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTALightingProbe, 0x0220);
		}

		// class AGTAVertexLightSphere : public AActor
		TEST_METHOD(Class__GTABase__GTAVertexLightSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAVertexLightSphere, 0x0220);
		}

		// class AGTABloodyFootprints : public AGTAActor
		TEST_METHOD(Class__GTABase__GTABloodyFootprints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, FootprintMI, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, FootprintPMC, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, FootprintLifetimeOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, FootprintScale, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, InitialAlphaScale, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, UnknownData_WH3R, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, Footprints, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, DecalSize, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, DecalRotationOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABloodyFootprints, UnknownData_EHHE, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTABloodyFootprints, 0x0300);
		}

		// class UGTAUE4MapCache : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAUE4MapCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAUE4MapCache, MapAssets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAUE4MapCache, bInvalidateCacheOnNextRun, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAUE4MapCache, UnknownData_U0PS, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAUE4MapCache, 0x0088);
		}

		// class UIMGFileUserData : public UAssetUserData
		TEST_METHOD(Class__GTABase__IMGFileUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFileUserData, SmRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFileUserData, GtaImageFile, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFileUserData, bFixupIPLOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFileUserData, UnknownData_YQKV, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFileUserData, CustomModelId, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIMGFileUserData, 0x0080);
		}

		// class UCollisionExcludeList : public UDataAsset
		TEST_METHOD(Class__GTABase__CollisionExcludeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionExcludeList, CollisionNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionExcludeList, ImgGame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionExcludeList, UnknownData_NP7K, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionExcludeList, 0x0048);
		}

		// class ACollisionMaterialViz : public AGTAActor
		TEST_METHOD(Class__GTABase__CollisionMaterialViz)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollisionMaterialViz, VizComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollisionMaterialViz, VizMaterial, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACollisionMaterialViz, 0x02B0);
		}

		// class AIPLMapActor : public AGTASMActor
		TEST_METHOD(Class__GTABase__IPLMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIPLMapActor, OriginalDFF, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIPLMapActor, areaCodeAndFlags, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIPLMapActor, IplIndex, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIPLMapActor, UnknownData_ZOB8, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIPLMapActor, 0x02C0);
		}

		// class ADynamicIPLMapActor : public AIPLMapActor
		TEST_METHOD(Class__GTABase__DynamicIPLMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicIPLMapActor, bConstructDynamically, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicIPLMapActor, bSpawnAtZero, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicIPLMapActor, UnknownData_SF2T, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicIPLMapActor, VolumetricAOStrength, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicIPLMapActor, VolumetricUplightingStrength, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicIPLMapActor, DamageAmt, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicIPLMapActor, UnknownData_Q11S, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADynamicIPLMapActor, 0x02D8);
		}

		// class UMeshBevellingDataBase : public UAssetUserData
		TEST_METHOD(Class__GTABase__MeshBevellingDataBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBevellingDataBase, bApplyBevelling, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBevellingDataBase, bRemoveBevelling, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBevellingDataBase, bForceBevellingAlreadyApplied, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBevellingDataBase, bHasBevelApplied, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBevellingDataBase, UnknownData_RW8L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshBevellingDataBase, 0x0030);
		}

		// class UProcTextData : public UDataAsset
		TEST_METHOD(Class__GTABase__ProcTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcTextData, CharacterMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcTextData, SpaceSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcTextData, LineSpacing, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcTextData, 0x0088);
		}

		// class URage : public UObject
		TEST_METHOD(Class__GTABase__Rage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URage, UnknownData_RG3K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URage, 0x0080);
		}

		// class URageEditorMenu : public UObject
		TEST_METHOD(Class__GTABase__RageEditorMenu)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URageEditorMenu, 0x0028);
		}

		// class URageSaveData : public USaveGame
		TEST_METHOD(Class__GTABase__RageSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URageSaveData, SaveSlotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URageSaveData, LastModifiedTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URageSaveData, SaveData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URageSaveData, 0x0058);
		}

		// class UStreetDecalComponent : public UProceduralMeshComponent
		TEST_METHOD(Class__GTABase__StreetDecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreetDecalComponent, UnknownData_WLT7, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreetDecalComponent, 0x04F0);
		}

		// class AStreetLightMapActor : public ADynamicIPLMapActor
		TEST_METHOD(Class__GTABase__StreetLightMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, Decals, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, DecalGridSize, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, DecalBrightness, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, DecalMIC, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, UnknownData_APEJ, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, DecalUVs, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, UnknownData_7QD1, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, LowQualitySettings, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, UnknownData_Z0HI, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, CurrentDecalComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStreetLightMapActor, UnknownData_9PTD, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStreetLightMapActor, 0x0370);
		}

		// class UUITransition : public UObject
		TEST_METHOD(Class__GTABase__UITransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransition, TransitionObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransition, MenuTransitionObject, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUITransition, 0x0038);
		}

		// class UUITransitionScreen : public UUserWidget
		TEST_METHOD(Class__GTABase__UITransitionScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, CurrentState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, UnknownData_RRUY, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, FadeTimes, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, FadeInDirection, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, bIsInGameTransition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, UnknownData_6V67, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, NameGivenAtCreation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, bIsFlexibleTransition, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, bDoesOverrideSimpleFades, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, DoesModifyDialogVolume, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, UnknownData_6Q2E, 0x02A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, DialogVolumeMultiplier, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, HasTickedSinceLastChange, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITransitionScreen, UnknownData_DJ2H, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUITransitionScreen, 0x02B0);
		}

		// class UGTACarRecordings : public UDataAsset
		TEST_METHOD(Class__GTABase__GTACarRecordings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACarRecordings, Files, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACarRecordings, Index, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACarRecordings, StartFrame, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACarRecordings, EndFrame, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACarRecordings, UnknownData_Q86H, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTACarRecordings, 0x0090);
		}

		// class UGTACinematicDB : public UDataAsset
		TEST_METHOD(Class__GTABase__GTACinematicDB)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACinematicDB, Cinematics, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACinematicDB, UnknownData_H2TA, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTACinematicDB, 0x0090);
		}

		// class UGTACollisionCache : public UDataAsset
		TEST_METHOD(Class__GTABase__GTACollisionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionCache, ColItems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionCache, ColBounds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionCache, IplItems, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionCache, IplBounds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionCache, SectionSizes, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTACollisionCache, 0x0080);
		}

		// class AGTATimeOfDay : public AGTAActor
		TEST_METHOD(Class__GTABase__GTATimeOfDay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnknownData_SWJ8, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, bLiveEditMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnknownData_71B8, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SkylightColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SkyLowerColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SkyUpperColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SkyReflectionColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CameraParameters, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudParams, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, VolumetricCloudColor, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, VolumetricCloudExtinction, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, VolumetricCloudEmission, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudBackgroundColor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudLowerColor, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudUpperColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudSecondaryColor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudDensityVariation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudBaseDensity, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudVariationSpeed, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudWindSpeed, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, FogColor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, FogParameters, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, MoonColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, StarsColor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SunColor, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SunshineAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UplightingColor, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, PostSettings, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CityGlowAmount, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, ExtraSunnyAmount, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SmogAmount, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudyAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, RainyAmount, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, FoggyAmount, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SandstormAmount, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnderwaterAmount, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, Misc1Amount, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, Misc2Amount, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, RiotAmount, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CurrentSkyVisibility, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, OccludedSky_PostSettings, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, OccludedSky_UplightingColor, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, OccludedSky_FogColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, OccludedSky_FogParameters, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, OccludedSky_SkylightColor, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, OccludedSky_OverrideGroundColor, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, OccludedSky_SkyReflectivity, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, PostProcessVolume, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, Atmosphere, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudActor, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, VolumetricCloudClass, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, BaseGroundColor, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, GroundEffectingLights, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CurrentGroundColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SunLightActor, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SecondsToInterpSun, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CurSunInterpFrame, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CurSunBaseRotator, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SunInterpThreshold, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SunJumpAngleThreshold, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SunLightShadowDefault, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CachedAtmosphereHeight, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnknownData_RIDR, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, GlobalParamInstance, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, InteriorGroundColor, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, InteriorPostEffects, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, InteriorCityGlow, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, InteriorUplightingAmount, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, InteriorUplightingDot, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UplightDot_Directionality, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UplightDot_UpLerp, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, bHasMorningShadows, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnknownData_KIPM, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, HighVelocityAOPercentage, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnknownData_7GJS, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, Times, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, BaseSettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, ExtraSunnySettings, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SmogSettings, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CloudySettings, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, RainySettings, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, FoggySettings, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, SandstormSettings, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnderwaterSettings, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, Misc1Settings, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, Misc2Settings, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, RiotSettings, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, bIsMainTOD, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, bPurpleSky, 0x1101);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, UnknownData_PHFB, 0x1102);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, PurpleSkyChance, 0x1104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CityGlow_LowQ, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, CityGlow_HighQ, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATimeOfDay, GlowComponents, 0x1128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTATimeOfDay, 0x1138);
		}

		// class UGTACollisionData : public UAssetUserData
		TEST_METHOD(Class__GTABase__GTACollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, ModelName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, OriginalCollisionModelName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, bShouldReplaceGTACollision, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, UnknownData_RHCU, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, BoundingBox, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, Capsules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, Spheres, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, Boxes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionData, Tris, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTACollisionData, 0x00C8);
		}

		// class UGTACollisionDataCollection : public UDataAsset
		TEST_METHOD(Class__GTABase__GTACollisionDataCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACollisionDataCollection, CollisionCollection, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTACollisionDataCollection, 0x0080);
		}

		// class UCollisionFileBackup : public UAssetUserData
		TEST_METHOD(Class__GTABase__CollisionFileBackup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionFileBackup, UnknownData_6M3E, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionFileBackup, 0x0040);
		}

		// class UCollisionSectionContainer : public UDataAsset
		TEST_METHOD(Class__GTABase__CollisionSectionContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionSectionContainer, CollisionSections, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionSectionContainer, 0x0080);
		}

		// class UGTACoronaComponent : public UProceduralMeshComponent
		TEST_METHOD(Class__GTABase__GTACoronaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTACoronaComponent, UnknownData_D05K, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTACoronaComponent, 0x0500);
		}

		// class AGTAClutterActor : public AGTASMActor
		TEST_METHOD(Class__GTABase__GTAClutterActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAClutterActor, Parent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAClutterActor, UnknownData_SPI7, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAClutterActor, 0x02B8);
		}

		// class AGTACustomEntity : public AGTAClutterActor
		TEST_METHOD(Class__GTABase__GTACustomEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTACustomEntity, ExtraCollision, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTACustomEntity, UnknownData_3LSM, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTACustomEntity, bIgnoreCollision, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTACustomEntity, UnknownData_92U5, 0x02D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTACustomEntity, 0x02D8);
		}

		// class AGTACustomEntitySM : public AGTACustomEntity
		TEST_METHOD(Class__GTABase__GTACustomEntitySM)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTACustomEntitySM, 0x02D8);
		}

		// class AGTADecalHelper : public AActor
		TEST_METHOD(Class__GTABase__GTADecalHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTADecalHelper, CompletedEntries, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTADecalHelper, ActiveEntries, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTADecalHelper, ActiveText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTADecalHelper, TextTemplate, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTADecalHelper, TextFaceColorMult, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTADecalHelper, TextBevelColorMult, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTADecalHelper, TextExtrudeColorMult, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTADecalHelper, 0x0288);
		}

		// class UGTAEffectLibrary : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAEffectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAEffectLibrary, Effects, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAEffectLibrary, BulletImpacts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAEffectLibrary, UnknownData_YOCR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAEffectLibrary, 0x00B0);
		}

		// class AGTAEnvEffect : public AEmitter
		TEST_METHOD(Class__GTABase__GTAEnvEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAEnvEffect, 0x0270);
		}

		// class AGTAEnvLightingVolumeGrid : public AActor
		TEST_METHOD(Class__GTABase__GTAEnvLightingVolumeGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAEnvLightingVolumeGrid, UnknownData_PC8X, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAEnvLightingVolumeGrid, Bounds, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAEnvLightingVolumeGrid, CellDimX, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAEnvLightingVolumeGrid, CellDimY, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAEnvLightingVolumeGrid, CellDimZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAEnvLightingVolumeGrid, Info, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAEnvLightingVolumeGrid, 0x0280);
		}

		// class AGTASkyOcclusionOverride : public AActor
		TEST_METHOD(Class__GTABase__GTASkyOcclusionOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkyOcclusionOverride, bIgnoreOccludeZ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkyOcclusionOverride, UnknownData_UFK2, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkyOcclusionOverride, ForceOcclusionValue, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkyOcclusionOverride, Box, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTASkyOcclusionOverride, 0x0230);
		}

		// class AGTAExplosion : public AActor
		TEST_METHOD(Class__GTABase__GTAExplosion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, UnknownData_YKHW, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, AttachedVehicle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, ExplosionEffect, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, DebrisEffect, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, ExplosionLight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, bSuppressLight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, UnknownData_ZPHY, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, BlastDecalMI, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, CullProceduralGrassScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, CullClutterScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, LightRadius, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, LightIntensity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, bImportantExplosion, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, UnknownData_0CWX, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, DecalMinZ, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, BlastDecalRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, BlastDecalOffset, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, BlastDecalGridSize, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAExplosion, BlastDecalLifetime, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAExplosion, 0x0288);
		}

		// class AGTAFire : public AActor
		TEST_METHOD(Class__GTABase__GTAFire)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, TopologySlopeLimit, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, UnknownData_2SV6, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, FX, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, GroundSmolderBaseMI, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, GroundSmolderMI, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, SmolderFadeInTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, SmolderMaxTimeOnScreen, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, SmolderScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, SmolderMaxAlpha, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, SmolderRandOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, NumSmolders, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, Strength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, UnknownData_Z2LU, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, AttachActor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, Topology, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAFire, UnknownData_FRAX, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAFire, 0x0298);
		}

		// class AFireBurningCluster : public AActor
		TEST_METHOD(Class__GTABase__FireBurningCluster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFireBurningCluster, 0x0220);
		}

		// class UGTAGameEngine : public UGameEngine
		TEST_METHOD(Class__GTABase__GTAGameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAGameEngine, RageActor, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAGameEngine, UnknownData_TLU7, 0x0E38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAGameEngine, 0x0E40);
		}

		// class UGTAClutterGrassType : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAClutterGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAClutterGrassType, Varieties, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAClutterGrassType, Listings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAClutterGrassType, BlendedMaterialCutoffPercent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAClutterGrassType, UnknownData_J8DC, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAClutterGrassType, 0x0058);
		}

		// class AGTAGrassProxy : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAGrassProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, RandomSeedOffset, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, UnknownData_JWJ3, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, BuiltData, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, Bounds, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, UnknownData_754T, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, RuntimeGrassComponents, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, RuntimeMeshComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, RuntimeProcComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassProxy, RuntimeActors, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAGrassProxy, 0x0320);
		}

		// class AGTAGrassExcluder : public AActor
		TEST_METHOD(Class__GTABase__GTAGrassExcluder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAGrassExcluder, Box, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAGrassExcluder, 0x0228);
		}

		// class UGTATrafficLightCache : public UDataAsset
		TEST_METHOD(Class__GTABase__GTATrafficLightCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTATrafficLightCache, StoredTrafficLights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTATrafficLightCache, 0x0040);
		}

		// class UUI_DesignTimeUserWidget : public UUserWidget
		TEST_METHOD(Class__GTABase__UI_DesignTimeUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DesignTimeUserWidget, HasTextToBeLocalized, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DesignTimeUserWidget, UnknownData_WB0I, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DesignTimeUserWidget, WidgetsRequiringLoc, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DesignTimeUserWidget, OriginalLocKeys, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DesignTimeUserWidget, UnknownData_25O5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DesignTimeUserWidget, bTriedSocialClubResolve, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DesignTimeUserWidget, UnknownData_JUV6, 0x028D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_DesignTimeUserWidget, 0x0290);
		}

		// class UUI_GTAHUDItem : public UUI_DesignTimeUserWidget
		TEST_METHOD(Class__GTABase__UI_GTAHUDItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDItem, ParentHUD, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDItem, ZOrderOverride, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDItem, AllowColorToChangeVisibility, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDItem, UnknownData_L6D0, 0x029D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GTAHUDItem, 0x02A0);
		}

		// class UUI_GTAHUDDrawer : public UUI_DesignTimeUserWidget
		TEST_METHOD(Class__GTABase__UI_GTAHUDDrawer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDDrawer, XScale, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDDrawer, YScale, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDDrawer, ScreenSizeX, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GTAHUDDrawer, ScreenSizeY, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GTAHUDDrawer, 0x02A0);
		}

		// class UGTAImageDecorator : public URichTextBlockImageDecorator
		TEST_METHOD(Class__GTABase__GTAImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAImageDecorator, IconSpriteMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAImageDecorator, DefaultTexture, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAImageDecorator, StoredMaterials, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAImageDecorator, 0x0090);
		}

		// class UGTAMainMenuUITemplate : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAMainMenuUITemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, GameBitMask, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, UnknownData_QQZI, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, BackgroundWidget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, GameIcon, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MainButtonsAnchors, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MainButtonsOffsets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, TabAreaAnchors, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, TabAreaOffsets, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, LogoAreaAnchors, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, LeftButtonTemplate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, LeftButtons, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, AltLeftButtonText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, LeftButtonSelectedBackgroundOverride, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, LeftButtonVerticalSize, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, HelpTextShadowColor, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, UnknownData_OTVQ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, StartupSound, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, ExitSound, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, StartSound, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, BackSound, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MainButtonHighlightSound, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, TabHighlightSound, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SelectorTabs, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, FunctionToCallOnPress, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, StartingTab, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, UnknownData_AN21, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SlotStyleOverride, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SlotStyleDefaults, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, AdjustableControlsLayout, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MapKeyStyle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MapKeySlotBackgroundBrush, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MapHelpBackground, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SliderSlotClass, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SelectionSlotClass, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, BoolSlotClass, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MessageSlotClass, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, TabConfirmationDialog, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, FullScreenConfirmationClass, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, ControllerDisconnectClass, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, MissionRetryConfirmationClass, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, RadioVolumeMultiplier, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, UnknownData_SM9S, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, RadioStations, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, DialogSampleSound, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SFXSampleSound, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SCBackgroundTint, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SCBackgroundWidget, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, SCButtonTemplate, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, PreMenuLegalScreen, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMainMenuUITemplate, LoadingScreen, 0x0998);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAMainMenuUITemplate, 0x09A0);
		}

		// class UUI_LoadingScreen : public UUI_DesignTimeUserWidget
		TEST_METHOD(Class__GTABase__UI_LoadingScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LoadingScreen, Gameterface, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_LoadingScreen, 0x0298);
		}

		// class AGTAUpgradePart : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAUpgradePart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAUpgradePart, UnknownData_TTIV, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAUpgradePart, Mesh, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAUpgradePart, PartType, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAUpgradePart, SocketName, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAUpgradePart, UnknownData_QUNU, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAUpgradePart, 0x02E0);
		}

		// class UGTAVehicleColorDB : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAVehicleColorDB)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleColorDB, Colors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAVehicleColorDB, 0x0040);
		}

		// class UGTAViewportClient : public UGameViewportClient
		TEST_METHOD(Class__GTABase__GTAViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAViewportClient, TransitionManager, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAViewportClient, 0x0368);
		}

		// class AGTAVolumetricCloud : public AVolumetricCloud
		TEST_METHOD(Class__GTABase__GTAVolumetricCloud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVolumetricCloud, TimeOfDayActor, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAVolumetricCloud, 0x0230);
		}

		// class AGTAWater : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, DistantWater, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, CloseWater, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, BoatWake, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, SeaBed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, WaterCannon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, BulletTrace, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, WaterMI, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, BoatWakeMI, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, SeaBedMI, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, WaterCannonMI, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, BulletTraceMI, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, GlobalParamInstance, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, WaterEdgeExtent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, WaterEdgeZ, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, RippleGrowSpeed, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWater, UnknownData_DRVB, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAWater, 0x0570);
		}

		// class AGTAWeapon : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWeapon, WeaponMesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWeapon, FlashMat, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAWeapon, 0x02B0);
		}

		// class AGTAWindowLights : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAWindowLights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLights, ChannelLightStrengths, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLights, BuiltWindows, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLights, Bounds, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLights, UnknownData_WVQZ, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLights, LightComponents, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLights, UnknownData_A5TZ, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAWindowLights, 0x0360);
		}

		// class UGTAWorldComposition : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAWorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, UnknownData_HGFN, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, TextureFlushNextFrame, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, Sections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, Interiors, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, ExteriorMaps, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, GrungeMaps, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, QuadrantDistance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, MapProxyDistance, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, SubMapDistance, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, EmergencySubMapDistance, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, EmergencyLoadMS_Min, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, EmergencyLoadMS_Max, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, CurrentEmergencyLoadMS, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, UnloadSubMapDistance, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, MobileReduction_Sections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, MobileReduction_Quadrants, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, MobileReduction_Maps, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, UnknownData_J72Q, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, HiddenDistanceHLODMIC, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, Velocity_SampleInterval, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, Velocity_MinBoundsScale, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, Velocity_Max, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, Velocity_MinSimSpeed, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, UnknownData_B6TX, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, RequestedMaps, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, parentSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, lastArea, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, UnknownData_Y5OO, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, FarCoronaMIC, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, bHidden, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAWorldComposition, UnknownData_CPDM, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAWorldComposition, 0x0270);
		}

		// class AGTAWorldBoundsExtender : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAWorldBoundsExtender)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldBoundsExtender, Box, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAWorldBoundsExtender, 0x02A8);
		}

		// class AGTAWorldSettings : public AWorldSettings
		TEST_METHOD(Class__GTABase__GTAWorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UnknownData_6FLO, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, StaticCoronaComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, DynamicCoronaComponent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UpcloseCoronaComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, SubwayActors, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, bCulledSubwayActors, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UnknownData_ZNPU, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, StreetLight_OffTime, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, StreetLight_OnTime, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, SkyOcclusionZ, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, GameInterfaceClass, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, WorldComposition, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, VehicleColorDB, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, EmulatePlatform, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UnknownData_C23I, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, MainMenuUITemplate, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, MainMenuClass, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, PauseMenuUITemplate, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, PauseMenuClass, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, SaveMenuClass, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, GenericCoronaMIC, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UpCloseCoronaMIC, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, DynamicColorBoost, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, ParticleEmissiveScale, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UnknownData_BXUU, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, DecalHelper, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, HUDDrawerClass, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, PriorityHUDDrawerClass, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, bUseHudDrawer, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UnknownData_9QPY, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, TextureRebiasPercentage, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWorldSettings, UnknownData_NETR, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAWorldSettings, 0x04C0);
		}

		// class UIMGFile : public UDataAsset
		TEST_METHOD(Class__GTABase__IMGFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFile, allEntries, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFile, numFiles, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFile, totalSize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFile, srcFilename, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFile, UnknownData_K5JP, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIMGFile, CollisionImportHashTable, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIMGFile, 0x00F8);
		}

		// class UGTAHaptics : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAHaptics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAHaptics, ForceFeedbackTable, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAHaptics, 0x0040);
		}

		// class AGTAHUD : public AHUD
		TEST_METHOD(Class__GTABase__GTAHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAHUD, Font, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAHUD, 0x0318);
		}

		// class AGTAPathfindVisualization : public AActor
		TEST_METHOD(Class__GTABase__GTAPathfindVisualization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, LoadedRegion, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, LoadedAdjacentRegions, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, NodeContainer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, InstancedNodes, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, AssociatedComposition, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, SelectedInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, UnknownData_G9MN, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, MeshGenVizComponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, MeshGenVizMI, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, bOnlyDrawFloodFill, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, bGenerateDataAfterFill, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, bAppendIfExists, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, UnknownData_QFQZ, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, GeneratedPathData, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, LaneWidth, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, FloodFillNodeLimit, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, FloodNodeTweaks, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, IgnoreTheseNodes, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, FloodFillMats, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, SelectNodeToSnapTo, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, RenderDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, NodeColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVisualization, ActiveNode, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAPathfindVisualization, 0x0368);
		}

		// class UPathsIplContainer : public UDataAsset
		TEST_METHOD(Class__GTABase__PathsIplContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathsIplContainer, bReloadFromIpl, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathsIplContainer, bAssignRadarGroupType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathsIplContainer, bDeleteLastGroup, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathsIplContainer, bFixOldIndex, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathsIplContainer, bReimportSafely, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathsIplContainer, UnknownData_ZX3Q, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathsIplContainer, 0x0058);
		}

		// class AGTAPathfindVizRaw : public AActor
		TEST_METHOD(Class__GTABase__GTAPathfindVizRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVizRaw, InstancedNodes, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVizRaw, Nodes, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVizRaw, RenderDistance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVizRaw, SelectedNode, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVizRaw, NodesOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVizRaw, VizGame, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPathfindVizRaw, UnknownData_HWNY, 0x0255);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAPathfindVizRaw, 0x0258);
		}

		// class UFloodPath : public UDataAsset
		TEST_METHOD(Class__GTABase__FloodPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloodPath, ConstructPaths, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloodPath, AssociatedMeshes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloodPath, ForceReversePoints, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloodPath, ColinearOptimizeCosine, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloodPath, ColinearOptimizeMaxDiffDist, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloodPath, 0x00A8);
		}

		// class AGTAPlayerActor : public AGTASKActor
		TEST_METHOD(Class__GTABase__GTAPlayerActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerActor, bUseBoneTweaks, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerActor, UnknownData_3AYP, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerActor, CurrentTorsoMask, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerActor, fatness, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerActor, muscle, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerActor, HoldPhoneTweaks, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerActor, CrouchTweaks, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAPlayerActor, 0x0358);
		}

		// class UGTACheatManager : public UCheatManager
		TEST_METHOD(Class__GTABase__GTACheatManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTACheatManager, 0x0078);
		}

		// class AGTAPlayerController : public APlayerController
		TEST_METHOD(Class__GTABase__GTAPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerController, UnknownData_2IOL, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPlayerController, CutsceneCamera, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAPlayerController, 0x0598);
		}

		// class UGTAPoseableComponent : public UPoseableMeshComponent
		TEST_METHOD(Class__GTABase__GTAPoseableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPoseableComponent, UnknownData_9426, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPoseableComponent, TeleportDistanceThreshold, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPoseableComponent, TeleportRotationThreshold, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPoseableComponent, UnknownData_15M7, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAPoseableComponent, 0x08F8);
		}

		// class UGTAPoseableMeshComponent_BlendTarget : public UGTAPoseableComponent
		TEST_METHOD(Class__GTABase__GTAPoseableMeshComponent_BlendTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPoseableMeshComponent_BlendTarget, DontLerpTheseBones, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPoseableMeshComponent_BlendTarget, LerpList, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPoseableMeshComponent_BlendTarget, UnknownData_IBVT, 0x0918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAPoseableMeshComponent_BlendTarget, 0x0920);
		}

		// class AGTABlendableSKActor : public AGTASKActor
		TEST_METHOD(Class__GTABase__GTABlendableSKActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTABlendableSKActor, ActiveBlendComponent, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTABlendableSKActor, 0x0328);
		}

		// class AGTAPostLightReplacer : public AActor
		TEST_METHOD(Class__GTABase__GTAPostLightReplacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostLightReplacer, Sphere, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostLightReplacer, EffectedLights, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostLightReplacer, PostProcessMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostLightReplacer, TransitionRadius, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostLightReplacer, CurrentPostAmount, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostLightReplacer, BaseLightIntensities, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAPostLightReplacer, 0x0258);
		}

		// class AGTAPostProcessVolume : public APostProcessVolume
		TEST_METHOD(Class__GTABase__GTAPostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, UnknownData_I4K8, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, DarknessMaterial, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, InfraredMaterial, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, NightVisionMaterial, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, ThermalPedMaterialColor, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, ThermalVehicleMaterialColor, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, HDR_TweakSaturation, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, HDR_TweakGain, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, HDR_TweakContrast, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, HDR_TweakGamma, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, bIsInteriorPostProcess, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, UnknownData_894Y, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, LastBrightnessMod, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, LastContrastMod, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, LastSaturationMod, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, LastColorMod, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, VerticalBlurMat, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, HorizontalBlurMat, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPostProcessVolume, UnknownData_7VT4, 0x0880);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAPostProcessVolume, 0x0890);
		}

		// class AGTARadar : public AGTAActor
		TEST_METHOD(Class__GTABase__GTARadar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZoomFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, Sprite3DScale, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, SpriteMapScale, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, InGamePitch, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, FinalPitchOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, SpriteBias, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, StartingSpriteZDelta, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, SpriteZDelta, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, GangBias, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZoneBias, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, PathBias, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, PathWidth, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, PauseMapPathWidthMult, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MaxPathWidth, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, StartingMenuZoom, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MapScaleFactor, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, EdgeSpriteOffsets, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, SpriteLibrary, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, SpritesComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, GangComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZoneComponent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, PathComponent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, FlyingComponent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, CameraComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, RenderTarget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MapRenderTarget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MinWorldPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MaxWorldPosition, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, SpriteMI, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, GangMI, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ColorBlindGangMaterials, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ColorBlindGangMaterialsGame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ColorBlindGangTextures, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, PathMI, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ColorBlindPathMI, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, RadarCircleMI, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, FlyingMI, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZonesMI, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZoneDynMat, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZoneProceduralTex, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, UnknownData_QUI7, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, EdgeSprites, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, UnknownData_U7UK, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MIDs, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, UnknownData_OYIC, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MaxAnimatingIconSize, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, CurrentForcePulseIconScale, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, PulseAnimPeriod, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, CurrentHeartBeatIconScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, CurrentHeartBeatTime, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, HeartBeatAnimDelayTime, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, HeartBeatAnimGrowTime, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, HeartBeatAnimShrinkTime, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MaxMapZoom, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, MinMapZoom, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, UnknownData_IQTQ, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZoomedInPositionBounds, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, ZoomedOutPositionBounds, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, AutoRemoveWaypointDist, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, BlipMagnetWaypointDist, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARadar, UnknownData_G5TN, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTARadar, 0x0680);
		}

		// class UUI_Radar : public UUI_DesignTimeUserWidget
		TEST_METHOD(Class__GTABase__UI_Radar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Radar, RenderTarget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Radar, MapRenderTarget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Radar, UnknownData_KKG2, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Radar, 0x02A8);
		}

		// class UGTARadioStream : public UDataAsset
		TEST_METHOD(Class__GTABase__GTARadioStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTARadioStream, RadioStations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTARadioStream, ImgGame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTARadioStream, UnknownData_60HK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTARadioStream, 0x0048);
		}

		// class UGTASoundWaveProcedural : public USoundWaveProcedural
		TEST_METHOD(Class__GTABase__GTASoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundWaveProcedural, UnknownData_TTFL, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASoundWaveProcedural, 0x03D0);
		}

		// class USoundNodeProceduralWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__GTABase__SoundNodeProceduralWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, UnknownData_C5JQ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, SoundWaveAssets, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, QueuedSoundWaves, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, UnknownData_ZOAV, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, bContinuouslyLoop, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, UnknownData_AZHI, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, VolumeScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, UnknownData_Z1DO, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, bExistsInSoundBank, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, bRecomputeData, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeProceduralWavePlayer, UnknownData_65W0, 0x02AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeProceduralWavePlayer, 0x02F0);
		}

		// class AGTARoadSign : public AActor
		TEST_METHOD(Class__GTABase__GTARoadSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, TextComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, SignText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, PaletteNum, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, SignScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, bCenterAllLines, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, UnknownData_9M6B, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, LineScaling, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARoadSign, UnknownData_PM1T, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTARoadSign, 0x0250);
		}

		// class AGTARopes : public AGTAActor
		TEST_METHOD(Class__GTABase__GTARopes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARopes, RopeComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARopes, RopeMI, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARopes, RopeRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARopes, NumFacesPerCylinder, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARopes, UnknownData_OF24, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTARopes, 0x02D0);
		}

		// class AGTAScalability : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, TreeBPClasses, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, MinScreenResolution, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, MaxScreenResolution, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, DynamicResolutionThreshold, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, TexturePoolSize, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, ValidScreenResolutions, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, TweakPostSettings, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, CVarsToResetOnStop, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, UnknownData_7G00, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, Visuals, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, SimScales, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, Shadows, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, AntiAlias, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, RTX, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, DLSS, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, headlights, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, Headlights_PlayerOccupied, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, Streetlights, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, SunLight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, MoonLight, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, SkyLight, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, ExtraPedDensityMult, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, ExtraPedDistanceMult, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, ExtraCarDensityMult, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, ExtraCarDistanceMult, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAScalability, UnknownData_MNU0, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAScalability, 0x03C0);
		}

		// class UGTAScalableRichTextBlock : public URichTextBlock
		TEST_METHOD(Class__GTABase__GTAScalableRichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAScalableRichTextBlock, UnknownData_9IAM, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAScalableRichTextBlock, LineHeightPercentageOverride, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAScalableRichTextBlock, LineHeightPercentageOverrideForLargeFonts, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAScalableRichTextBlock, UseSubtitleSize, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAScalableRichTextBlock, UnknownData_WQH5, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAScalableRichTextBlock, ExtraSizeScale, 0x0694);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAScalableRichTextBlock, 0x0698);
		}

		// class UGTASceneCaptureComponent2D : public USceneCaptureComponent2D
		TEST_METHOD(Class__GTABase__GTASceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneCaptureComponent2D, ViewOwner, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASceneCaptureComponent2D, 0x08C0);
		}

		// class UGTASceneCaptureComponentCube : public USceneCaptureComponentCube
		TEST_METHOD(Class__GTABase__GTASceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneCaptureComponentCube, ViewOwner, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASceneCaptureComponentCube, 0x02F0);
		}

		// class AGTARTCaptureBase : public AGTAActor
		TEST_METHOD(Class__GTABase__GTARTCaptureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCaptureBase, UnknownData_6M9X, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCaptureBase, CoronaComponent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCaptureBase, CoronaMI, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCaptureBase, UnknownData_5U5Q, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTARTCaptureBase, 0x0330);
		}

		// class AGTARTCapture : public AGTARTCaptureBase
		TEST_METHOD(Class__GTABase__GTARTCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCapture, bIsLowProxyRender, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCapture, UnknownData_YUV4, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCapture, ProxyComponents, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARTCapture, PlanarCameraComponent, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTARTCapture, 0x0350);
		}

		// class UGTAIFPFileContainer : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAIFPFileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAIFPFileContainer, AnimationFiles, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAIFPFileContainer, 0x0080);
		}

		// class AGTAJetpack : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAJetpack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAJetpack, Mesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAJetpack, UnknownData_OO5J, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAJetpack, 0x02B0);
		}

		// class AGTALevelScriptActor : public ALevelScriptActor
		TEST_METHOD(Class__GTABase__GTALevelScriptActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTALevelScriptActor, 0x0228);
		}

		// class AGTALightBase : public AGTAActor
		TEST_METHOD(Class__GTABase__GTALightBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, LightSetting, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, UnknownData_EELQ, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, ChangeActorReference, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, ChangeActorEmissiveMaterial, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, TriggerVolume, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, ProximityRadius, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, CoronaIntensity, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, CoronaSize, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightBase, UnknownData_SL09, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTALightBase, 0x02D8);
		}

		// class AGTASpotLight : public AGTALightBase
		TEST_METHOD(Class__GTABase__GTASpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASpotLight, SpotLightComponent, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTASpotLight, 0x02E0);
		}

		// class AGTAPointLight : public AGTALightBase
		TEST_METHOD(Class__GTABase__GTAPointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAPointLight, PointLightComponent, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAPointLight, 0x02E0);
		}

		// class AGTARectLight : public AGTALightBase
		TEST_METHOD(Class__GTABase__GTARectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARectLight, BackscatterInUplightingStrength, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARectLight, UnknownData_QW0C, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTARectLight, RectLightComponent, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTARectLight, 0x02E8);
		}

		// class AGTAHeightFog : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAHeightFog, HeightFogComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAHeightFog, TimeOfDayActor, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAHeightFog, 0x02B0);
		}

		// class AGTAWindowLight : public AGTALightBase
		TEST_METHOD(Class__GTABase__GTAWindowLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLight, WindowSpotLight, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAWindowLight, EmissiveHighlightDecal, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAWindowLight, 0x02E8);
		}

		// class AGTALightTriggerVolume : public AVolume
		TEST_METHOD(Class__GTABase__GTALightTriggerVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightTriggerVolume, ConnectedLights, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightTriggerVolume, OverrideSkyOcclusion, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightTriggerVolume, OverrideSkyOcclusion_Distance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightTriggerVolume, OverrideSkyOcclusion_StartFromTop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTALightTriggerVolume, UnknownData_CT6C, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTALightTriggerVolume, 0x0288);
		}

		// class AGTAMarkerActor : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAMarkerActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAMarkerActor, CheckpointType, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAMarkerActor, bInitialized, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAMarkerActor, UnknownData_DO01, 0x02A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAMarkerActor, 0x02A8);
		}

		// class UGTAMaterialData : public UAssetUserData
		TEST_METHOD(Class__GTABase__GTAMaterialData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMaterialData, WindowRectMultiplier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAMaterialData, UnknownData_4VGB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAMaterialData, 0x0030);
		}

		// class UUnpackedMaterialDataBase : public UAssetUserData
		TEST_METHOD(Class__GTABase__UnpackedMaterialDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUnpackedMaterialDataBase, 0x0028);
		}

		// class AGTATargetHalo : public AActor
		TEST_METHOD(Class__GTABase__GTATargetHalo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTATargetHalo, CurrentTargets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTATargetHalo, 0x0230);
		}

		// class UGTATerrainDB : public UDataAsset
		TEST_METHOD(Class__GTABase__GTATerrainDB)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTATerrainDB, 0x0030);
		}

		// class UGTATexLookup : public UDataAsset
		TEST_METHOD(Class__GTABase__GTATexLookup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTATexLookup, Textures, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTATexLookup, Materials, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTATexLookup, 0x00D0);
		}

		// class UGTAParticleInitialLocationScale : public UParticleModuleLocationBase
		TEST_METHOD(Class__GTABase__GTAParticleInitialLocationScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAParticleInitialLocationScale, ScaleStartLocation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAParticleInitialLocationScale, 0x0078);
		}

		// class UGTAParticleRotationOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__GTABase__GTAParticleRotationOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAParticleRotationOverLife, RotRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAParticleRotationOverLife, 0x0060);
		}

		// class UGTAParticleAddColor : public UParticleModuleColorBase
		TEST_METHOD(Class__GTABase__GTAParticleAddColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAParticleAddColor, ColorAdd, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAParticleAddColor, 0x0060);
		}

		// class UGTAPerParticleSpawn : public UParticleModuleLocationBase
		TEST_METHOD(Class__GTABase__GTAPerParticleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPerParticleSpawn, SpawnCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPerParticleSpawn, bDoSpawnStream, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPerParticleSpawn, bSpawnCountPerSecond, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPerParticleSpawn, UnknownData_6LCV, 0x0036);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAPerParticleSpawn, 0x0038);
		}

		// class UGTAParticleWind : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__GTABase__GTAParticleWind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAParticleWind, WindConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAParticleWind, UnknownData_L4CL, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAParticleWind, 0x0040);
		}

		// class UGTAFixToWaterPlane : public UParticleModuleLocationBase
		TEST_METHOD(Class__GTABase__GTAFixToWaterPlane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFixToWaterPlane, bSpawnOnly, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFixToWaterPlane, UnknownData_YS69, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFixToWaterPlane, WaterPlaneZOffset, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAFixToWaterPlane, 0x0038);
		}

		// class UParticleModuleGTABase : public UParticleModule
		TEST_METHOD(Class__GTABase__ParticleModuleGTABase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleGTABase, 0x0030);
		}

		// class UParticleModuleKillAtOpacity : public UParticleModuleGTABase
		TEST_METHOD(Class__GTABase__ParticleModuleKillAtOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillAtOpacity, KillOpacity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillAtOpacity, MinLifetime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillAtOpacity, 0x0038);
		}

		// class UGTABounceFloor : public UParticleModuleGTABase
		TEST_METHOD(Class__GTABase__GTABounceFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, Acceleration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, ZFloor, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, bDoGameWorldCheck, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, UnknownData_V280, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, EnergyAbsorption, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, StopVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, SpinByVelocity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, AngularBendPerBounce, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTABounceFloor, FallThroughLifetime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTABounceFloor, 0x0050);
		}

		// class UGTAFireTopology : public UParticleModuleGTABase
		TEST_METHOD(Class__GTABase__GTAFireTopology)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, MiddleHeight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, EdgeHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, EdgeDistribution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, bUseTopology, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, UnknownData_63W1, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, Distance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, UnknownData_AVAI, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, ColorDistribution, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, ColorDistributionScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFireTopology, UnknownData_3NF2, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAFireTopology, 0x0098);
		}

		// class UGTAColorScale : public UParticleModuleGTABase
		TEST_METHOD(Class__GTABase__GTAColorScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAColorScale, GTA3_ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAColorScale, VC_ColorScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAColorScale, SA_ColorScale, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAColorScale, 0x0060);
		}

		// class UGTAFollowTerrainVelocity : public UParticleModuleGTABase
		TEST_METHOD(Class__GTABase__GTAFollowTerrainVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFollowTerrainVelocity, CheckDistance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFollowTerrainVelocity, bUseSystemForRoot, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAFollowTerrainVelocity, UnknownData_1N8J, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAFollowTerrainVelocity, 0x0038);
		}

		// class UPathRegion : public UDataAsset
		TEST_METHOD(Class__GTABase__PathRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, RegionIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, NumVehNodes, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, NumPedNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, UnknownData_E9RC, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, CarNodes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, PedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, RadarNodes, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, Links, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathRegion, Adjacents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathRegion, 0x0090);
		}

		// class UGTAPathfindNodes : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAPathfindNodes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPathfindNodes, ImportPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPathfindNodes, MetaData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAPathfindNodes, Regions, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAPathfindNodes, 0x0068);
		}

		// class UCustomInstancedMesh : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__GTABase__CustomInstancedMesh)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomInstancedMesh, 0x0580);
		}

		// class UGTAClothingTable : public UDataAsset
		TEST_METHOD(Class__GTABase__GTAClothingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAClothingTable, ModelTypes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAClothingTable, MaterialTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAClothingTable, 0x0050);
		}

		// class UGTASceneProbeListing : public UDataAsset
		TEST_METHOD(Class__GTABase__GTASceneProbeListing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, UnknownData_7928, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, Experiments, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, Probes_GTA3, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, Probes_VC, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, Probes_SA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, PCProbeSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, SwitchProbeSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, Gen8ProbeSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, Gen9ProbeSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASceneProbeListing, MobileProbeSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASceneProbeListing, 0x00C8);
		}

		// class UGTASingleton : public UObject
		TEST_METHOD(Class__GTABase__GTASingleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, GameSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, UnknownData_6Q7M, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, MobileSFXVolumeMix, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, MobileMusicVolumeMix, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, MobileDialogueVolumeMix, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, GameSettingsClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, CinematicCameraCutThreshold_Velocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, CinematicCameraCutThreshold_RotVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, CinematicCameraCutThreshold_MaxCutFrames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, UnknownData_LKB1, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, ParticleCollection, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, CinematicVehicleBlueprintBase, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, CollisionCollection, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASingleton, GTAReverbPresets, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASingleton, 0x00D8);
		}

		// class UGTASkeletalComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__GTABase__GTASkeletalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalComponent, UnknownData_4DFZ, 0x0EE1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASkeletalComponent, 0x0EF0);
		}

		// class UGTASkeletalUserData : public UAssetUserData
		TEST_METHOD(Class__GTABase__GTASkeletalUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, bHasVertexAO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, UnknownData_F67T, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, VertexAOStrength, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, Variations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, VariationMaterialSlot, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, bUseNextGenVariation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, UnknownData_B0D2, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, NextGenVariationData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, PedHeightOverride, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASkeletalUserData, UnknownData_8029, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASkeletalUserData, 0x0108);
		}

		// class AGTASkidmarks : public AGTAActor
		TEST_METHOD(Class__GTABase__GTASkidmarks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, SkidmarkComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, DefaultSkidmarkMI, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, MuddySkidmarkMI, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, SandySkidmarkMI, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, BloodySkidmarkMI, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, UnknownData_0147, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, PointUpdateInterval, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, UVScale, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, MaxSkidmarks, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, TireBloodLimit, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, PointsUntilReplacement, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTASkidmarks, UnknownData_T8D2, 0x02FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTASkidmarks, 0x0300);
		}

		// class UUI_Menu_Base : public UUI_DesignTimeUserWidget
		TEST_METHOD(Class__GTABase__UI_Menu_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base, Gameterface, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Menu_Base, 0x0298);
		}

		// class UGTASocialClub : public UUI_Menu_Base
		TEST_METHOD(Class__GTABase__GTASocialClub)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASocialClub, 0x0298);
		}

		// class UGTASoundBank : public UDataAsset
		TEST_METHOD(Class__GTABase__GTASoundBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, Sounds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, Durations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, bSaveSoundDurations, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, UnknownData_FI9K, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, RequestedSounds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, BankID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, BankSlotID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, SpecificSoundID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, UnknownData_MCIQ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, LoadedSounds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundBank, UnknownData_F937, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASoundBank, 0x0098);
		}

		// class UGTASoundPak : public UDataAsset
		TEST_METHOD(Class__GTABase__GTASoundPak)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundPak, StartingBankIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundPak, UnknownData_DH22, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTASoundPak, Banks, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTASoundPak, 0x0048);
		}

		// class AGTAStaticMeshActor : public AStaticMeshActor
		TEST_METHOD(Class__GTABase__GTAStaticMeshActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAStaticMeshActor, 0x0230);
		}

		// class UGTAAssetProcessor : public UInterface
		TEST_METHOD(Class__GTABase__GTAAssetProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAAssetProcessor, 0x0028);
		}

		// class AGTAVehicle : public AGTAActor
		TEST_METHOD(Class__GTABase__GTAVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Root, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Mesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, PhysicsMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, StaticFlyingComponents, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, SkeletalFlyingComponents, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, DynMats, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, UnknownData_BR1K, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour1Mats, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour2Mats, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour3Mats, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour4Mats, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour1Postfixes, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour2Postfixes, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour3Postfixes, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, Colour4Postfixes, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, ScheduleDamageUpdate, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, DynamicVolumetricUplightingStrength, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, UnknownData_C9KQ, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, UnknownData_ZBVP, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, DamagedFrames, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, VehicleType, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, UnknownData_2E8I, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, MoveSpeed, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicle, UnknownData_HI4R, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAVehicle, 0x0430);
		}

		// class UGTAVehicleUserData : public UAssetUserData
		TEST_METHOD(Class__GTABase__GTAVehicleUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, WheelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, ReflectionPower, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, MetallicPaint1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, MetallicPaint2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, bHasVertexAO, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, UnknownData_3P6O, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, VertexAOStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, UnknownData_CQXL, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, remapMaterials, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LightOnMIC, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LightOnTailLightsMIC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LightOffMIC, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, TaxiLightOnMIC, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LicensePlateScaling, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LightIndex_LF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LightIndex_RF, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LightIndex_LR, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LightIndex_RR, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, TaxiLightIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, LeftSirenIndex, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, RightSirenIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, OtherSirenIndex, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, WindowsByLOD, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, SectionDamageData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTAVehicleUserData, WindowMIC, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAVehicleUserData, 0x00C8);
		}

		// class AGTAVehicleCinematic : public AGTAVehicle
		TEST_METHOD(Class__GTABase__GTAVehicleCinematic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTAVehicleCinematic, AnimatedMesh, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTAVehicleCinematic, 0x0438);
		}

		// class UUVImage : public UImage
		TEST_METHOD(Class__GTABase__UVImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVImage, UVs, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVImage, UnknownData_UEBX, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVImage, 0x0228);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_BI3B, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_AB3U, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_VTB8, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_4UPO, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, Properties, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_A181, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_BSAY, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_C0A0, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_RKH8, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_3RF7, 0x02E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_NTSB, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_B3P7, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x0318);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_OIQR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_FOFS, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UUI_OptionsList_Base_C : public UUI_ScrollingSlotList_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_OptionsList_Base__UI_OptionsList_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Base_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Base_C, OptionList, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Base_C, CurrentGameType, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Base_C, LastInputType, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Base_C, UsesResetToDefault, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Base_C, UnknownData_2DD0, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_Base_C, SlotButtonFunctionNames, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_OptionsList_Base_C, 0x0530);
		}

		// class UUI_HUDItem_FullScreenText_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_FullScreenText__UI_HUDItem_FullScreenText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_FullScreenText_C, UnknownData_BQZM, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_FullScreenText_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_FullScreenText_C, OriginalAnchorPos, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_FullScreenText_C, 0x02E8);
		}

		// class ABP_Explosion_Base_C : public AGTAExplosion
		TEST_METHOD(BlueprintGeneratedClass__BP_Explosion_Base__BP_Explosion_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Explosion_Base_C, 0x0288);
		}

		// class USpawnExplosion_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__SpawnExplosion__SpawnExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnExplosion_C, 0x0028);
		}

		// class ABP_DecalHelper_Base_C : public AGTADecalHelper
		TEST_METHOD(BlueprintGeneratedClass__BP_DecalHelper_Base__BP_DecalHelper_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DecalHelper_Base_C, 0x0288);
		}

		// class UBPF_ConstructScalability_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BPF_ConstructScalability__BPF_ConstructScalability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPF_ConstructScalability_C, 0x0028);
		}

		// class ABP_Ropes_Base_C : public AGTARopes
		TEST_METHOD(BlueprintGeneratedClass__BP_Ropes_Base__BP_Ropes_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Ropes_Base_C, 0x02D0);
		}

		// class ABP_Skidmarks_Base_C : public AGTASkidmarks
		TEST_METHOD(BlueprintGeneratedClass__BP_Skidmarks_Base__BP_Skidmarks_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skidmarks_Base_C, 0x0300);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_R54Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_0DSU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_Y72C, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// class ULayersBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ActorLayerUtilities__LayersBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayersBlueprintLibrary, 0x0028);
		}

		// class ABP_Marker_Base_C : public AGTAMarkerActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Marker_Base__BP_Marker_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, Mesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, DefaultSceneRoot, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, RotationSpeed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, UnknownData_I7AV, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, DynamicMaterial, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, StoredMeshHeight, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, AxisOfRotation, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Base_C, EmissiveScale, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Marker_Base_C, 0x02DC);
		}

		// class UCreditsTransition_GTA3_C : public UCreditsTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditsTransition_gta3__CreditsTransition_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_GTA3_C, UberGraphFrame, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsTransition_GTA3_C, 0x0438);
		}

		// class UUI_HUDItem_Timer_GTA3_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_Timer_GTA3__UI_HUDItem_Timer_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, UnknownData_RSYP, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, LeftFillPanel, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, MainCanvas, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, RichText, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, RichText2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, RightFillPanel, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, TextScaleBox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, TextScaleBox_2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, OverrideTextStyleSet, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, ExtraItem, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, ExtraText, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, DefaultFont, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, TestString, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, TextAlignment, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, UnknownData_I8DT, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Timer_GTA3_C, TestString2, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_Timer_GTA3_C, 0x03B8);
		}

		// class ABP_COL_Prop_C : public AGTACustomEntitySM
		TEST_METHOD(BlueprintGeneratedClass__BP_COL_Prop__BP_COL_Prop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_COL_Prop_C, UberGraphFrame, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_COL_Prop_C, 0x02E0);
		}

		// class UDefaults_Mobile_IOS_C : public UDefaults_Mobile_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Mobile_IOS__Defaults_Mobile_IOS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Mobile_IOS_C, 0x0148);
		}

		// class UDefaults_Mobile_Android_C : public UDefaults_Mobile_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Mobile_Android__Defaults_Mobile_Android_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Mobile_Android_C, 0x0148);
		}

		// class UDefaults_Editor_C : public UDefaults_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Editor__Defaults_Editor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Editor_C, 0x0148);
		}

		// class UDefaults_Console_XBoxSeries_C : public UDefaults_Console_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_XBoxSeries__Defaults_Console_XBoxSeries_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_XBoxSeries_C, 0x0148);
		}

		// class UDefaults_Console_C : public UDefaults_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console__Defaults_Console_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_C, 0x0148);
		}

		// class UPriorityHUDDrawer_GTA3_C : public UHUDDrawer_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__PriorityHUDDrawer_GTA3__PriorityHUDDrawer_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPriorityHUDDrawer_GTA3_C, UberGraphFrame, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPriorityHUDDrawer_GTA3_C, 0x0390);
		}

		// class UUI_Button_AccountPicker_C : public UMenuHelpText_Template_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_AccountPicker__UI_Button_AccountPicker_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_AccountPicker_C, 0x0378);
		}

		// class UUI_HUDItem_TitleText_Timer_GTA3_C : public UUI_HUDItem_TitleText_Timer_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_TitleText_Timer_GTA3__UI_HUDItem_TitleText_Timer_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_TitleText_Timer_GTA3_C, 0x03A8);
		}

		// class UUI_HUDItem_Busted_GTA3_C : public UUI_HUDItem_FullScreenText_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_Busted_GTA3__UI_HUDItem_Busted_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Busted_GTA3_C, UberGraphFrame, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Busted_GTA3_C, Image_375, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Busted_GTA3_C, RichText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Busted_GTA3_C, TextScaleBox, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_Busted_GTA3_C, 0x0308);
		}

		// class UUI_HUD_WeaponWheel_GTA3_C : public UUI_HUD_WeaponWheel_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_WeaponWheel_GTA3__UI_HUD_WeaponWheel_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_GTA3_C, UnknownData_OYMO, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_WeaponWheel_GTA3_C, UberGraphFrame, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_WeaponWheel_GTA3_C, 0x0568);
		}

		// class ABP_Marker_Hoop_C : public ABP_Marker_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Marker_Hoop__BP_Marker_Hoop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Hoop_C, UnknownData_QGEA, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Marker_Hoop_C, UberGraphFrame, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Marker_Hoop_C, 0x02E8);
		}

		// class UBP_TextComponentBase_C : public UText3DComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_TextComponentBase__BP_TextComponentBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TextComponentBase_C, 0x02E0);
		}

		// class ABP_BloodyFootprint_Base_C : public AGTABloodyFootprints
		TEST_METHOD(BlueprintGeneratedClass__BP_BloodyFootprint_Base__BP_BloodyFootprint_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodyFootprint_Base_C, UberGraphFrame, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodyFootprint_Base_C, FadeTime, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodyFootprint_Base_C, UnknownData_F7C2, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodyFootprint_Base_C, DynMaterial, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BloodyFootprint_Base_C, 0x0318);
		}

		// class UBP_GTA3Interface_C : public UGTA3Interface
		TEST_METHOD(BlueprintGeneratedClass__BP_GTA3Interface__BP_GTA3Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GTA3Interface_C, 0x0780);
		}

		// class ULegalScreen_Stinger_GTA3_C : public ULegalScreen_Stinger_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegalScreen_Stinger_GTA3__LegalScreen_Stinger_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_GTA3_C, UberGraphFrame, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegalScreen_Stinger_GTA3_C, 0x0308);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_K7LI, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_ZANF, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_USVC, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, OnVisibilityChanged, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_AULW, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationTickManager, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_L2GC, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_IO8J, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_XUT2, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0260);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_N3GU, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_OTSE, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextTransformPolicy, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_10T6, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_TC0W, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0678);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_KDNW, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_QBW0, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_CV9L, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_G0ZB, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_8W3S, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_QTEN, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_OTPC, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_2RUV, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_A1JY, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_495E, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_09C8, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_ABQ8, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_1WTI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_1TC2, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_ARMW, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_9OII, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_IHDD, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_0UPL, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_AWVW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_N3OR, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_LSKW, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_8PIA, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_G56P, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, ClickMethod, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, TouchMethod, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, PressMethod, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x074B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_DTUA, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_0KC7, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_ZRMK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_5J8W, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_XR1V, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_3EMJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_FSKE, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_3OYS, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_MB3H, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_XNTC, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_L5UI, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0E00);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_8WA6, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_K7JM, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_W4ED, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_TDAF, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_BG0I, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, RadialBoxSettings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_DSZY, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01D8);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01E0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_KNZE, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_CJZO, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_7LQW, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_MLTW, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_O7W6, 0x0A06);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_99QM, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_JCQ9, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_FWNP, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_YMG5, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_DRSY, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_T6BH, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_GFQ0, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_C07Q, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_8FT8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_AJUF, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_WEL9, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_00W0, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0700);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_ISH8, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_69ZI, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_KAU1, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_3PZW, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_SRYX, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_5K58, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_6WQ6, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_Q35U, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetUserMenuContentEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_6XOP, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_LIVN, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0170);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__UMG__MovieScene2DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_GPYT, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_CKUA, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x00A8);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginTrack, UnknownData_PASS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x00B0);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, UnknownData_4Z7H, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x00A8);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_58BF, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_BXJN, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_WW4E, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0470);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_OAPC, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_0D4G, 0x0C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C98);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_P86I, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_I4N3, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_EQ74, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_NAY2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_QXMB, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_UHP2, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_HGCT, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, bRetainRender, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_3ISK, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_OREW, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_Y5LQ, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_F50Y, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_2FRT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_9ER0, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_Q7FF, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_DQ21, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_OV6I, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_RBGS, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_DP4Q, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_MJZJ, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_NNK2, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_A7A8, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_ZDMM, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_DPAV, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_ZMLU, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_NGE8, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_ZFD2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_FP57, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_1KNO, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_QKAJ, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_PQJP, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_LH4D, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_QDI6, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_9G56, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_N6EU, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_KAQY, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_NMYB, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_2A42, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_1U4R, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_IWIY, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_2QH8, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0520);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_V9BW, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextTransformPolicy, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_HQAD, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A8);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_51VU, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_QEB0, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_WX4H, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_KCG6, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_9P3Z, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_GMYA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_M16J, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, RootTemplateInstance, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_QG54, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0578);
		}

		// class UUMGSequenceTickManager : public UObject
		TEST_METHOD(Class__UMG__UMGSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, WeakUserWidgets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, Linker, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, UnknownData_CUVW, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequenceTickManager, 0x0120);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_6RSA, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_C3W5, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_06N9, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_MIWO, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_OQV3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_G0IQ, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_ZKGF, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_8OID, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0090);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_APZE, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_RS0H, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0368);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Space, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TimingPolicy, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_8C2N, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_PV3X, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_S85U, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_FMKY, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x04AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x04AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_91UX, 0x04DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_ZTBK, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_DZH0, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickMode, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_DABX, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_9RNX, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x05A0);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_REL9, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_IA73, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_CXN7, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugSphereLineThickness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugLineThickness, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_HWNH, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_KCCG, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_AFES, 0x03F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0400);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_SFI8, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_L9PY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_R9NX, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_3HON, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_XG45, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapSize, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, Orientation, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_S7UK, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0148);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_B4A9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_N5N0, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_CMPB, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_JMUW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class UDefaults_PC_C : public UDefaults_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_PC__Defaults_PC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_PC_C, 0x0148);
		}

		// class UDefaults_Base_C : public UDefaultGameterSettings_Rules
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Base__Defaults_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Base_C, 0x0148);
		}

		// class UDefaults_Console_XBoxOneX_C : public UDefaults_Console_XBoxOne_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_XBoxOneX__Defaults_Console_XBoxOneX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_XBoxOneX_C, 0x0148);
		}

		// class UDefaults_Console_XBoxOne_C : public UDefaults_Console_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_XBoxOne__Defaults_Console_XBoxOne_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_XBoxOne_C, 0x0148);
		}

		// class UUI_HUDItem_Text_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_Text__UI_HUDItem_Text_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, UnknownData_5EUS, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, Background, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, HorizontalBox_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, MainCanvas, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, ScalableTextBox, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, OverrideTextStyleSet, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, ExtraItem, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, ExtraText, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, OriginalHorizontalBoxMargin, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, TextIsScaled, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, UnknownData_90W5, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, LastScaledText, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, LastScaledText_1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, frameWaitForText, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, framesWaitedForText, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, TextStartedFrames, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, UnknownData_KKAX, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Text_C, ScaledExtraText, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_Text_C, 0x0370);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_SZ5N, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class URageUnrealInterface : public UObject
		TEST_METHOD(Class__rageunreal__RageUnrealInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URageUnrealInterface, 0x0028);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_UTWQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_OZL1, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UUI_HUD_MappingImage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_MappingImage__UI_HUD_MappingImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_MappingImage_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_MappingImage_C, HelpIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_MappingImage_C, HelpMappingCanvas, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_MappingImage_C, 0x0278);
		}

		// class UBI_LightingSubLevel_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BI_LightingSubLevel__BI_LightingSubLevel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBI_LightingSubLevel_C, 0x0028);
		}

		// class UTransition_LoadingTemplate_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_LoadingTemplate__Transition_LoadingTemplate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, UnknownData_6C0K, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, BlockingButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, FadeIn1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, FadeIn2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, FinalFadeIn, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, Image1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, Image1_5, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, LoadingBackground_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, LoadingImage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, ProgressBarContainer, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, RandomImages, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, StartingColor, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, ProgressBarClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, DidImageLoad, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, UnknownData_XSE6, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_LoadingTemplate_C, TimeLoading, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_LoadingTemplate_C, 0x0360);
		}

		// class UConfirmationDialog_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ConfirmationDialog__ConfirmationDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, Background, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, BackgroundWidgetCanvas, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, Buttons, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, CancelButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, ConfirmButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, Content, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, ContentScaleBox, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, MainText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, TransparentPaddingLeft, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, TransparentPaddingRight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, ConfirmationCallback, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, MenuStyle, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, ConfirmationStyle, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, LastUserSelectedWidget, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, IsOkDialog, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, IsCancelRemoved, 0x0C41);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, isButtonlessWindow, 0x0C42);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, IsConfirmDefault, 0x0C43);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, IsAutomaticallyGrabbingFocus, 0x0C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_C, IsFirstTick, 0x0C45);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConfirmationDialog_C, 0x0C46);
		}

		// class UGraphicsOptions_C : public UUI_OptionsList_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__GraphicsOptions__GraphicsOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphicsOptions_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphicsOptions_C, 0x0538);
		}

		// class UUI_Menu_Base_BP_C : public UUI_Menu_Base
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Menu_Base_BP__UI_Menu_Base_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, MenuTemplate, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, MenuButtons, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, Selector, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, MenuButtonOffset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, CurrentSaveTabState, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, UnknownData_JQDA, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, CurrentSaveIndexSelected, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, UnknownData_ZNVC, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, LastUserSelectedWidget, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, LogoWidget, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, VersionWidget, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, WasJustUsingController, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, LastInputTypeWasController, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, ShouldShowSaveTab, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, BuildOnConstruct, 0x0303);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, DidConstruct, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, UnknownData_98OA, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, PlayInteractSound, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, PlayHoverSound, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, KeyListeningDialog, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, DelayedGameLaunchSaveSlot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, DoingDelayedGameLaunch, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, DoingDelayedExit, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, TransitionHasFocus, 0x0366);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, SaveTabState, 0x0367);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, DidAttemptConfirmOption, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, IsShowingConfirmation, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, UnknownData_V0WV, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, CurrentRadioSound, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, CurrentRadioCue, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, BrowserConfirmationDialog, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, LastLeftButtonSelected, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, UnknownData_MF6V, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, WidgetBlockingInput, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, IsMissionRetry, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, SkipNextHoverSound, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, IsResuming, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, UnknownData_71A4, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, CurrentDialogSound, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, CurrentSFXSound, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, CreatedBackgroundWidget, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, TimeSinceBlocking, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, DelayBeforeAllowingResumeButton, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Menu_Base_BP_C, HasLoggedIn, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Menu_Base_BP_C, 0x03F1);
		}

		// class ABP_ChalkOutline_C : public AGTAActor
		TEST_METHOD(BlueprintGeneratedClass__BP_ChalkOutline__BP_ChalkOutline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, UberGraphFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, Outline, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, DefaultSceneRoot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, OutlineMaterials, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, AliveTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, UnknownData_0YRD, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, DynMat, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, FadeTime, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, DeleteTime, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ChalkOutline_C, Alpha, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ChalkOutline_C, 0x02E4);
		}

		// class UUI_SlotButton_Selection_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_Selection__UI_SlotButton_Selection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, UberGraphFrame, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, BackButton, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, BackImage, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, ForwardButton, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, ForwardImage, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, Image, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, MainSizeBox, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, OptionNameText, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, SelectionText, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, SlotButton, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, SelectionNames, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, SelectedElement, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, UnknownData_BEIH, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, BoolSelection, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, ArrowBrush, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, ShouldArrowColorMatchText, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, UnknownData_KAS2, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, ArrowColorOverride, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, IgnoreSettings, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, IsBackButtonSelected, 0x06ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Selection_C, IsForwardButtonSelected, 0x06EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_Selection_C, 0x06EF);
		}

		// class ABP_Marker_Diamond_3_C : public ABP_Marker_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Marker_Diamond_4__BP_Marker_Diamond_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Marker_Diamond_3_C, 0x02DC);
		}

		// class UUI_HUDItem_TitleText_Radio_GTA3_C : public UUI_HUDItem_TitleText_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_TitleText_Radio_GTA3__UI_HUDItem_TitleText_Radio_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_TitleText_Radio_GTA3_C, 0x0379);
		}

		// class UUI_ConfirmationDialog_Controller_GTA3_C : public UUI_ConfirmationDialog_Controller_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ConfirmationDialog_Controller_GTA3__UI_ConfirmationDialog_Controller_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmationDialog_Controller_GTA3_C, UberGraphFrame, 0x0C58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ConfirmationDialog_Controller_GTA3_C, 0x0C60);
		}

		// class ABP_ExteriorPostProcess_C : public AGTAPostProcessVolume
		TEST_METHOD(BlueprintGeneratedClass__BP_ExteriorPostProcess__BP_ExteriorPostProcess_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ExteriorPostProcess_C, UberGraphFrame, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ExteriorPostProcess_C, SkyBox, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ExteriorPostProcess_C, 0x08A0);
		}

		// class ABP_Tree_All_C : public AIPLMapActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Tree_All__BP_Tree_All_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tree_All_C, UberGraphFrame, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tree_All_C, 0x02C8);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_VXSH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_QFVD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_DHEN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_K1LL, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_3OXR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_ZSL0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_NY13, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_TT99, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_44HF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_F59J, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_NENG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_4RRY, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_152Z, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_OUMO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_4TM4, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_Q7PQ, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_XUH5, 0x1B44);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1B90);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_GKYH, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_PP0F, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_5K2X, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_0OHN, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_T647, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_AMPI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_8POK, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_70LK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_LE42, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_O8C5, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_07TS, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_YSLD, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_TVHH, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_JIPN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_39MZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_14GO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_PB76, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_8B8H, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_LS84, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_T85K, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_GXW8, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_00E5, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_OK4V, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_BXI9, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_313V, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_SLLH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_CFVQ, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_PKJV, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_75HF, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_NIZ1, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_D3MY, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_1S72, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_8EIG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_WFK9, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0720);
		}

		// class UPropertyAccess : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyAccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyAccess, 0x0028);
		}

		// class UPropertyEventBroadcaster : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventBroadcaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventBroadcaster, 0x0028);
		}

		// class UPropertyEventSubscriber : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventSubscriber)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventSubscriber, 0x0028);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_ANB3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_DQI4, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_2WFY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_D0O4, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaTimeStampInfo : public UObject
		TEST_METHOD(Class__MediaAssets__MediaTimeStampInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, Time, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, SequenceIndex, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTimeStampInfo, 0x0038);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_U11B, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_VH2L, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_UED0, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_0JE4, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_44WT, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_6TCE, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_F5IE, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_8XX8, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_OETG, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08E0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_UMF8, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NewStyleOutput, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, OutputFormat, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentAspectRatio, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentOrientation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_A0KZ, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_VUVT, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x01B0);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_BS2P, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UAnimSequenceLevelSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__AnimSequenceLevelSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, SkelTrackGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, PathToLevelSequence, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceLevelSequenceLink, 0x0050);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_O1DC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_7B37, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, UnknownData_6ZV4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, AssetUserData, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x01C8);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_XND0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_FWOD, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_2FSJ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_0WME, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_J923, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_CXYT, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02A0);
		}

		// class ULevelSequenceAnimSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__LevelSequenceAnimSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceAnimSequenceLink, AnimSequenceLinks, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceAnimSequenceLink, 0x0038);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0320);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_MCRM, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0798);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_JONL, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_V1TF, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_CCJE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x07B8);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_6VO8, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class UUI_ConfirmationDialog_Controller_C : public UUI_ConfirmationDialog_FullScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ConfirmationDialog_Controller__UI_ConfirmationDialog_Controller_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmationDialog_Controller_C, UberGraphFrame, 0x0C50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ConfirmationDialog_Controller_C, 0x0C58);
		}

		// class UUI_HUDItem_PlayerInfo_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_PlayerInfo__UI_HUDItem_PlayerInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, UnknownData_YN6B, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, WantedStars, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, IsBlinking, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, UnknownData_OR3Q, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, TimeSinceBlink, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, LastWantedLevel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, LastParoleLevel, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, WantedStarColorOff, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, WantedStarColorOn, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, WantedStarColorParole, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, WantedStarBlinkOnTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, WantedStarBlinkOffTime, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, DoStarsStayOn, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, UnknownData_RF5Q, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, MoneyTextColor, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_PlayerInfo_C, IsMoneyOnlyMode, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_PlayerInfo_C, 0x038D);
		}

		// class UConfirmationDialog_GTA3_C : public UConfirmationDialog_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ConfirmationDialog_GTA3__ConfirmationDialog_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_GTA3_C, UnknownData_5MXC, 0x0C46);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialog_GTA3_C, UberGraphFrame, 0x0C48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConfirmationDialog_GTA3_C, 0x0C50);
		}

		// class ULightningPreset_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__LightningPreset__LightningPreset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, PositionMin, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, PositionMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, RadiusMinMax, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, IntensityMinMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, Clouds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, Scattering, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, SkyLight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, DelayMinMax, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightningPreset_C, 0x006C);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class UUI_MainMenu_C : public UUI_Menu_Base_BP_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MainMenu__UI_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, UnknownData_2WXG, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, UberGraphFrame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, AcceptOptionsChangesHelp, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, BackgroundContainer, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, FillerImage_4, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, HelpContextBottomBox, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, HelpContextItems, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, HolderCanvas, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, LeftPanels, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, LoginInfo, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, LogoImage, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, MainCanvas, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, MenuButtonPanel, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, SCSignIn, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, SCSignUp, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, SCUnlink, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, SelectorWidget, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, UI_Button_AccountPicker, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, VersionTextBox, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu_C, ForceNoLegal, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MainMenu_C, 0x0489);
		}

		// class UUI_SocialClub_C : public UGTASocialClub
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SocialClub__UI_SocialClub_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, Background, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, BackgroundCanvas, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, FillerImage_4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, HelpContextBottomBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, SCSignIn, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, SCSignUp, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, SCUnlink, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, WidgetSelector, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, Tabs, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, MenuTemplate, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, DidConstruct, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_C, HasTemplate, 0x02F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SocialClub_C, 0x02FA);
		}

		// class UTransition_News_GTA3_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_News_GTA3__Transition_News_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, UnknownData_4NGN, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, BG, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, BlockingButton, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, FadeIn1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, Image1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, MainCanvas, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, MainScaleBox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, MainSizeBox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, ScalableTextBox, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, RandomImages, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_News_GTA3_C, StartingColor, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_News_GTA3_C, 0x0348);
		}

		// class UGTALegalImageDecorator_C : public URichTextBlockImageDecorator
		TEST_METHOD(BlueprintGeneratedClass__GTALegalImageDecorator__GTALegalImageDecorator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTALegalImageDecorator_C, 0x0030);
		}

		// class ABP_Vehicle_Cinematic_Base_C : public AGTAVehicleCinematic
		TEST_METHOD(BlueprintGeneratedClass__BP_Vehicle_Cinematic_Base__BP_Vehicle_Cinematic_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, HeadLeft, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, TailLeft, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, HeadRight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, TailRight, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, HeadlightLeftMat, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, HeadlightRightMat, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, TaillightLeftMat, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, TaillightRightMat, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, IsScorched, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, IsDecalMode, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, UnknownData_O1O8, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, Plates, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, PointLightClass, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, SpecialLights, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, LeftSirenMat, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, RightSirenMat, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, OtherSirenMat, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, Reflect, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, UnknownData_C2RO, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Vehicle_Cinematic_Base_C, TimeOfLastBreak, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Vehicle_Cinematic_Base_C, 0x04B4);
		}

		// class UDefaults_Console_XBoxSeriesX_C : public UDefaults_Console_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_XBoxSeriesX__Defaults_Console_XBoxSeriesX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_XBoxSeriesX_C, 0x0148);
		}

		// class UDefaults_Console_PS5_C : public UDefaults_Console_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_PS5__Defaults_Console_PS5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_PS5_C, 0x0148);
		}

		// class UDefaults_Console_PS4_Pro_C : public UDefaults_Console_PS4_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_PS4_Pro__Defaults_Console_PS4_Pro_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_PS4_Pro_C, 0x0148);
		}

		// class UBP_VehicleLight_Dome_C : public USpotLightComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_VehicleLight_Dome__BP_VehicleLight_Dome_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VehicleLight_Dome_C, 0x0370);
		}

		// class UMenuHelpText_Template_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MenuHelpText_Template__MenuHelpText_Template_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, ButtonImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, HorizontalBox_62, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, ImageScaleBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, InnerImageScaleBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, MainButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, Text, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, TextValue, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, CanPressButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, UnknownData_NQY6, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, InternalPadding, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, ImageMargin, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, UnknownData_NG7O, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, TextFont, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, ShadowOffset, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuHelpText_Template_C, ShadowColor, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuHelpText_Template_C, 0x0378);
		}

		// class UUI_HUDItem_TitleText_Mission_GTA3_C : public UUI_HUDItem_TitleText_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_TitleText_Mission_GTA3__UI_HUDItem_TitleText_Mission_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Mission_GTA3_C, UnknownData_9Q5Z, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_Mission_GTA3_C, UberGraphFrame, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_TitleText_Mission_GTA3_C, 0x0388);
		}

		// class ABP_GameScalability_PC_C : public ABP_GameScalability_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GameScalability_PC__BP_GameScalability_PC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GameScalability_PC_C, 0x03D4);
		}

		// class ABP_GameScalability_Mobile_C : public ABP_GameScalability_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GameScalability_Mobile__BP_GameScalability_Mobile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GameScalability_Mobile_C, 0x03D4);
		}

		// class AARActor : public AActor
		TEST_METHOD(Class__AugmentedReality__ARActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARActor, 0x0220);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_9FB3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_BQ1H, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_E3NM, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_CABA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_826H, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_E3TF, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_1R3Z, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_W2W3, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00F8);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_OBIW, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_KE4O, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LeftEyeTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, RightEyeTransform, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01F0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_QKHJ, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0110);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x0100);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, TrackedPose, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_A1UM, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0150);
		}

		// class UARMeshGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARMeshGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshGeometry, UnknownData_RYIX, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshGeometry, 0x0100);
		}

		// class UARGeoAnchor : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_6P80, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_TNVB, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchor, 0x0110);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_9WQU, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_29N2, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class UARComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, NativeID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_GINU, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, bUseDefaultReplication, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_DDKM, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultMeshMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultWireframeMeshMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MRMeshComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MyTrackedGeometry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_DELC, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARComponent, 0x0280);
		}

		// class UARPlaneComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPlaneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneComponent, 0x0300);
		}

		// class UARPointComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPointComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPointComponent, 0x0280);
		}

		// class UARFaceComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARFaceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, ReplicatedPayload, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, UnknownData_VIVY, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceComponent, 0x02E0);
		}

		// class UARImageComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARImageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARImageComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARImageComponent, 0x02E0);
		}

		// class UARQRCodeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARQRCodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARQRCodeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARQRCodeComponent, 0x02F0);
		}

		// class UARPoseComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPoseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPoseComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPoseComponent, 0x02C0);
		}

		// class UAREnvironmentProbeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__AREnvironmentProbeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentProbeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentProbeComponent, 0x02B0);
		}

		// class UARObjectComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARObjectComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARObjectComponent, 0x02B0);
		}

		// class UARMeshComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshComponent, 0x02E0);
		}

		// class UARGeoAnchorComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchorComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchorComponent, 0x02F0);
		}

		// class UARDependencyHandler : public UObject
		TEST_METHOD(Class__AugmentedReality__ARDependencyHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARDependencyHandler, 0x0028);
		}

		// class UARGeoTrackingSupport : public UObject
		TEST_METHOD(Class__AugmentedReality__ARGeoTrackingSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoTrackingSupport, 0x0028);
		}

		// class UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, UnknownData_JR60, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UGetGeoLocationAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__GetGeoLocationAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, UnknownData_W7SF, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGeoLocationAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UARLifeCycleComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARLifeCycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorSpawnedDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorToBeDestroyedDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, UnknownData_4Q2M, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLifeCycleComponent, 0x0230);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_0W1G, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_NQS4, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_X7UI, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseSceneDepthForOcclusion, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseAutomaticImageScaleEstimation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseStandardOnboardingUX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_9NO5, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_3QZW, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseOptimalVideoFormat, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_UOI9, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumberOfTrackedFaces, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_4U8Z, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SceneReconstructionMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_TLEO, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneComponentClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PointComponentClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceComponentClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ImageComponentClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, QRCodeComponentClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PoseComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentProbeComponentClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ObjectComponentClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MeshComponentClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, GeoAnchorComponentClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultMeshMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultWireframeMeshMaterial, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x0110);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_4NIG, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_WENO, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_LUZ7, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0578);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_QXMC, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_DC3Q, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00F8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00F8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_1XMB, 0x00FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x0100);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_8NSM, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0150);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_TELP, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_B4QD, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, BoundaryPolygon, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0130);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_2M2Y, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x0100);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x0108);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_T642, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0120);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_INP9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_OVU5, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_9IUY, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationFieldGuid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationField, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0078);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0078);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_1IQT, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_W309, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_4Q7D, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_SQ0I, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, CompiledData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, SequenceFlags, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_100X, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0060);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_1RIM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_LV7Q, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_C4WF, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationSubFrames, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_37DN, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_QS16, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, TickManager, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_D99G, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0680);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieSceneEntityProvider : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEntityProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityProvider, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieSceneTrackTemplateProducer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneTrackTemplateProducer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackTemplateProducer, 0x0028);
		}

		// class UNodeAndChannelMappings : public UInterface
		TEST_METHOD(Class__MovieScene__NodeAndChannelMappings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeAndChannelMappings, 0x0028);
		}

		// class UMovieSceneNodeGroup : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroup)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroup, 0x0028);
		}

		// class UMovieSceneNodeGroupCollection : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroupCollection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroupCollection, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_OSNV, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_M2G1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneEntitySystem : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, Linker, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, UnknownData_LRPN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystem, 0x0040);
		}

		// class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBlenderSystem, UnknownData_6X0X, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBlenderSystem, 0x0060);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_V9A2, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEntityInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityInstantiatorSystem, 0x0040);
		}

		// class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneGenericBoundObjectInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGenericBoundObjectInstantiator, 0x0040);
		}

		// class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneBoundSceneComponentInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoundSceneComponentInstantiator, 0x0040);
		}

		// class UMovieSceneSceneComponentImpersonator : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneSceneComponentImpersonator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSceneComponentImpersonator, 0x0028);
		}

		// class UMovieSceneCompiledData : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EvaluationTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, Hierarchy, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EntityComponentField, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, TrackTemplateField, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, DeterminismFences, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompiledSignature, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompilerVersion, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedMask, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AllocatedMask, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedFlags, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, UnknownData_27DU, 0x03F3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledData, 0x03F8);
		}

		// class UMovieSceneCompiledDataManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledDataManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_C6PC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, Hierarchies, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplates, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplateFields, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, EntityComponentFields, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_GL4T, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledDataManager, 0x0230);
		}

		// class UMovieSceneFloatDecomposer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneFloatDecomposer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatDecomposer, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_IZ01, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_2695, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_UD8J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneEntitySystemLinker : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystemLinker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_BZGI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, SystemGraph, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_QBVR, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystemLinker, 0x0458);
		}

		// class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEvalTimeSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEvalTimeSystem, UnknownData_9VXF, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEvalTimeSystem, 0x0050);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_3W2O, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneMasterInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMasterInstantiatorSystem, 0x0040);
		}

		// class UMovieScenePreAnimatedStateSystemInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePreAnimatedStateSystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedStateSystemInterface, 0x0028);
		}

		// class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneCachePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCachePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneRestorePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneRestorePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneSequenceTickManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, SequenceActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, UnknownData_JGSR, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequenceTickManager, 0x00D0);
		}

		// class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnablesSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnablesSystem, 0x0040);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnSection, UnknownData_ZKQ5, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0188);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0098);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_DPW3, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0088);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_7609, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_IB6C, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0098);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0068);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0098);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneTrackInstance : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, AnimatedObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, bIsMasterTrackInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, UnknownData_5NCW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstance, 0x0050);
		}

		// class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceInstantiator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceInstantiator, UnknownData_DZDB, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceInstantiator, 0x00F0);
		}

		// class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceSystem, Instantiator, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceSystem, 0x0048);
		}

		// class AGroomActor : public AActor
		TEST_METHOD(Class__HairStrandsCore__GroomActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGroomActor, GroomComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGroomActor, 0x0228);
		}

		// class UGroomAsset : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_KWMM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsRendering, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsPhysics, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsInterpolation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsLOD, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsCards, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsMeshes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsMaterials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_PF97, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, EnableGlobalInterpolation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairInterpolationType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, LODSelectionType, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_8OGP, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, MinLOD, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, DisableBelowMinLodStripping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_IVYZ, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, EffectiveLODBias, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, AssetUserData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_0ROS, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomAsset, 0x00F8);
		}

		// class UGroomAssetImportData : public UAssetImportData
		TEST_METHOD(Class__HairStrandsCore__GroomAssetImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAssetImportData, ImportOptions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomAssetImportData, 0x0030);
		}

		// class UGroomBindingAsset : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomBindingAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, Groom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, SourceSkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, TargetSkeletalMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, NumInterpolationPoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, MatchingSection, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, GroupInfos, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, UnknownData_R4WU, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomBindingAsset, 0x00A0);
		}

		// class UGroomBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HairStrandsCore__GroomBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomBlueprintLibrary, 0x0028);
		}

		// class UGroomComponent : public UMeshComponent
		TEST_METHOD(Class__HairStrandsCore__GroomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_CXIK, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, GroomAsset, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, NiagaraComponents, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, SourceSkeletalMesh, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, BindingAsset, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, PhysicsAsset, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Strands_DebugMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Strands_DefaultMaterial, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Cards_DefaultMaterial, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Meshes_DefaultMaterial, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, AngularSpringsSystem, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, CosseratRodsSystem, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, AttachmentName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_187D, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, GroomGroupsDesc, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_RCM7, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomComponent, 0x0580);
		}

		// class UGroomCreateBindingOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateBindingOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, SourceSkeletalMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, TargetSkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, NumInterpolationPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, MatchingSection, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateBindingOptions, 0x0040);
		}

		// class UGroomCreateFollicleMaskOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateFollicleMaskOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, Resolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, RootRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, Grooms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateFollicleMaskOptions, 0x0040);
		}

		// class UGroomCreateStrandsTexturesOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateStrandsTexturesOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, Resolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, TraceType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_Q4JS, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, TraceDistance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, MeshType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_9ZIW, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, StaticMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, SkeletalMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, LodIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, SectionIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UVChannelIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_UJ9D, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, GroupIndex, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateStrandsTexturesOptions, 0x0068);
		}

		// class UGroomImportOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomImportOptions, ConversionSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomImportOptions, InterpolationSettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomImportOptions, 0x0050);
		}

		// class UGroomHairGroupsPreview : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomHairGroupsPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomHairGroupsPreview, Groups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomHairGroupsPreview, 0x0038);
		}

		// class UNiagaraDataInterfaceHairStrands : public UNiagaraDataInterface
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfaceHairStrands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, DefaultSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, UnknownData_0569, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceHairStrands, 0x0050);
		}

		// class UNiagaraDataInterfacePhysicsAsset : public UNiagaraDataInterface
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfacePhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, DefaultSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, UnknownData_UCGT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePhysicsAsset, 0x0068);
		}

		// class UNiagaraDataInterfaceVelocityGrid : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfaceVelocityGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVelocityGrid, GridSize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVelocityGrid, UnknownData_60L7, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVelocityGrid, 0x00E8);
		}

		// class UNiagaraDataInterfacePressureGrid : public UNiagaraDataInterfaceVelocityGrid
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfacePressureGrid)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePressureGrid, 0x00E8);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class ABP_Radar_GTA3_C : public ABP_Radar_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Radar_GTA3__BP_Radar_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, UberGraphFrame, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, MaxSpot, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, MinSpot, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_Ocean, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_4_5, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_4_4, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_4_3, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_4_2, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_3_5, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_3_4, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_3_3, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_3_2, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_2_5, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_2_4, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_2_3, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_2_2, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_1_5, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_1_4, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_1_3, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_GTA3_C, SM_Radar_1_2, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Radar_GTA3_C, 0x0728);
		}

		// class UUI_LegalStartup_Base_C : public UMacrosForDesignTimeUserWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_LegalStartup_Base__UI_LegalStartup_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, Background, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, FillerImage_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, HelpContextBottomBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, HelpContextItems, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, MainCanvas, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, SkipButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, SkipHelp, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, ScreensToCycle, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, TexturesToCycle, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, ScreenTime, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, CurrentScreenNum, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, UnknownData_R9K9, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, ActiveScreenWidgets, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, ActiveScreenWidgetTimes, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, FadeTime, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, CurrentTimer, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, DidConstruct, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, UnknownData_7GJ1, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, SkipableAfter, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, DefaultSkipTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, WasSkipDown, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, TouchButtonSkipClicked, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LegalStartup_Base_C, FirstMenuFocus, 0x034E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_LegalStartup_Base_C, 0x034F);
		}

		// class UTransition_Wasted_GTA3_C : public UTransition_Wasted_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_Wasted_GTA3__Transition_Wasted_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_GTA3_C, UberGraphFrame, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_Wasted_GTA3_C, 0x0350);
		}

		// class ABP_GameScalability_Console_C : public ABP_GameScalability_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GameScalability_Console__BP_GameScalability_Console_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GameScalability_Console_C, 0x03D4);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UTransition_SimpleFade_GTA3_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_SimpleFade_GTA3__Transition_SimpleFade_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, UnknownData_6OQC, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, BlockingButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, FadeIn1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, FadingImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, MainCanvas, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, MainScaleBox, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, MainSizeBox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, MainText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, RandomImages, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, StartingColor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, ReadyToShowText, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, UnknownData_UX2R, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_GTA3_C, LastString, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_SimpleFade_GTA3_C, 0x0358);
		}

		// class UDoubleCreditBox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DoubleCreditBox__DoubleCreditBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoubleCreditBox_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoubleCreditBox_C, Text1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoubleCreditBox_C, Text2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoubleCreditBox_C, DidConstruct, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleCreditBox_C, 0x0279);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, bAbsoluteScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_GILS, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_T83Y, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_D29N, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_5T3H, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class UUI_Button_Menu_C : public UUI_Button_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_Menu__UI_Button_Menu_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_Menu_C, 0x0671);
		}

		// class UAdjustableControls_GTA3_C : public UAdjustableControls_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__AdjustableControls_GTA3__AdjustableControls_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_GTA3_C, UberGraphFrame, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdjustableControls_GTA3_C, 0x09D8);
		}

		// class UHUDItem_SC_ToastBase_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUDItem_SC_ToastBase__HUDItem_SC_ToastBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, UnknownData_NFF1, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, AchIcon, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, AchievementText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, Background, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, Boarder, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, IconBG, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, Image_143, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, Image_275, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, SocialClubIcon, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, TextColorSC, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDItem_SC_ToastBase_C, TextColorNormal, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDItem_SC_ToastBase_C, 0x0338);
		}

		// class UUI_SlotButton_Blank_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_Blank__UI_SlotButton_Blank_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Blank_C, Image, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Blank_C, MainSizeBox, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Blank_C, SlotButton, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_Blank_C, 0x05F0);
		}

		// class ABP_TargetHalo_C : public AGTATargetHalo
		TEST_METHOD(BlueprintGeneratedClass__BP_TargetHalo__BP_TargetHalo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TargetHalo_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TargetHalo_C, 0x0238);
		}

		// class UHUDItem_SC_Toast_gta3_C : public UHUDItem_SC_ToastBase_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUDItem_SC_Toast_gta3__HUDItem_SC_Toast_gta3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDItem_SC_Toast_gta3_C, 0x0338);
		}

		// class UBP_Singleton_C : public UGTASingleton
		TEST_METHOD(BlueprintGeneratedClass__BP_Singleton__BP_Singleton_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Singleton_C, 0x00D8);
		}

		// class UUI_SlotButton_Bool_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_Bool__UI_SlotButton_Bool_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, UberGraphFrame, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, BackButton, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, BackImage, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, ForwardButton, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, ForwardImage, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, Image, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, MainSizeBox, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, OptionNameText, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, SelectionText, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, SlotButton, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, SelectionNames, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, SelectedElement, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, IgnoreSettings, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, IsBackButtonSelected, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, IsForwardButtonSelected, 0x063E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, UnknownData_A0FF, 0x063F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, ArrowBrush, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, ShouldArrowColorMatchText, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, UnknownData_SGQV, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Bool_C, ArrowColorOverride, 0x06CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_Bool_C, 0x06DC);
		}

		// class UControllerUI_XBoxSX_C : public UControllerUI_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControllerUI_XBoxSX__ControllerUI_XBoxSX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerUI_XBoxSX_C, 0x0450);
		}

		// class UUI_Button_MainMenu_GTA3_C : public UUI_Button_MainMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_MainMenu_GTA3__UI_Button_MainMenu_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_MainMenu_GTA3_C, 0x0671);
		}

		// class ABP_WetRoads_C : public ADecalActor
		TEST_METHOD(BlueprintGeneratedClass__BP_WetRoads__BP_WetRoads_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WetRoads_C, 0x0228);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_BMDX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0038);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D8);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0088);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x00A8);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraBoolParameterTrack, UnknownData_VLDC, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraColorParameterTrack, UnknownData_3NSN, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraFloatParameterTrack, UnknownData_UCTG, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraIntegerParameterTrack, UnknownData_5351, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_DTBN, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_X43K, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_14F5, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_OKZ2, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F8);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemTrack, UnknownData_12DI, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0090);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_98OX, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_49QC, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x00B8);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_V0TH, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_0TDX, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_N9TY, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_PKN9, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_IQJD, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, EmitterMaterials, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_0ZX7, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_6IPC, 0x0593);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05F0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_MV59, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, Platforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_ZHU2, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0080);
		}

		// class UNiagaraComponentRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraComponentRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentCountLimit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_8QJF, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, EnabledBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bAssignComponentsOnParticleID, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bOnlyCreateComponentsOnParticleSpawn, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_F3YF, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, TemplateComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, PropertyBindings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_2EO4, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentRendererProperties, 0x0160);
		}

		// class UNiagaraComponentSettings : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressActivationList, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, ForceAutoPooolingList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressEmitterList, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentSettings, 0x0118);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterface2DArrayTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterface2DArrayTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface2DArrayTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface2DArrayTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceArray : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_D4TY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, MaxElements, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_9ERO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArray, 0x0050);
		}

		// class UNiagaraDataInterfaceArrayFloat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat2 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat2, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat2, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat3 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat3, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat3, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat4 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat4, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat4, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayColor : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayColor, ColorData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayColor, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayQuat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayQuat, QuatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayQuat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFunctionLibrary, 0x0028);
		}

		// class UNiagaraDataInterfaceArrayInt32 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayInt32, IntData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayInt32, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayBool : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayBool, BoolData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayBool, 0x0060);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0048);
		}

		// class UNiagaraDataInterfaceAudioPlayer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, SoundToPlay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Attenuation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Concurrency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, ParameterNames, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bLimitPlaysPerTick, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_XCPE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, MaxPlaysPerTick, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bStopWhenComponentIsDestroyed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_4MRV, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioPlayer, 0x0070);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0050);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, bRequireCurrentFrameData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_4ECH, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0040);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_ND8N, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0048);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_BI8Y, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_BU30, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0070);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0270);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_JG32, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0048);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00F0);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_DSTT, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationFixedSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationPerParticleSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_569O, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0068);
		}

		// class UNiagaraDataInterfaceGBuffer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGBuffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGBuffer, 0x0038);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_Y68Q, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_I5YG, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F8);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, RenderTargetUserParameter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, OverrideBufferFormat, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_M8U0, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, ManagedRenderTargets, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x01C0);
		}

		// class UNiagaraDataInterfaceGrid2DCollectionReader : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollectionReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, EmitterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, DIName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, UnknownData_VDSD, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollectionReader, 0x0168);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCells, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, CellSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCellsMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetResolutionMethod, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_DCFJ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_BHD4, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x0100);
		}

		// class UNiagaraDataInterfaceGrid3DCollection : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, NumAttributes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_2C7T, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, RenderTargetUserParameter, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, BufferFormat, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_CJPV, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3DCollection, 0x0180);
		}

		// class UNiagaraDataInterfaceLandscape : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceLandscape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceLandscape, SourceLandscape, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceLandscape, 0x0040);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerCell, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_V0HU, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x0108);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0038);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x00E8);
		}

		// class UNiagaraDataInterfacePlatformSet : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfacePlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePlatformSet, Platforms, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePlatformSet, 0x0068);
		}

		// class UNiagaraDataInterfaceRenderTarget2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, OverrideRenderTargetFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, UnknownData_6ROT, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2D, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTarget2DArray : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, UnknownData_USYC, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2DArray, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTargetVolume : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, UnknownData_QBFW, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTargetVolume, 0x0158);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0038);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_B2GS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_VA5S, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_KQAC, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, bRequireCurrentFrameData, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_9AJH, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00C0);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0040);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_IC4H, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, bUsePhysicsBodyVelocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_TFQJ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, FilteredSockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_MH6H, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0088);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0170);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0270);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01F0);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_L7S5, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0048);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0040);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraSignificanceHandler : public UObject
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandler, 0x0028);
		}

		// class UNiagaraSignificanceHandlerDistance : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerDistance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerDistance, 0x0028);
		}

		// class UNiagaraSignificanceHandlerAge : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerAge)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerAge, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_9CY9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_O0NI, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SignificanceHandler, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_SUM5, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0110);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_XMNL, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_A5V8, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_UEAI, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_73JK, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_7043, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_02RB, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_W66W, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02A0);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_O5TN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_3E6Y, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_DMVF, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_4UZ0, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x02D8);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_F97V, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_IFBK, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_2149, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_DML5, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_CCQR, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_RSSB, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffsetSpace, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_UG99, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_LPH6, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_ZQHK, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibilityTagBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_J3QS, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0678);
		}

		// class UNiagaraMessageDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraMessageDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMessageDataBase, 0x0028);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, UnknownData_T6JE, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00C0);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, SourceMaterialCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0060);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_1B6X, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_DWM9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_SAS3, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_Y9EB, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_6WTL, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Settings, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Settings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_HJA1, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_LPVN, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_9L6K, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_6FEX, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U0OverrideBinding, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V0RangeOverrideBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U1OverrideBinding, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V1RangeOverrideBinding, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_S6K8, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x07D8);
		}

		// class UNiagaraScript : public UNiagaraScriptBase
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_K5N9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_2TP6, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_DQ27, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x02C0);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_97UV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, ComponentRendererWarningsPerClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultRenderTargetFormat, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultGridFormat, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, UnknownData_LR8R, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x00C0);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, UnknownData_I0UA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0040);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_NNTN, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_7FK9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SourceMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_2J86, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_GT4A, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_5N81, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_5589, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_DEPT, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_ZXOL, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibilityTagBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialParameterBindings, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_E4FI, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x07A0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bRequireCurrentFrameData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_P8QT, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_OTEW, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_6QB7, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_WFRY, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_DW2F, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_CHIY, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_69SM, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0480);
		}

		// class UNiagaraScriptBase : public UObject
		TEST_METHOD(Class__NiagaraShader__NiagaraScriptBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptBase, 0x0028);
		}

		// class UUI_Button_Option_GTA3_C : public UUI_Button_Option_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_Option_GTA3__UI_Button_Option_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_Option_GTA3_C, 0x0671);
		}

		// class UControllerUI_Switch_C : public UControllerUI_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControllerUI_Switch__ControllerUI_Switch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerUI_Switch_C, 0x0450);
		}

		// class UControllerUI_PS5_C : public UControllerUI_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControllerUI_PS5__ControllerUI_PS5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerUI_PS5_C, 0x0450);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_U2UH, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_CE6O, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bEnableCollisionBuilding, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_O4C4, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_26SS, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04E0);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UTransition_IntroExplosion_GTA3_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_IntroExplosion_GTA3__Transition_IntroExplosion_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_IntroExplosion_GTA3_C, UnknownData_FXI6, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_IntroExplosion_GTA3_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_IntroExplosion_GTA3_C, BlockingButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_IntroExplosion_GTA3_C, FadeIn1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_IntroExplosion_GTA3_C, Image1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_IntroExplosion_GTA3_C, RandomImages, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_IntroExplosion_GTA3_C, StartingColor, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_IntroExplosion_GTA3_C, 0x0320);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_HCJK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_UPUT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// class UUI_HUD_RadioWheel_Base_C : public UUI_HUD_WeaponWheel_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_RadioWheel_Base__UI_HUD_RadioWheel_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_RadioWheel_Base_C, UnknownData_24XK, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_RadioWheel_Base_C, UberGraphFrame, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_RadioWheel_Base_C, ColorsOverride, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_RadioWheel_Base_C, 0x0658);
		}

		// class UUI_ConfirmationDialog_FullScreen_C : public UConfirmationDialog_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ConfirmationDialog_FullScreen__UI_ConfirmationDialog_FullScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmationDialog_FullScreen_C, UnknownData_6SN1, 0x0C46);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmationDialog_FullScreen_C, UberGraphFrame, 0x0C48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ConfirmationDialog_FullScreen_C, 0x0C50);
		}

		// class UUI_HUDBar_GTA3_C : public UUI_HUDBar_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDBar_GTA3__UI_HUDBar_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDBar_GTA3_C, 0x0318);
		}

		// class UUI_HUDText_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDText__UI_HUDText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDText_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDText_C, MainButtonText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDText_C, TextScaleBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDText_C, Font, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDText_C, 0x0300);
		}

		// class UUI_Options_Menu_Tab_GTA3_C : public UUI_OptionsMenuTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Options_Menu_Tab_GTA3__UI_Options_Menu_Tab_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Menu_Tab_GTA3_C, UberGraphFrame, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Options_Menu_Tab_GTA3_C, 0x05C8);
		}

		// class UTransition_Load_gta3_C : public UTransition_LoadingTemplate_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_Load_gta3__Transition_Load_gta3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Load_gta3_C, UberGraphFrame, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_Load_gta3_C, 0x0368);
		}

		// class ABP_GTA_ProceduralSky_C : public AGTATimeOfDay
		TEST_METHOD(BlueprintGeneratedClass__BP_GTA_ProceduralSky__BP_GTA_ProceduralSky_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UberGraphFrame, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, Dummy, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyMesh, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, DefaultSceneRoot, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonDirection, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunHeight, 0x1164);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WeatherSettings, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyMaterialInst, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyMaterial, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunLightSource, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonLightSource, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, HeightFog, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyLight, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, Saturation, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, CloudsBloom, 0x1204);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, CloudsFluffy, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UVHorizon, 0x120C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UVRoundness, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UVScale, 0x1214);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, FogDirectionalInScattering, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, FogDensity, 0x121C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UVBaseLayerPosition, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UVBaseLayerSize, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UVSecondLayerSize, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UVSecondLayerPosition, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, CloudsLayer1, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, CloudsLayer2, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, HorizonTilt, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WindForce, 0x1274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunRadius, 0x127C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunShineMult, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunSaturation, 0x1284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunMaxAltitude, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunAzimuth, 0x128C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunVisibleDuration, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunDirectionTimeOfDay, 0x1294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_712C, 0x1295);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunDirection, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, StarsBrightness, 0x12A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonBightness, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonRadius, 0x12AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonClouds, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonShine, 0x12B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonRoll, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonVisibleDuration, 0x12BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonSyncedToSun, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_SNAT, 0x12C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonRotation, 0x12C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonChangeSpeed, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WorldRotation, 0x12DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WorldRotationSpeed, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_IDVB, 0x12E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WorldLayerTexture, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WorldLayerFog, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WorldLayerDepth, 0x12F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WorldLayerColor, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyLightRecaptureTime, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyLightIntensity, 0x130C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyLightLightning, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UseWorldSpaceRotation, 0x1314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_OR9M, 0x1315);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, OnLightningPlayed, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunContributionToFog, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MobileNightBoost, 0x132C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, GTAPostProcess, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, RandomCloudOffset, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, CloudDensity, 0x133C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, CurDeltaSeconds, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SunMinElevation, 0x1344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, LightningAmount, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, LightningColor, 0x134C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_HHC0, 0x135C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, WetRoadActor, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, RoadWetnessAmount, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, LastInterval, 0x136C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, CapturedSkyHSV, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, NumSkyCaptures, 0x137C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyCumulativeDiff, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, BegunPlay, 0x1384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_7I7Y, 0x1385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyLowerHemiColor, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, FramesSinceSunMoved, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, OccludedSkyColor, 0x139C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_A1QV, 0x13AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, SkyMaterial_NoClouds, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, bEnabledCloudMaterial, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, UnknownData_GV9R, 0x13B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonCycleState, 0x13BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonBrightnessMultiplier, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GTA_ProceduralSky_C, MoonBaseSize, 0x13C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GTA_ProceduralSky_C, 0x13C8);
		}

		// class AGTA3World_C : public AGTALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__GTA3World__GTA3World_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTA3World_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGTA3World_C, CurrentAdrenaline, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGTA3World_C, 0x0234);
		}

		// class UUI_HUD_FillButton_C : public UUI_HUD_Button_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_FillButton__UI_HUD_FillButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_FillButton_C, UnknownData_AU6O, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_FillButton_C, UberGraphFrame, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_FillButton_C, 0x0388);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class UHUDDrawer_GTA3_C : public UHUDDrawer_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUDDrawer_GTA3__HUDDrawer_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_GTA3_C, UberGraphFrame, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDDrawer_GTA3_C, 0x0390);
		}

		// class UBaseCreateFromSelectedToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedToolBuilder, UnknownData_VSNY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedToolBuilder, 0x0030);
		}

		// class UOnAcceptHandleSourcesProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__OnAcceptHandleSourcesProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnAcceptHandleSourcesProperties, OnToolAccept, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnAcceptHandleSourcesProperties, UnknownData_DED7, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnAcceptHandleSourcesProperties, 0x0068);
		}

		// class UBaseCreateFromSelectedHandleSourceProperties : public UOnAcceptHandleSourcesProperties
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedHandleSourceProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, WriteOutputTo, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, UnknownData_QR17, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, UnknownData_J4NN, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, OutputName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, OutputAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedHandleSourceProperties, 0x0090);
		}

		// class UTransformInputsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__TransformInputsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, bShowTransformUI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, bSnapToWorldGrid, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, UnknownData_ZAV5, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformInputsToolProperties, 0x0068);
		}

		// class UBaseCreateFromSelectedTool : public UMultiSelectionTool
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, UnknownData_BWP1, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, HandleSourcesProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformProxies, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformGizmos, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformInitialScales, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, UnknownData_8LE1, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedTool, 0x00F0);
		}

		// class UBaseDynamicMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__BaseDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseDynamicMeshComponent, UnknownData_MP6Q, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseDynamicMeshComponent, 0x04C0);
		}

		// class UBaseMeshProcessingToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__ModelingComponents__BaseMeshProcessingToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMeshProcessingToolBuilder, 0x0028);
		}

		// class UBaseMeshProcessingTool : public USingleSelectionTool
		TEST_METHOD(Class__ModelingComponents__BaseMeshProcessingTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, UnknownData_VJHM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, Preview, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, UnknownData_6C2J, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMeshProcessingTool, 0x0400);
		}

		// class UBaseVoxelTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__ModelingComponents__BaseVoxelTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVoxelTool, VoxProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVoxelTool, UnknownData_B050, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseVoxelTool, 0x0108);
		}

		// class UCollectSurfacePathMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__CollectSurfacePathMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectSurfacePathMechanic, UnknownData_IKJD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectSurfacePathMechanic, 0x0550);
		}

		// class UConstructionPlaneMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__ConstructionPlaneMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_1B7K, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformGizmo, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformProxy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_1DBF, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, ClickToSetPlaneBehavior, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstructionPlaneMechanic, 0x00F0);
		}

		// class UCurveControlPointsMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__CurveControlPointsMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_8AZ4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, ClickBehavior, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, HoverBehavior, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_D6PG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewGeometryActor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, DrawnControlPoints, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, DrawnControlSegments, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewPoint, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewSegment, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_98N9, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PointTransformProxy, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PointTransformGizmo, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_FRUT, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveControlPointsMechanic, 0x0650);
		}

		// class UDynamicMeshReplacementChangeTarget : public UObject
		TEST_METHOD(Class__ModelingComponents__DynamicMeshReplacementChangeTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshReplacementChangeTarget, UnknownData_RIX3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshReplacementChangeTarget, 0x0058);
		}

		// class ULineSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__LineSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, LineMaterial, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, Bounds, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, bBoundsDirty, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, UnknownData_SBKB, 0x0495);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineSetComponent, 0x04D0);
		}

		// class UMeshCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshCommandChangeTarget, 0x0028);
		}

		// class UMeshOpPreviewWithBackgroundCompute : public UObject
		TEST_METHOD(Class__ModelingComponents__MeshOpPreviewWithBackgroundCompute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_909C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, PreviewMesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, StandardMaterials, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, OverrideMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, WorkingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_NLNG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshOpPreviewWithBackgroundCompute, 0x0090);
		}

		// class UMeshReplacementCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshReplacementCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReplacementCommandChangeTarget, 0x0028);
		}

		// class UMeshVertexCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshVertexCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexCommandChangeTarget, 0x0028);
		}

		// class UMultiTransformer : public UObject
		TEST_METHOD(Class__ModelingComponents__MultiTransformer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_CL4E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, GizmoManager, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_QW4S, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformGizmo, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformProxy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_JFHF, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiTransformer, 0x0140);
		}

		// class UOctreeDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__OctreeDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_7OZP, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, bExplicitShowWireframe, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_M0M6, 0x04D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOctreeDynamicMeshComponent, 0x05D0);
		}

		// class UPlaneDistanceFromHitMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PlaneDistanceFromHitMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneDistanceFromHitMechanic, UnknownData_9TLD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneDistanceFromHitMechanic, 0x04B0);
		}

		// class UPointSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__PointSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, PointMaterial, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, Bounds, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, bBoundsDirty, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, UnknownData_4882, 0x0495);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointSetComponent, 0x04D0);
		}

		// class UPreviewMesh : public UObject
		TEST_METHOD(Class__ModelingComponents__PreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_W44A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bBuildSpatialDataStructure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bDrawOnTop, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_GYMM, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, DynamicMeshComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_YLM9, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMesh, 0x00E0);
		}

		// class UPolyEditPreviewMesh : public UPreviewMesh
		TEST_METHOD(Class__ModelingComponents__PolyEditPreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditPreviewMesh, UnknownData_8ZF2, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditPreviewMesh, 0x04D0);
		}

		// class UPolygonSelectionMechanicProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanicProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectFaces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bPreferProjectedElement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectDownRay, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bIgnoreOcclusion, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, UnknownData_6MU3, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanicProperties, 0x0068);
		}

		// class UPolygonSelectionMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_9VJI, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, Properties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_KOR0, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, PreviewGeometryActor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, DrawnTriangleSetComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_OU5O, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, HighlightedFaceMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_4KJ6, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanic, 0x0670);
		}

		// class APreviewGeometryActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__ModelingComponents__PreviewGeometryActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreviewGeometryActor, 0x0220);
		}

		// class UPreviewGeometry : public UObject
		TEST_METHOD(Class__ModelingComponents__PreviewGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewGeometry, ParentActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewGeometry, LineSets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewGeometry, 0x0080);
		}

		// class APreviewMeshActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__ModelingComponents__PreviewMeshActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreviewMeshActor, 0x0220);
		}

		// class USimpleDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__SimpleDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_GGP9, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bExplicitShowWireframe, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_CA06, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bDrawOnTop, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_59AQ, 0x0541);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleDynamicMeshComponent, 0x0610);
		}

		// class USpaceCurveDeformationMechanicPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__SpaceCurveDeformationMechanicPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, TransformMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_LA67, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, TransformOrigin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_YCXG, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, Softness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, SoftFalloff, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_F07H, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceCurveDeformationMechanicPropertySet, 0x0070);
		}

		// class USpaceCurveDeformationMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__SpaceCurveDeformationMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_L3CM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, ClickBehavior, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, HoverBehavior, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_QTO9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, TransformProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_AFNN, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PreviewGeometryActor, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, RenderPoints, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, RenderSegments, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_U6KF, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PointTransformProxy, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PointTransformGizmo, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_JLBG, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceCurveDeformationMechanic, 0x02B0);
		}

		// class USpatialCurveDistanceMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__SpatialCurveDistanceMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpatialCurveDistanceMechanic, UnknownData_3EGR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatialCurveDistanceMechanic, 0x03F0);
		}

		// class UTriangleSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__TriangleSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, Bounds, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, bBoundsDirty, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, UnknownData_8Z86, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriangleSetComponent, 0x0550);
		}

		// class UUVLayoutPreviewProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__UVLayoutPreviewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, bVisible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_TM7O, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, ScaleFactor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, WhichSide, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_FDYL, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, bShowWireframe, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_JLAS, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, Shift, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVLayoutPreviewProperties, 0x0078);
		}

		// class UUVLayoutPreview : public UObject
		TEST_METHOD(Class__ModelingComponents__UVLayoutPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, PreviewMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, TriangleComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, bShowBackingRectangle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, UnknownData_G5EG, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, BackingRectangleMaterial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, UnknownData_91H6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVLayoutPreview, 0x0140);
		}

		// class UVoxelProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__VoxelProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, VoxelCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, bAutoSimplify, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, bRemoveInternalSurfaces, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, UnknownData_YL2H, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, SimplifyMaxErrorFactor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, CubeRootMinComponentVolume, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelProperties, 0x0078);
		}

		// class UWeightMapSetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__WeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, WeightMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, WeightMapsList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, bInvertWeightMap, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, UnknownData_13BT, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightMapSetProperties, 0x0080);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_JJ2D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_DE6F, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_GTM6, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_4S7P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_ZIQC, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_KPAA33E82K, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_HDP6SDG8V7, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_GDL9CW6V71, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_R5MJ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_9PEJ, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_G4GE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_IB2K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_VCVG, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_1LWC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_ZVKU, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_I5R4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_6H54, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_0ZX8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_ASX1, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_2LO8, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_219T, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_7KYG, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_JJTN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_ETBL, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_NMIA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_F7U6, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_PXGJ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_X4JO, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_GL2Q, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_586V, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_SZVQ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_FJ3R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__FloatChannelEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatChannelEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_XYP9, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_V3RZ, 0x012E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0130);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0088);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0088);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_QGZ9, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_BPFW, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathTrack, UnknownData_EXPL, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0090);
		}

		// class UMovieScenePropertySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, InstantiatorSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, UnknownData_GKV9, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_CGYT, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_07W4, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_292H, 0x0739);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0740);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyBinding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_3DJE, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x00A8);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x00A8);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0228);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceTrack, UnknownData_PPQC, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x00B0);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_CTQR, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bLooping, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_AELK, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0338);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, UnknownData_FO0G, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0090);
		}

		// class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBaseValueEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBaseValueEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolTrack, UnknownData_BK4Y, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x00B0);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, UnknownData_LGHA, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00B8);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_2NLT, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, UnknownData_VSOC, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0090);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_C791, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bLockPreviousCamera, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_3TM6, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_YSY7, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, InitialCameraCutTransform, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bHasInitialCameraCutTransform, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_2C64, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0160);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_EB0A, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0090);
		}

		// class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrackInstance, UnknownData_B9VY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrackInstance, 0x00B8);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_69HU, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_ECWP, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeSection, ShakeData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeSection, 0x0108);
		}

		// class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, UnknownData_VDNN, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerSection, Channel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerSection, 0x0170);
		}

		// class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, UnknownData_930M, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, UnknownData_947P, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0090);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0188);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0088);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_0QQA, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_TIW1, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00B8);
		}

		// class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentInvalidatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentInvalidatorSystem, 0x0040);
		}

		// class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentAttachmentSystem, UnknownData_4AHD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentSystem, 0x01C0);
		}

		// class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMobilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMobilitySystem, UnknownData_LVEP, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMobilitySystem, 0x0220);
		}

		// class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreAnimatedComponentTransformSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePreAnimatedComponentTransformSystem, UnknownData_AN6U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedComponentTransformSystem, 0x01C0);
		}

		// class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentTransformSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentTransformSystem, 0x0050);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, UnknownData_TMYP, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00B8);
		}

		// class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformPropertySystem, 0x0050);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x00A8);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, UnknownData_LEXF, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0118);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// class UMovieSceneEventSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSystem, UnknownData_FNOU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSystem, 0x0090);
		}

		// class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostEvalEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostEvalEventSystem, 0x0090);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_0A0J, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_LSLP, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_TJ19, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0098);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, UnknownData_7XFA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0178);
		}

		// class UMovieSceneFadeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FloatCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_0YVY, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x00A8);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeTrack, UnknownData_BM1Q, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x00B0);
		}

		// class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatPropertySystem, 0x0050);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, UnknownData_1KPK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0190);
		}

		// class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalBiasSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalBiasSystem, 0x0040);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerTrack, UnknownData_JE35, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x00B0);
		}

		// class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneInterrogatedPropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, UnknownData_I0XM, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, 0x01E8);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_P7YL, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_4RSS, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0108);
		}

		// class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySystem, UnknownData_C0LF, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySystem, 0x01A8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0088);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0088);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, UnknownData_QE49, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0098);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_6QLG, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, materialIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_9ARM, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0098);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A8);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, UnknownData_A8XC, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x00B8);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0148);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, UnknownData_ZXAG, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0090);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, UnknownData_JC6Q, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0090);
		}

		// class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePiecewiseFloatBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePiecewiseFloatBlenderSystem, UnknownData_M8G4, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePiecewiseFloatBlenderSystem, 0x0120);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A8);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_WAFS, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, materialIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_JDDQ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x00B8);
		}

		// class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyInstantiatorSystem, UnknownData_I3KU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyInstantiatorSystem, 0x0290);
		}

		// class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneQuaternionInterpolationRotationSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneQuaternionInterpolationRotationSystem, 0x0040);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_42WI, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartLocationOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartRotationOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchWithPrevious, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_7GFZ, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedBoneName, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedLocationOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedRotationOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchTranslation, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchIncludeZHeight, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationYaw, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationPitch, 0x0227);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationRoll, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_AWRK, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x0270);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_AZTO, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_5XNO, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, RootMotionParams, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bBlendFirstChildOfRoot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_QCWD, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x00D0);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoTrack, UnknownData_66JR, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x00B0);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringTrack, UnknownData_05ZS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x00B0);
		}

		// class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOriginSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTransformOriginSystem, UnknownData_2ILD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOriginSystem, 0x0078);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x00A8);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_39VC, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_VWSM, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_5O5Z, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00B8);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x00B0);
		}

		// class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalEasingInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, UnknownData_DE4T, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, 0x0090);
		}

		// class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__WeightAndEasingEvaluatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightAndEasingEvaluatorSystem, UnknownData_J0ND, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightAndEasingEvaluatorSystem, 0x0078);
		}

		// class UTransition_SimpleFade_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_SimpleFade__Transition_SimpleFade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_C, UnknownData_Y0L2, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_C, BlockingButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_C, FadeIn1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_C, Image1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_C, RandomImages, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_SimpleFade_C, StartingColor, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_SimpleFade_C, 0x0320);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0088);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_F9IC, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0680);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_TGRO, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0480);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class UUI_Brief_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Brief__UI_Brief_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, Background, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, DownButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, DownImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, DownScaleImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, FocusHoldingButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, MainScrollBox, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, TextBlock, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, UpButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, UpImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, UpScaleImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, ButtonColor, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, SlotStyle, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, NewVar_1, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, UnknownData_ZL0R, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, BackgroundColor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, DefaultTextStyle, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, ScrollSensitivity, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, DoScrollDown, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, DoScrollUp, 0x070D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, UnknownData_OY8U, 0x070E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, ButtonScrollSpeed, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, UnknownData_9X81, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, ButtonImageColor, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Brief_C, ButtonImageDisabledColor, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Brief_C, 0x0768);
		}

		// class UAdjustableControls_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AdjustableControls__AdjustableControls_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, BackButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerBackButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerBackHelp, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerButtons, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerLayout, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_A, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_B, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_DPad_Down, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_DPad_Left, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_DPad_Right, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_DPad_Up, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_L1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_L2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_L3, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_R1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_R2, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_R3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_Select, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_Start, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_X, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerSlot_Y, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerTemplateSelect, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerUICanvas, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, FillerImage_4, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, HelpContextBottomBox, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, InvertLook, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, KeyboardLayout, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, LeftControllerTab, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, LeftPanel, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, LeftSlotList, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, LeftSlotMessageButton, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ResetButton, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, RightControllerTab, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, RightPanel, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, RightSlotList, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, RightSlotMessageButton, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, Vibration, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, CombinedSlotStyle, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, SlotTitles, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, NormalButtonTemplate, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ButtonTemplate, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, SlotTemplate, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ButtonInteractSound, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, RestoreControlsMessage, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ParentTabbedLayout, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ListeningDialog, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, LastInputType, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, UnknownData_XA3T, 0x08F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, CurrentSelectedControllerMode, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, Current_ControllerUI, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerBackgroundColor, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerBackgroundColor_Selected, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerFontColor, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ControllerFontColor_Selected, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_C, ParentOptionsList, 0x09A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdjustableControls_C, 0x09D0);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_VIDK, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_R48J, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_085R, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0800);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_R4G9, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_Q9PI, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08C0);
		}

		// class UUI_PauseMenu_C : public UUI_Menu_Base_BP_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PauseMenu__UI_PauseMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, UnknownData_6RJ0, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, UberGraphFrame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, AcceptOptionsChangesHelp, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, BackgroundContainer, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, BackHelpText, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, ControllerCursorBox, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, FillerImage, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, FillerImage_2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, FillerImage_4, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, HelpContextBottomBox, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, HelpContextItems, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, HolderCanvas, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, InvisibleMapFocusHolderButton, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, KeyHelpText, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, KeyList, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, LeftPanels, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, LoginInfo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, LogoImage, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MainCanvas, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MainSizeBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapAreaScaleBox, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapAreaText, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapCanvas, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapControllerCursor, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapKeyHolder, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MenuButtonPanel, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MoveHelpText, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, NavigationBox, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, NavigationBox_2, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, OtherMapItems, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, PlaceWaypointHelpText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, Radar, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, RemoveWaypointHelpText, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, SCSignIn, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, SCSignUp, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, SCUnlink, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, SelectorWidget, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, ToggleGangsHelpText, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, UI_Button_AccountPicker, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, VersionTextBox, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, ZoomInHelpText, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, ZoomOutHelpText, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, HasMapStarted, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, OpenMap, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, CloseMap, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, IsMapMoving, 0x0543);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, OriginalLeftPanelAnchors, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapAnchorMoveSpeed, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, ControllerCursorSpeed, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapOpenLeftPixels, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapCursorBoarder, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, LastResolution, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, WasMapCursorPressedPreviously, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, UnknownData_8D3R, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, EdgeScrollingScreenPercent, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, ControllerCursorScreenSpeed, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapJumpMousePosition, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, IsDoingDelayedMapJump, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, UnknownData_6DUL, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapJumpFadeTime, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, ShowGangs, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, UnknownData_KQPG, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, MapRatioCutoff, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, LastMapAreaCheckPosition, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu_C, IsMapForceOpen, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PauseMenu_C, 0x05A5);
		}

		// class UUI_SlotButton_Slider_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_Slider__UI_SlotButton_Slider_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, UberGraphFrame, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, EditableTextBox, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, Image, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, MainSizeBox, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, MainSlider, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, OptionNameText, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, SliderBar, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, SlotButton, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, ProgressBarStyle, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, SliderStyle, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Slider_C, SliderHandleColor, 0x0AF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_Slider_C, 0x0B08);
		}

		// class UTransition_Busted_GTA3_C : public UTransition_Wasted_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_Busted_GTA3__Transition_Busted_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Busted_GTA3_C, UberGraphFrame, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_Busted_GTA3_C, 0x0350);
		}

		// class ABP_Pickup_Base_C : public AGTAMarkerActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Pickup_Base__BP_Pickup_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, PointLight, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, PickupMesh, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, DefaultSceneRoot, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, RotationSpeed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, UnknownData_5A11, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, DynamicMaterial, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, bPickedUp, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, UnknownData_3AZ9, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Pickup_Base_C, DissolveTime, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pickup_Base_C, 0x02E0);
		}

		// class UAddPatchToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolBuilder, UnknownData_MVOH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolBuilder, 0x0030);
		}

		// class UAddPatchToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Width, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Rotation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Subdivisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Shift, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolProperties, 0x0070);
		}

		// class UAddPatchTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPatchTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_ASAJ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, ShapeSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_F7ZU, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchTool, 0x0100);
		}

		// class UAddPrimitiveToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveToolBuilder, UnknownData_ZMAK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveToolBuilder, 0x0038);
		}

		// class UProceduralShapeToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ProceduralShapeToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bInstanceIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PolygroupMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PlaceMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bSnapToGrid, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PivotLocation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_RMH2, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Rotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bAlignShapeToPlacementSurface, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_UBK6, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralShapeToolProperties, 0x0070);
		}

		// class UProceduralRectangleToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralRectangleToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, Width, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, Depth, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, WidthSubdivisions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, DepthSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralRectangleToolProperties, 0x0080);
		}

		// class UProceduralBoxToolProperties : public UProceduralRectangleToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralBoxToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralBoxToolProperties, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralBoxToolProperties, HeightSubdivisions, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralBoxToolProperties, 0x0088);
		}

		// class UProceduralRoundedRectangleToolProperties : public UProceduralRectangleToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralRoundedRectangleToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRoundedRectangleToolProperties, CornerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRoundedRectangleToolProperties, CornerSlices, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralRoundedRectangleToolProperties, 0x0088);
		}

		// class UProceduralDiscToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralDiscToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, RadialSlices, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, RadialSubdivisions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, UnknownData_TV4J, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralDiscToolProperties, 0x0080);
		}

		// class UProceduralPuncturedDiscToolProperties : public UProceduralDiscToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralPuncturedDiscToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralPuncturedDiscToolProperties, HoleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralPuncturedDiscToolProperties, UnknownData_6DJG, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralPuncturedDiscToolProperties, 0x0088);
		}

		// class UProceduralTorusToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralTorusToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, MajorRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, MinorRadius, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, TubeSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, CrossSectionSlices, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralTorusToolProperties, 0x0080);
		}

		// class UProceduralCylinderToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralCylinderToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, Height, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, RadialSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, HeightSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralCylinderToolProperties, 0x0080);
		}

		// class UProceduralConeToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralConeToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, Height, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, RadialSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, HeightSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralConeToolProperties, 0x0080);
		}

		// class UProceduralArrowToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralArrowToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, ShaftRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, ShaftHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, HeadRadius, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, HeadHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, RadialSlices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, TotalSubdivisions, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralArrowToolProperties, 0x0088);
		}

		// class UProceduralSphereToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralSphereToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, LatitudeSlices, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, LongitudeSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, UnknownData_WJOF, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralSphereToolProperties, 0x0080);
		}

		// class UProceduralSphericalBoxToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralSphericalBoxToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphericalBoxToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphericalBoxToolProperties, Subdivisions, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralSphericalBoxToolProperties, 0x0078);
		}

		// class ULastActorInfo : public UObject
		TEST_METHOD(Class__MeshModelingTools__LastActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, UnknownData_F1SF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, Actor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, ShapeSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, MaterialProperties, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULastActorInfo, 0x0058);
		}

		// class UAddPrimitiveTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_1PT2, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, ShapeSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, LastGenerated, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, AssetName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_IHUQ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveTool, 0x00F0);
		}

		// class UAddBoxPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddBoxPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddBoxPrimitiveTool, 0x00F0);
		}

		// class UAddCylinderPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddCylinderPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddCylinderPrimitiveTool, 0x00F0);
		}

		// class UAddConePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddConePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddConePrimitiveTool, 0x00F0);
		}

		// class UAddRectanglePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddRectanglePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddRectanglePrimitiveTool, 0x00F0);
		}

		// class UAddRoundedRectanglePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddRoundedRectanglePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddRoundedRectanglePrimitiveTool, 0x00F0);
		}

		// class UAddDiscPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddDiscPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddDiscPrimitiveTool, 0x00F0);
		}

		// class UAddPuncturedDiscPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddPuncturedDiscPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPuncturedDiscPrimitiveTool, 0x00F0);
		}

		// class UAddTorusPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddTorusPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddTorusPrimitiveTool, 0x00F0);
		}

		// class UAddArrowPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddArrowPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddArrowPrimitiveTool, 0x00F0);
		}

		// class UAddSpherePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddSpherePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddSpherePrimitiveTool, 0x00F0);
		}

		// class UAddSphericalBoxPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddSphericalBoxPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddSphericalBoxPrimitiveTool, 0x00F0);
		}

		// class UAlignObjectsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolBuilder, 0x0028);
		}

		// class UAlignObjectsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_IHB3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignTo, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_YLZN, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, BoxPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_16WO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignX, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignY, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignZ, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_GB8M, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolProperties, 0x0070);
		}

		// class UAlignObjectsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_OKEO, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, AlignProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_11LL, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsTool, 0x0140);
		}

		// class UBakeMeshAttributeMapsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolBuilder, UnknownData_UHWS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsToolBuilder, 0x0030);
		}

		// class UBakeMeshAttributeMapsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, MapType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_MPTK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, Resolution, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_HBSC, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UVLayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UVLayerNamesList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, bUseWorldSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_JYA2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, Result, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsToolProperties, 0x0098);
		}

		// class UBakedNormalMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedNormalMapToolProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedNormalMapToolProperties, 0x0060);
		}

		// class UBakedOcclusionMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedOcclusionMapToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, OcclusionRays, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, MaxDistance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, bGaussianBlur, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, UnknownData_89NZ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, BlurRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, BiasAngle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, UnknownData_DO5I, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedOcclusionMapToolProperties, 0x0078);
		}

		// class UBakedOcclusionMapVisualizationProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedOcclusionMapVisualizationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapVisualizationProperties, BaseGrayLevel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapVisualizationProperties, OcclusionMultiplier, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedOcclusionMapVisualizationProperties, 0x0068);
		}

		// class UBakedCurvatureMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedCurvatureMapToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, CurvatureType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_3J85, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, ColorMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_C97I, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, RangeMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, MinRangeMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, Clamping, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_JW34, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, bGaussianBlur, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_CD4N, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, BlurRadius, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_KZDK, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedCurvatureMapToolProperties, 0x0080);
		}

		// class UBakedTexture2DImageProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedTexture2DImageProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, SourceTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, UVLayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, UnknownData_GJL7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedTexture2DImageProperties, 0x0070);
		}

		// class UBakeMeshAttributeMapsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, Settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, NormalMapProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, OcclusionMapProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CurvatureMapProps, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, Texture2DProps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, VisualizationProps, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_WATA, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, PreviewMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_CL95, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedNormalMap, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_3W1J, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedOcclusionMap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_8XWX, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedCurvatureMap, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_XKXG, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedMeshPropertyMap, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_MCJ5, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedTexture2DImageMap, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyNormalMap, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyColorMapBlack, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyColorMapWhite, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsTool, 0x04D0);
		}

		// class UBakeTransformToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolBuilder, UnknownData_Y2FK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolBuilder, 0x0030);
		}

		// class UBakeTransformToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bBakeRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, BakeScale, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bRecenterPivot, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, UnknownData_WWNP, 0x0063);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolProperties, 0x0068);
		}

		// class UBakeTransformTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__BakeTransformTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, UnknownData_UUTI, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformTool, 0x00B8);
		}

		// class UPhysicsObjectToolPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PhysicsObjectToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, ObjectName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, CollisionType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, UnknownData_GQXE, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, UnknownData_81H6, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Spheres, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Boxes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Capsules, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Convexes, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsObjectToolPropertySet, 0x00B8);
		}

		// class UCollisionGeometryVisualizationProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CollisionGeometryVisualizationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, LineThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, bShowHidden, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, UnknownData_YSBI, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, Color, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, UnknownData_YGXE, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionGeometryVisualizationProperties, 0x0070);
		}

		// class UCombineMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolBuilder, UnknownData_1LB3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolBuilder, 0x0038);
		}

		// class UCombineMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, bIsDuplicateMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, UnknownData_OSQL, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, WriteOutputTo, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, UnknownData_IJQQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, OutputName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, OutputAsset, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolProperties, 0x0088);
		}

		// class UCombineMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, HandleSourceProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, UnknownData_9MYA, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesTool, 0x00B8);
		}

		// class UConvertToPolygonsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolBuilder, 0x0028);
		}

		// class UConvertToPolygonsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, ConversionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_BOIA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, AngleTolerance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bCalculateNormals, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bShowGroupColors, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_PG8B, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolProperties, 0x0070);
		}

		// class UConvertToPolygonsTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, Settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, PreviewMesh, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, UnknownData_MUR1, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsTool, 0x03E0);
		}

		// class UCSGMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, Operation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bShowNewBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bAttemptFixHoles, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bOnlyUseFirstMeshMaterials, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, UnknownData_Z05Y, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesToolProperties, 0x0068);
		}

		// class UCSGMeshesTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, CSGProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, UnknownData_JEXN, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, DrawnLineSet, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, UnknownData_Q7T2, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesTool, 0x0120);
		}

		// class UCSGMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesToolBuilder, 0x0030);
		}

		// class UDeformMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsToolBuilder, 0x0030);
		}

		// class UDeformMeshPolygonsTransformProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTransformProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, DeformationStrategy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, TransformMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectFaces, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectEdges, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectVertices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSnapToWorldGrid, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bShowWireframe, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_F167, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, SelectedWeightScheme, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_D53L, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_7FZ8, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, HandleWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bPostFixHandles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_N24U, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTransformProperties, 0x0080);
		}

		// class UDeformMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_8NMP, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, DynamicMeshComponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, TransformProps, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_A6F0, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTool, 0x12F0);
		}

		// class UDisplaceMeshCommonProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshCommonProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, DisplacementType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, UnknownData_PYGV, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, DisplaceIntensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, RandomSeed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, Subdivisions, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, WeightMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, WeightMapsList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, bInvertWeightMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, bDisableSizeWarning, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, UnknownData_MED4, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshCommonProperties, 0x0090);
		}

		// class UDisplaceMeshTextureMapProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshTextureMapProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTextureMapProperties, DisplacementMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshTextureMapProperties, 0x0068);
		}

		// class UDisplaceMeshDirectionalFilterProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshDirectionalFilterProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, bEnableFilter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, UnknownData_51AY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, FilterDirection, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, FilterWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, UnknownData_E8WP, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshDirectionalFilterProperties, 0x0078);
		}

		// class UDisplaceMeshPerlinNoiseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshPerlinNoiseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshPerlinNoiseProperties, PerlinLayerProperties, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshPerlinNoiseProperties, 0x0070);
		}

		// class UDisplaceMeshSineWaveProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshSineWaveProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWaveFrequency, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWavePhaseShift, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWaveDirection, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, UnknownData_NXAX, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshSineWaveProperties, 0x0078);
		}

		// class UDisplaceMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshToolBuilder, 0x0028);
		}

		// class UDisplaceMeshTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, CommonProperties, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DirectionalFilterProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, TextureMapProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, NoiseProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, SineWaveProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, UnknownData_KMW1, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshTool, 0x03F0);
		}

		// class UDrawAndRevolveToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawAndRevolveToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveToolBuilder, UnknownData_TLHG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawAndRevolveToolBuilder, 0x0030);
		}

		// class URevolveProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RevolveProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, RevolutionDegrees, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, RevolutionDegreesOffset, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, Steps, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bReverseRevolutionDirection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bFlipMesh, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bProfileIsCrossSectionOfSide, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, PolygroupMode, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, QuadSplitMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_OKCD, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, DiagonalProportionTolerance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, CapFillMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bWeldFullRevolution, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bWeldVertsOnAxis, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_DTRY, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, AxisWeldTolerance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bSharpNormals, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_VM1M, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, SharpNormalAngleTolerance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bFlipVs, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bUVsSkipFullyWeldedEdges, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_TDE9, 0x00AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveProperties, 0x00B0);
		}

		// class URevolveToolProperties : public URevolveProperties
		TEST_METHOD(Class__MeshModelingTools__RevolveToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bConnectOpenProfileToAxis, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bSnapToWorldGrid, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, UnknownData_JX16, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, DrawPlaneOrigin, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, DrawPlaneOrientation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bEnableSnapping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bAllowedToEditDrawPlane, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, UnknownData_VAB8, 0x00CE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveToolProperties, 0x00D0);
		}

		// class URevolveOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RevolveOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveOperatorFactory, UnknownData_817N, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveOperatorFactory, RevolveTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveOperatorFactory, 0x0038);
		}

		// class UDrawAndRevolveTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawAndRevolveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, UnknownData_R9K9, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, ControlPointsMechanic, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, PlaneMechanic, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, Settings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, MaterialProperties, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, Preview, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawAndRevolveTool, 0x0120);
		}

		// class UDrawPolygonToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolBuilder, UnknownData_KFNO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolBuilder, 0x0030);
		}

		// class UDrawPolygonToolStandardProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolStandardProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, PolygonType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, OutputMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_F26N, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, FeatureSizeRatio, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, ExtrudeHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, Steps, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bAllowSelfIntersections, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bShowGizmo, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_XUJV, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolStandardProperties, 0x0078);
		}

		// class UDrawPolygonToolSnapProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolSnapProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bEnableSnapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToWorldGrid, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToEdges, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToAngles, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToLengths, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_JGRD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, SegmentLength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bHitSceneObjects, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_4JZS, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, HitNormalOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_XSBK, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolSnapProperties, 0x0078);
		}

		// class UDrawPolygonTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_9O14, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PolygonProperties, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, SnapProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_TG2V, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PreviewMesh, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformGizmo, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformProxy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_JVDI, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, HeightMechanic, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_B40C, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonTool, 0x0570);
		}

		// class UDrawPolyPathToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathToolBuilder, UnknownData_FRNV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathToolBuilder, 0x0038);
		}

		// class UDrawPolyPathProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, OutputType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_0DLE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, WidthMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_3GE4, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Width, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, HeightMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_H38J, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Height, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, RampStartRatio, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, bSnapToWorldGrid, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_B8O0, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathProperties, 0x0080);
		}

		// class UDrawPolyPathExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, Direction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_DAO7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_G6FK, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathExtrudeProperties, 0x0068);
		}

		// class UDrawPolyPathTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_URL9, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, TransformProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, MaterialProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_HL39, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, PlaneMechanic, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_HNMS, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, EditPreview, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeHeightMechanic, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, CurveDistMechanic, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, SurfacePathMechanic, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_6MWV, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathTool, 0x0210);
		}

		// class UDynamicMeshBrushTool : public UBaseBrushTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, PreviewMesh, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, UnknownData_YL1F, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshBrushTool, 0x0200);
		}

		// class UDynamicMeshSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptToolBuilder, UnknownData_TK1S, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptToolBuilder, 0x0038);
		}

		// class UBrushSculptProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BrushSculptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bIsRemeshingEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_GRKF, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushSpeed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bFreezeTarget, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_Z5ET, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, SmoothBrushSpeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bDetailPreservingSmooth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_1CSC, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushSculptProperties, 0x0078);
		}

		// class UMeshConstraintProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshConstraintProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreserveSharpEdges, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MeshBoundaryConstraint, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, GroupBoundaryConstraint, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MaterialBoundaryConstraint, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreventNormalFlips, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, UnknownData_QJ03, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshConstraintProperties, 0x0068);
		}

		// class URemeshProperties : public UMeshConstraintProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, SmoothingStrength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bFlips, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bSplits, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bCollapses, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, UnknownData_XNG6, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshProperties, 0x0070);
		}

		// class UBrushRemeshProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__BrushRemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, bEnableRemeshing, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_3M6O, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, TriangleSize, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, PreserveDetail, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_D09O, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushRemeshProperties, 0x0080);
		}

		// class UFixedPlaneBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__FixedPlaneBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bPropertySetEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bShowGizmo, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bSnapToGrid, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, UnknownData_AOG4, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, position, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, Rotation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedPlaneBrushProperties, 0x0080);
		}

		// class UDynamicMeshSculptTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptMaxBrushProperties, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, KelvinBrushProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, RemeshProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, GizmoProperties, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ViewProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_4RC1, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicator, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMaterial, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, DynamicMeshComponent, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ActiveOverrideMaterial, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_HK0L, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformGizmo, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformProxy, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_E7IE, 0x0C60);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptTool, 0x0C70);
		}

		// class UEdgeLoopInsertionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionToolBuilder, UnknownData_JVDS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionToolBuilder, 0x0030);
		}

		// class UEdgeLoopInsertionProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, PositionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_5IRA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, InsertionMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_GN2B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_F1NR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, ProportionOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, DistanceOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bInteractive, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bFlipOffsetDirection, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bWireframe, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_QWLL, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, VertexTolerance, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionProperties, 0x0090);
		}

		// class UEdgeLoopInsertionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionOperatorFactory, UnknownData_CTHI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionOperatorFactory, Tool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionOperatorFactory, 0x0038);
		}

		// class UEdgeLoopInsertionTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_3OD0, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_6V3U, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, Preview, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_5O8A, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionTool, 0x0500);
		}

		// class UEditMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolBuilder, UnknownData_UQG2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolBuilder, 0x0038);
		}

		// class UPolyEditCommonProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditCommonProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bSelectEdgeLoops, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_YHCC, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, LocalFrameMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_TUUF, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bLockRotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bSnapToWorldGrid, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_INLQ, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditCommonProperties, 0x0070);
		}

		// class UEditMeshPolygonsToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolActionPropertySet, UnknownData_0XM9, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActionPropertySet, 0x0068);
		}

		// class UEditMeshPolygonsToolActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions, 0x0068);
		}

		// class UEditMeshPolygonsToolActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions_Triangles, 0x0068);
		}

		// class UEditMeshPolygonsToolUVActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolUVActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolUVActions, 0x0068);
		}

		// class UEditMeshPolygonsToolEdgeActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions, 0x0068);
		}

		// class UEditMeshPolygonsToolEdgeActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions_Triangles, 0x0068);
		}

		// class UPolyEditExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, Direction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_BX53, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, bShellsToSolids, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_F8E7, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditExtrudeProperties, 0x0068);
		}

		// class UPolyEditOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOffsetProperties, bUseFaceNormals, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOffsetProperties, UnknownData_PSGK, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditOffsetProperties, 0x0068);
		}

		// class UPolyEditInsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditInsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, bReproject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, UnknownData_SKP4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, Softness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, bBoundaryOnly, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, UnknownData_4TIH, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, AreaScale, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditInsetProperties, 0x0070);
		}

		// class UPolyEditOutsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditOutsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, Softness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, bBoundaryOnly, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, UnknownData_Z5KD, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, AreaScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, UnknownData_GYM2, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditOutsetProperties, 0x0070);
		}

		// class UPolyEditCutProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditCutProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, Orientation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_85U0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, bSnapToVertices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_NSEX, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditCutProperties, 0x0068);
		}

		// class UPolyEditSetUVProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditSetUVProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, bShowMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, UnknownData_G0LA, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditSetUVProperties, 0x0068);
		}

		// class UEditMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_8IFC, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, DynamicMeshComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CommonProps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions_Triangles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions_Triangles, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditUVActions, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeProperties, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, OffsetProperties, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, InsetProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, OutsetProperties, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CutProperties, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SetUVProperties, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SelectionMechanic, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_TQTE, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, MultiTransformer, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_83EM, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditPreview, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_4K8U, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeHeightMechanic, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CurveDistMechanic, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SurfacePathMechanic, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_AP6Q, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsTool, 0x07D0);
		}

		// class UEditNormalsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolBuilder, UnknownData_D2B5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolBuilder, 0x0030);
		}

		// class UEditNormalsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bRecomputeNormals, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, NormalCalculationMethod, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bFixInconsistentNormals, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bInvertNormals, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SplitNormalMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_EVF8, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SharpEdgeAngleThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bAllowSharpVertices, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_55S4, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolProperties, 0x0070);
		}

		// class UEditNormalsAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsAdvancedProperties, 0x0060);
		}

		// class UEditNormalsOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__EditNormalsOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_ZO8H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_8QM6, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsOperatorFactory, 0x0040);
		}

		// class UEditNormalsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditNormalsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, Previews, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, UnknownData_MT6R, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsTool, 0x0100);
		}

		// class UEditPivotToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolBuilder, 0x0028);
		}

		// class UEditPivotToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, bEnableSnapDragging, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, RotationMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, UnknownData_M640, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolProperties, 0x0068);
		}

		// class UEditPivotToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_QVWY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, bUseWorldBox, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_CQ07, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolActionPropertySet, 0x0070);
		}

		// class UEditPivotTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditPivotTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_BIYS, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, TransformProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, EditPivotActions, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_UN3A, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, ActiveGizmos, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_5OOC, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotTool, 0x0200);
		}

		// class UEditUVIslandsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsToolBuilder, 0x0030);
		}

		// class UEditUVIslandsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_W7HZ, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, MaterialSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, CheckerMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, DynamicMeshComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, SelectionMechanic, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_KEP4, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, MultiTransformer, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_V761, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsTool, 0x0370);
		}

		// class UExtractCollisionGeometryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ExtractCollisionGeometryToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryToolBuilder, UnknownData_VKJD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExtractCollisionGeometryToolBuilder, 0x0030);
		}

		// class UExtractCollisionGeometryTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__ExtractCollisionGeometryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, VizSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, ObjectProps, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, PreviewElements, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, UnknownData_V879, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExtractCollisionGeometryTool, 0x0330);
		}

		// class UGroupEdgeInsertionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionToolBuilder, UnknownData_YTPG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionToolBuilder, 0x0030);
		}

		// class UGroupEdgeInsertionProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, InsertionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, UnknownData_PWWS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, bWireframe, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, UnknownData_9U0F, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, VertexTolerance, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionProperties, 0x0070);
		}

		// class UGroupEdgeInsertionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionOperatorFactory, UnknownData_G5JD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionOperatorFactory, Tool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionOperatorFactory, 0x0038);
		}

		// class UGroupEdgeInsertionTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, UnknownData_YCTF, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, Preview, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, UnknownData_YTDU, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionTool, 0x0550);
		}

		// class UHoleFillToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolBuilder, 0x0028);
		}

		// class USmoothHoleFillProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SmoothHoleFillProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, bConstrainToHoleInterior, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_5U20, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, RemeshingExteriorRegionWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, SmoothingExteriorRegionWidth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, SmoothingInteriorRegionWidth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, InteriorSmoothness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_Y8D6, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, FillDensityScalar, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, bProjectDuringRemesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_VZNQ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothHoleFillProperties, 0x0088);
		}

		// class UHoleFillToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, FillType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, bRemoveIsolatedTriangles, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, UnknownData_8OGA, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolProperties, 0x0068);
		}

		// class UHoleFillToolActions : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolActions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolActions, UnknownData_9ZJE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolActions, 0x0068);
		}

		// class UHoleFillStatisticsProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillStatisticsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, InitialHoles, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, SelectedHoles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, SuccessfulFills, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, FailedFills, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, RemainingHoles, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillStatisticsProperties, 0x00B0);
		}

		// class UHoleFillOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__HoleFillOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillOperatorFactory, UnknownData_0U36, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillOperatorFactory, FillTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillOperatorFactory, 0x0038);
		}

		// class UHoleFillTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__HoleFillTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, UnknownData_EBIZ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, SmoothHoleFillProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Properties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Actions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Statistics, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Preview, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, SelectionMechanic, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, UnknownData_GTW3, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillTool, 0x01E0);
		}

		// class UMeshSculptBrushOpProps : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSculptBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSculptBrushOpProps, 0x0060);
		}

		// class UBaseKelvinletBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BaseKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, Stiffness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, Incompressiblity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, BrushSteps, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, UnknownData_ICLO, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseKelvinletBrushOpProps, 0x0070);
		}

		// class UScaleKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ScaleKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleKelvinletBrushOpProps, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleKelvinletBrushOpProps, Falloff, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleKelvinletBrushOpProps, 0x0078);
		}

		// class UPullKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PullKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPullKelvinletBrushOpProps, Falloff, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPullKelvinletBrushOpProps, Depth, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPullKelvinletBrushOpProps, 0x0078);
		}

		// class USharpPullKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SharpPullKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpPullKelvinletBrushOpProps, Falloff, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpPullKelvinletBrushOpProps, Depth, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpPullKelvinletBrushOpProps, 0x0078);
		}

		// class UTwistKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__TwistKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwistKelvinletBrushOpProps, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwistKelvinletBrushOpProps, Falloff, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwistKelvinletBrushOpProps, 0x0078);
		}

		// class UMeshAnalysisProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAnalysisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, SurfaceArea, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, Volume, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAnalysisProperties, 0x0080);
		}

		// class UMeshAttributePaintToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolBuilder, UnknownData_UQPY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintToolBuilder, 0x0080);
		}

		// class UMeshAttributePaintToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, Attributes, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, SelectedAttribute, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, UnknownData_YMP6, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, AttributeName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintToolProperties, 0x0088);
		}

		// class UMeshAttributePaintEditActions : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintEditActions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintEditActions, UnknownData_WWA9, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintEditActions, 0x0068);
		}

		// class UMeshAttributePaintTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintTool, AttribProps, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintTool, UnknownData_6RCO, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintTool, 0x0630);
		}

		// class UMeshBoundaryToolBase : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MeshBoundaryToolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, UnknownData_MNSI, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, SelectionMechanic, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, LoopSelectClickBehavior, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, UnknownData_WXDT, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshBoundaryToolBase, 0x0150);
		}

		// class UInflateBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__InflateBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInflateBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInflateBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInflateBrushOpProps, 0x0068);
		}

		// class UMeshInspectorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorToolBuilder, 0x0028);
		}

		// class UMeshInspectorProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bBowtieVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bPolygonBorders, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bUVSeams, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bUVBowties, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalSeams, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalVectors, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bTangentVectors, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, UnknownData_UDZW, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, NormalLength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, TangentLength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, UnknownData_GCII, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorProperties, 0x0078);
		}

		// class UMeshInspectorTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, Settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, MaterialSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_WQ1U, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, DrawnLineSet, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, DefaultMaterial, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_6ENS, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorTool, 0x0128);
		}

		// class UNewMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__NewMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, Material, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UVScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWorldSpaceUVScale, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWireframe, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bShowExtendedOptions, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UnknownData_LN7W, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMeshMaterialProperties, 0x0070);
		}

		// class UExistingMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ExistingMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, MaterialMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, UnknownData_T2HR, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerDensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, OverrideMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerMaterial, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExistingMeshMaterialProperties, 0x0078);
		}

		// class UMeshEditingViewProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshEditingViewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_PB10, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, MaterialMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_1IS7, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bFlatShading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_X18L, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, Color, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_0BCB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, Image, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshEditingViewProperties, 0x0088);
		}

		// class UMoveBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__MoveBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, UnknownData_PY04, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveBrushOpProps, 0x0070);
		}

		// class UPinchBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PinchBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, bPerpDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, UnknownData_NJTX, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPinchBrushOpProps, 0x0070);
		}

		// class UBasePlaneBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BasePlaneBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePlaneBrushOpProps, 0x0060);
		}

		// class UPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, UnknownData_EQHT, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneBrushOpProps, 0x0070);
		}

		// class UViewAlignedPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ViewAlignedPlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, UnknownData_A9TV, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewAlignedPlaneBrushOpProps, 0x0070);
		}

		// class UFixedPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__FixedPlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, UnknownData_NMOI, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedPlaneBrushOpProps, 0x0070);
		}

		// class UStandardSculptBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__StandardSculptBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStandardSculptBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStandardSculptBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStandardSculptBrushOpProps, 0x0068);
		}

		// class UViewAlignedSculptBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ViewAlignedSculptBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedSculptBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedSculptBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewAlignedSculptBrushOpProps, 0x0068);
		}

		// class USculptMaxBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SculptMaxBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, MaxHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, bUseFixedHeight, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, UnknownData_5WU8, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, FixedHeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, UnknownData_826V, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptMaxBrushOpProps, 0x0078);
		}

		// class USculptBrushProperties : public UBrushBaseProperties
		TEST_METHOD(Class__MeshModelingTools__SculptBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, Depth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, bHitBackFaces, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, UnknownData_RIXS, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, Lazyness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, bShowPerBrushProps, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, UnknownData_B80W, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptBrushProperties, 0x0088);
		}

		// class UKelvinBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__KelvinBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, FalloffDistance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, Stiffness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, Incompressiblity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, BrushSteps, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKelvinBrushProperties, 0x0070);
		}

		// class UWorkPlaneProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__WorkPlaneProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bPropertySetEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bShowGizmo, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bSnapToGrid, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, UnknownData_RKWK, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, position, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, Rotation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorkPlaneProperties, 0x0080);
		}

		// class USculptMaxBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SculptMaxBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, MaxHeight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, bFreezeCurrentHeight, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, UnknownData_VUIL, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptMaxBrushProperties, 0x0068);
		}

		// class UMeshSculptToolBase : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__MeshSculptToolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, GizmoProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_30A4, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushOpPropSets, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_2HIQ, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, SecondaryBrushOpPropSets, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_CJ3W, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, ViewProperties, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, ActiveOverrideMaterial, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicator, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicatorMaterial, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicatorMesh, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, PlaneTransformGizmo, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, PlaneTransformProxy, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_K4ZU, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSculptToolBase, 0x09D8);
		}

		// class UMeshSelectionToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolBuilder, UnknownData_TEYM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolBuilder, 0x0038);
		}

		// class UMeshSelectionToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolActionPropertySet, UnknownData_B0TZ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolActionPropertySet, 0x0068);
		}

		// class UMeshSelectionEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionEditActions, 0x0068);
		}

		// class UMeshSelectionMeshEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionMeshEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionMeshEditActions, 0x0068);
		}

		// class UMeshSelectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, SelectionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_SZ1I, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, AngleTolerance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bHitBackFaces, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bShowWireframe, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_JWDO, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, FaceColorMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_QI85, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolProperties, 0x0070);
		}

		// class UMeshSelectionTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionProps, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionActions, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, EditActions, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, Selection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SpawnedActors, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, UnknownData_6U3K, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionTool, 0x04A0);
		}

		// class UBaseSmoothBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BaseSmoothBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSmoothBrushOpProps, 0x0060);
		}

		// class USmoothBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SmoothBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, UnknownData_XA3F, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothBrushOpProps, 0x0070);
		}

		// class USecondarySmoothBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SecondarySmoothBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, UnknownData_0346, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecondarySmoothBrushOpProps, 0x0070);
		}

		// class USmoothFillBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SmoothFillBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, UnknownData_GDER, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothFillBrushOpProps, 0x0070);
		}

		// class UFlattenBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__FlattenBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, UnknownData_C64I, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlattenBrushOpProps, 0x0070);
		}

		// class UEraseBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__EraseBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEraseBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEraseBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEraseBrushOpProps, 0x0068);
		}

		// class UMeshSpaceDeformerToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerToolBuilder, 0x0030);
		}

		// class USpaceDeformerOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__SpaceDeformerOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, UnknownData_RC57, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, SpaceDeformerTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceDeformerOperatorFactory, 0x0038);
		}

		// class UMeshSpaceDeformerTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, SelectedOperationType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_ZWGP, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpperBoundsInterval, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, LowerBoundsInterval, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ModifierPercent, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, bSnapToWorldGrid, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_CQEX, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, StateTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_RDNG, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, Preview, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_JWK2, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoCenter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_AQPT, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoOrientation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, IntervalGizmo, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformGizmo, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformProxy, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpIntervalSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, DownIntervalSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ForwardIntervalSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_GWA2, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerTool, 0x01C0);
		}

		// class UMeshStatisticsProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshStatisticsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, Mesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, UV, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, Attributes, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshStatisticsProperties, 0x0090);
		}

		// class UMeshVertexSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshVertexSculptToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexSculptToolBuilder, 0x0030);
		}

		// class UVertexBrushSculptProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VertexBrushSculptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, PrimaryBrushType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, PrimaryFalloffType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, bFreezeTarget, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, bSmoothErases, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, UnknownData_YSXV, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVertexBrushSculptProperties, 0x0068);
		}

		// class UMeshVertexSculptTool : public UMeshSculptToolBase
		TEST_METHOD(Class__MeshModelingTools__MeshVertexSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, SculptProperties, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, DynamicMeshComponent, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, UnknownData_5KI9, 0x09E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexSculptTool, 0x1230);
		}

		// class UMirrorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MirrorToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolBuilder, UnknownData_ETT7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolBuilder, 0x0030);
		}

		// class UMirrorToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MirrorToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, OperationMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bCropAlongMirrorPlaneFirst, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bWeldVerticesOnMirrorPlane, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bAllowBowtieVertexCreation, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bSnapToWorldGrid, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, CtrlClickBehavior, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bButtonsOnlyChangeOrientation, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bShowPreview, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, SaveMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, UnknownData_2NG9, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolProperties, 0x0070);
		}

		// class UMirrorOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__MirrorOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, UnknownData_ZX69, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, MirrorTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, UnknownData_1N91, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorOperatorFactory, 0x0040);
		}

		// class UMirrorToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MirrorToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolActionPropertySet, UnknownData_NB9W, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolActionPropertySet, 0x0068);
		}

		// class UMirrorTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MirrorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_IQ21, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, ToolActions, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, MeshesToMirror, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, Previews, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_9NZM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, PlaneMechanic, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_XNLF, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorTool, 0x0138);
		}

		// class UOffsetMeshToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, OffsetType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, UnknownData_C200, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, Distance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, bCreateShell, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, UnknownData_X7Y5, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshToolProperties, 0x0070);
		}

		// class UOffsetWeightMapSetProperties : public UWeightMapSetProperties
		TEST_METHOD(Class__MeshModelingTools__OffsetWeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetWeightMapSetProperties, MinDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetWeightMapSetProperties, UnknownData_0QDA, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetWeightMapSetProperties, 0x0088);
		}

		// class UIterativeOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__IterativeOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, Steps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, bOffsetBoundaries, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, UnknownData_M2A3, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, SmoothingPerStep, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, bReprojectSmooth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, UnknownData_JPCK, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIterativeOffsetProperties, 0x0070);
		}

		// class UImplicitOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ImplicitOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, Smoothness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, bPreserveUVs, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, UnknownData_IDDR, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImplicitOffsetProperties, 0x0068);
		}

		// class UOffsetMeshTool : public UBaseMeshProcessingTool
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, OffsetProperties, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, IterativeProperties, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, ImplicitProperties, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, WeightMapProperties, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshTool, 0x0420);
		}

		// class UOffsetMeshToolBuilder : public UBaseMeshProcessingToolBuilder
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshToolBuilder, 0x0028);
		}

		// class UPhysicsInspectorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__PhysicsInspectorToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsInspectorToolBuilder, 0x0028);
		}

		// class UPhysicsInspectorTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__PhysicsInspectorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, VizSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, ObjectData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, LineMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, PreviewElements, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, UnknownData_RY45, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsInspectorTool, 0x00D8);
		}

		// class UPlaneCutToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolBuilder, UnknownData_V4B4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolBuilder, 0x0030);
		}

		// class UAcceptOutputProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AcceptOutputProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, bExportSeparatedPiecesAsNewMeshAssets, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, UnknownData_XHYB, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAcceptOutputProperties, 0x0068);
		}

		// class UPlaneCutToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bSnapToWorldGrid, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bKeepBothHalves, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_TBOQ, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, SpacingBetweenHalves, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillCutHole, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bShowPreview, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillSpans, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_RYD9, 0x006B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolProperties, 0x0070);
		}

		// class UPlaneCutOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__PlaneCutOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_FGMG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, CutTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_9HB8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutOperatorFactory, 0x0040);
		}

		// class UPlaneCutTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__PlaneCutTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_JDQ9, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, AcceptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrigin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_FEV0, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrientation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, Previews, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, MeshesToCut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_MRBU, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformGizmo, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformProxy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_UP3E, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutTool, 0x0170);
		}

		// class UPositionPlaneGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmoBuilder, 0x0028);
		}

		// class UPositionPlaneGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_FGKM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallShape, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_EW1I, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmo, 0x0520);
		}

		// class UPositionPlaneOnSceneInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneOnSceneInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneOnSceneInputBehavior, UnknownData_UN3B, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneOnSceneInputBehavior, 0x00B0);
		}

		// class UProjectToTargetToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectToTargetToolBuilder, UnknownData_8D4Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetToolBuilder, 0x0030);
		}

		// class URemeshMeshToolProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetTriangleCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, SmoothingType, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bDiscardAttributes, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowWireframe, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowGroupColors, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, RemeshType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_W0OF, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, RemeshIterations, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bUseTargetEdgeLength, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_4F9C, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetEdgeLength, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bReproject, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_M3P9, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolProperties, 0x0090);
		}

		// class UProjectToTargetToolProperties : public URemeshMeshToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetToolProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetToolProperties, 0x0090);
		}

		// class URemeshMeshTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_UXBM, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, MeshStatisticsProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_I8ML, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshTool, 0x00E8);
		}

		// class UProjectToTargetTool : public URemeshMeshTool
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectToTargetTool, UnknownData_IQU5, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetTool, 0x00F8);
		}

		// class URemeshMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolBuilder, UnknownData_K68J, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolBuilder, 0x0030);
		}

		// class URemoveOccludedTrianglesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolBuilder, UnknownData_TXVH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolBuilder, 0x0030);
		}

		// class URemoveOccludedTrianglesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, OcclusionTestMethod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, TriangleSampling, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_T3RE, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, WindingIsoValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddRandomRays, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddTriangleSamples, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, bOnlySelfOcclude, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_CG71, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolProperties, 0x0080);
		}

		// class URemoveOccludedTrianglesAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesAdvancedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesAdvancedProperties, UnknownData_2XRL, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesAdvancedProperties, 0x0068);
		}

		// class URemoveOccludedTrianglesOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_9D11, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_POBV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesOperatorFactory, 0x0040);
		}

		// class URemoveOccludedTrianglesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, Previews, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, PreviewCopies, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, UnknownData_OBUN, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesTool, 0x0150);
		}

		// class URevolveBoundaryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolBuilder, UnknownData_J6ZP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryToolBuilder, 0x0030);
		}

		// class URevolveBoundaryOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryOperatorFactory, UnknownData_CJGK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryOperatorFactory, RevolveBoundaryTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryOperatorFactory, 0x0038);
		}

		// class URevolveBoundaryToolProperties : public URevolveProperties
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, bDisplayOriginalMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, UnknownData_AFE2, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisOrigin, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisYaw, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisPitch, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, bSnapToWorldGrid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, UnknownData_7S0G, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryToolProperties, 0x00D0);
		}

		// class URevolveBoundaryTool : public UMeshBoundaryToolBase
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, UnknownData_GO3D, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, Settings, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, MaterialProperties, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, PlaneMechanic, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, Preview, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, UnknownData_8IVG, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryTool, 0x01B0);
		}

		// class USeamSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SeamSculptToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptToolBuilder, 0x0030);
		}

		// class USeamSculptToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SeamSculptToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, bHitBackFaces, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, UnknownData_7UYT, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptToolProperties, 0x0068);
		}

		// class USeamSculptTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__SeamSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, PreviewGeom, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, UnknownData_7Y6E, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptTool, 0x02E0);
		}

		// class USelfUnionMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bAttemptFixHoles, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bShowNewBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bTrimFlaps, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, UnknownData_POJV, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, WindingNumberThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bOnlyUseFirstMeshMaterials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, UnknownData_4ZUS, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesToolProperties, 0x0078);
		}

		// class USelfUnionMeshesTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, Properties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, DrawnLineSet, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, UnknownData_ORNH, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesTool, 0x0120);
		}

		// class USelfUnionMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesToolBuilder, 0x0030);
		}

		// class USetCollisionGeometryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryToolBuilder, 0x0028);
		}

		// class USetCollisionGeometryToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, GeometryType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_249M, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, InputMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_G8Q0, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bUseWorldSpace, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bRemoveContained, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bEnableMaxCount, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_E9IN, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, MaxCount, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, MinThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectBoxes, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectSpheres, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectCapsules, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bSimplifyHulls, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, HullTargetFaceCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bSimplifyPolygons, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_PDYG, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, HullTolerance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, SweepAxis, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_S6EZ, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bAppendToExisting, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_4CCD, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, SetCollisionType, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_U267, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryToolProperties, 0x0090);
		}

		// class USetCollisionGeometryTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, Settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, VizSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, CollisionProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, LineMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, PreviewGeom, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, UnknownData_R55I, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryTool, 0x01C0);
		}

		// class USmoothMeshToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshToolProperties, SmoothingType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshToolProperties, UnknownData_6MFL, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshToolProperties, 0x0068);
		}

		// class UIterativeSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__IterativeSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, SmoothingPerStep, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, Steps, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, bSmoothBoundary, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, UnknownData_HJ60, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIterativeSmoothProperties, 0x0070);
		}

		// class UDiffusionSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DiffusionSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, SmoothingPerStep, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, Steps, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, bPreserveUVs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, UnknownData_DQ7R, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDiffusionSmoothProperties, 0x0070);
		}

		// class UImplicitSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ImplicitSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, SmoothSpeed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, Smoothness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, bPreserveUVs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, UnknownData_00XZ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, VolumeCorrection, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImplicitSmoothProperties, 0x0070);
		}

		// class USmoothWeightMapSetProperties : public UWeightMapSetProperties
		TEST_METHOD(Class__MeshModelingTools__SmoothWeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothWeightMapSetProperties, MinSmoothMultiplier, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothWeightMapSetProperties, UnknownData_A0AC, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothWeightMapSetProperties, 0x0088);
		}

		// class USmoothMeshTool : public UBaseMeshProcessingTool
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, SmoothProperties, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, IterativeProperties, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, DiffusionProperties, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, ImplicitProperties, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, WeightMapProperties, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, UnknownData_H1TR, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshTool, 0x0430);
		}

		// class USmoothMeshToolBuilder : public UBaseMeshProcessingToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshToolBuilder, 0x0028);
		}

		// class UTransformMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolBuilder, 0x0028);
		}

		// class UTransformMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, TransformMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bSetPivot, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bEnableSnapDragging, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, SnapDragSource, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, RotationMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, UnknownData_3N4C, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolProperties, 0x0068);
		}

		// class UTransformMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_X5DX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, TransformProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_W3ZB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, ActiveGizmos, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_Y81Q, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesTool, 0x0140);
		}

		// class UUVProjectionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolBuilder, UnknownData_H6KY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolBuilder, 0x0030);
		}

		// class UUVProjectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVProjectionMethod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_J4YW, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, ProjectionPrimitiveScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, CylinderProjectToTopOrBottomAngleThreshold, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVOffset, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, bWorldSpaceUVScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_4IMR, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolProperties, 0x0088);
		}

		// class UUVProjectionAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionAdvancedProperties, 0x0060);
		}

		// class UUVProjectionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__UVProjectionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_CG5A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_MA20, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionOperatorFactory, 0x0040);
		}

		// class UUVProjectionTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__UVProjectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, MaterialSettings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, Previews, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, CheckerMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformGizmos, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformProxies, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, UnknownData_U3SQ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionTool, 0x0220);
		}

		// class UVoxelBlendMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, BlendPower, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, BlendFalloff, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, bSolidifyInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, bRemoveInternalsAfterSolidify, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, UnknownData_UUQF, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, OffsetSolidifySurface, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesToolProperties, 0x0080);
		}

		// class UVoxelBlendMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesTool, BlendProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesTool, 0x0110);
		}

		// class UVoxelBlendMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesToolBuilder, 0x0030);
		}

		// class UVoxelMorphologyMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, Operation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, UnknownData_9Z9Q, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, Distance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, bSolidifyInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, bRemoveInternalsAfterSolidify, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, UnknownData_S3F1, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, OffsetSolidifySurface, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesToolProperties, 0x0080);
		}

		// class UVoxelMorphologyMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesTool, MorphologyProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesTool, 0x0110);
		}

		// class UVoxelMorphologyMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesToolBuilder, 0x0030);
		}

		// class UVoxelSolidifyMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, WindingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, ExtendBounds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, SurfaceSearchSteps, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, bSolidAtBoundaries, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, bMakeOffsetSurfaces, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, UnknownData_UAWE, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, OffsetThickness, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesToolProperties, 0x0080);
		}

		// class UVoxelSolidifyMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesTool, SolidifyProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesTool, 0x0110);
		}

		// class UVoxelSolidifyMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesToolBuilder, 0x0030);
		}

		// class UWeldMeshEdgesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesToolBuilder, 0x0028);
		}

		// class UWeldMeshEdgesTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, Tolerance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, bOnlyUnique, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, UnknownData_NGZK, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesTool, 0x0300);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnabledByDefault, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_B6TA, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_1L1J, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_PN9X, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_6F6T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_EYZ7, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_5D2X, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0480);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_1WA8, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_DT67, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_9SZM, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_CYCN, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_KYSH, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_S1XN, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_FPSE, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_H61A, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_343U, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_WOXR, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_8716, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_7I9O, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_5II1, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_72OV, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_NAID, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_SMI8, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_NFBV, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_1241, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_LD8M, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_GYAA, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_SDTL, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_XGWU, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_P3UW, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_5EBV, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_X60D, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterialOverride, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_GH18, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_HA50, 0x0685);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableReplication, 0x069A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableAbandonAfterLevel, 0x069B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ReplicationAbandonClusterLevel, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RepData, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_5NFG, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_0RV8, 0x08D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x0900);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_PYCQ, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_ZKZN, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_7PC7, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_5IO4, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_V0MV, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_A7XR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, GeometrySource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_7XR4, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_OTFG, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_8QF9, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_8KNQ, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_HUP7, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00E0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_VPH3, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_G7EX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_9FSY, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_NGM5, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_A7JB, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_7YB8, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_2LS9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_Z1XK, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_I6CN, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_M2CJ, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_X8GU, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_65R1, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_FL10, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class AText3DActor : public AActor
		TEST_METHOD(Class__Text3D__Text3DActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AText3DActor, Text3DComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AText3DActor, 0x0228);
		}

		// class UText3DCharacterTransform : public USceneComponent
		TEST_METHOD(Class__Text3D__Text3DCharacterTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, UnknownData_CKWH, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, LocationProgress, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, LocationOrder, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, UnknownData_3GM1, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, LocationRange, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, LocationDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, bScaleEnabled, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, UnknownData_F3K4, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, ScaleProgress, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, ScaleOrder, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, UnknownData_PHN1, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, ScaleRange, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, ScaleBegin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, ScaleEnd, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, bRotateEnabled, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, UnknownData_N0OA, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, RotateProgress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, RotateOrder, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, UnknownData_8CT9, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, RotateRange, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, RotateBegin, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, RotateEnd, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DCharacterTransform, UnknownData_SB3M, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UText3DCharacterTransform, 0x0270);
		}

		// class UText3DComponent : public USceneComponent
		TEST_METHOD(Class__Text3D__Text3DComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, Text, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, Extrude, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, Bevel, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, BevelType, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, UnknownData_VQZ9, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, BevelSegments, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, bOutline, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, UnknownData_8EOP, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, FrontMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, BevelMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, ExtrudeMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, BackMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, Font, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, HorizontalAlignment, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, VerticalAlignment, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, UnknownData_HV68, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, Kerning, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, LineSpacing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, WordSpacing, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, bHasMaxWidth, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, UnknownData_EPRV, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, MaxWidth, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, bHasMaxHeight, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, UnknownData_VZG5, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, MaxHeight, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, bScaleProportionally, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, UnknownData_O3D0, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, TextRoot, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, UnknownData_3RWQ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, CharacterKernings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DComponent, CharacterMeshes, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UText3DComponent, 0x02E0);
		}

		// class UText3DEngineSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__Text3D__Text3DEngineSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DEngineSubsystem, DefaultMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DEngineSubsystem, CachedFonts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UText3DEngineSubsystem, UnknownData_9HLW, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UText3DEngineSubsystem, 0x0090);
		}

		// class ABP_Pickup_GTA3_C : public ABP_Pickup_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Pickup_GTA3__BP_Pickup_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pickup_GTA3_C, 0x02E0);
		}

		// class ABP_GameScalability_C : public AGTAScalability
		TEST_METHOD(BlueprintGeneratedClass__BP_GameScalability__BP_GameScalability_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GameScalability_C, DefaultSceneRoot, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GameScalability_C, SkyBP, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GameScalability_C, MobileNightBoost, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GameScalability_C, 0x03D4);
		}

		// class UTimeOfDayPreset_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__TimeOfDayPreset__TimeOfDayPreset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayPreset_C, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayPreset_C, 0x00CC);
		}

		// class ABP_FastStylizedProceduralSky_C : public AGTAActor
		TEST_METHOD(BlueprintGeneratedClass__BP_FastStylizedProceduralSky__BP_FastStylizedProceduralSky_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UberGraphFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, Dummy, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, DefaultSceneRoot, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningTimeline__Direction_F96B14EF4E637E770014A3B52D13E35A, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_RMXM, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningTimeline, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDay, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_ORFG, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayCurves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDaySettings, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonDirection, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunHeight, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherSettings, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_QK3W, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyMaterialInst, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyMaterial, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunLightSource, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonLightSource, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, HeightFog, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLight, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, Saturation, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsBloom, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsFluffy, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVHorizon, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVRoundness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVScale, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, FogDirectionalInScattering, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, FogDensity, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVBaseLayerPosition, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVBaseLayerSize, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVSecondLayerSize, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVSecondLayerPosition, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsLayer1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsLayer2, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, HorizonTilt, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WindForce, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunRadius, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunShine, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunSaturation, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunMaxAltitude, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunAzimuth, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunVisibleDuration, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunDirectionTimeOfDay, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_Y234, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunDirection, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, StarsBrightness, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonBightness, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonRadius, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonClouds, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonShine, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonRoll, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonVisibleDuration, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonSyncedToSun, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_W205, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonRotation, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonChangeSpeed, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldRotation, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldRotationSpeed, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_FWCV, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerTexture, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerFog, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerDepth, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerColor, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightRecaptureTime, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_LSZ3, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowMaterial, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowScale, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowSoft, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowMaterialInst, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, Version, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_BVKP, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningEpicenter, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningIterations, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightIntensity, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightLightning, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UseWorldSpaceRotation, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_13S8, 0x05BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, OnLightningPlayed, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightCurve, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunShineFactor, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunContributionToFog, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MobileNightBoost, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, AutoExposureBase, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GTAPostProcess, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FastStylizedProceduralSky_C, 0x05F8);
		}

		// class UUI_ConfirmationDialog_Fullscreen_GTA3_Mission_C : public UUI_ConfirmationDialog_FullScreen_GTA3_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ConfirmationDialog_Fullscreen_GTA3_Mission__UI_ConfirmationDialog_Fullscreen_GTA3_Mission_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmationDialog_Fullscreen_GTA3_Mission_C, UberGraphFrame, 0x0D48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ConfirmationDialog_Fullscreen_GTA3_Mission_C, 0x0D50);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x06A0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_1KRO, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TSXW, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_MZGK, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_9YB8, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YDOG, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_DSE4, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_9A18, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_E7NE, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_HRDJ, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_IV6R, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QD1G, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_H2WM, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_9NUM, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_VT5Z, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QP5U, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilWriteMask, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TOPK, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YSH4, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_F0A5, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_91C7, 0x03A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x03A8);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_6SY1, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x03B8);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x03C8);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_33U5, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_TOU3, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_QEFZ, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04E0);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_4CC6, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_J69A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_GII2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_O500, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_XBAM, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// class UCreditsTransition_Base_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditsTransition_Base__CreditsTransition_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, UnknownData_XJ0Z, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, BlockingButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, CreditBox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, CreditSizeBox, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, FadeIn1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, FadeIn2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, Image1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, LineNumberStarted, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, NumCreditsRemoved, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, CreditArray, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, LastVerticalCreditSize, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, DidJustChangeCreditSize, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, UnknownData_R39N, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, ScrollingSpeed, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, TotalVerticalSize, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, DefaultFont, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, FontSize, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, AllKnownFormats, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, EmptyTextFormats, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, DidAddLastCredit, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, UnknownData_84O2, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, NumOriginalCredits, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, RockStarCreditArray, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, TechnicolorCreditArray, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, EfectoCreditArray, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, DidStartFinalFade, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, UnknownData_VUJA, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsTransition_Base_C, OriginalFade0Time, 0x042C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsTransition_Base_C, 0x0430);
		}

		// class UUI_HUDItem_Wasted_GTA3_C : public UUI_HUDItem_FullScreenText_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_Wasted_GTA3__UI_HUDItem_Wasted_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Wasted_GTA3_C, UberGraphFrame, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Wasted_GTA3_C, Image_375, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Wasted_GTA3_C, RichText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Wasted_GTA3_C, TextScaleBox, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_Wasted_GTA3_C, 0x0308);
		}

		// class UUI_Button_Menu_GTA3_C : public UUI_Button_Menu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_Menu_GTA3__UI_Button_Menu_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_Menu_GTA3_C, 0x0671);
		}

		// class UUI_OptionsMenuTab_Game_C : public UUI_OptionsMenuTab_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_OptionsMenuTab_Game__UI_OptionsMenuTab_Game_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_Game_C, UberGraphFrame, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_Game_C, SaveTabName, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenuTab_Game_C, SaveTabContent, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_OptionsMenuTab_Game_C, 0x05E8);
		}

		// class UMacrosForDesignTimeUserWidget_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(BlueprintGeneratedClass__MacrosForDesignTimeUserWidget__MacrosForDesignTimeUserWidget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMacrosForDesignTimeUserWidget_C, 0x0290);
		}

		// class UUI_SocialClub_MainScreen_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SocialClub_MainScreen__UI_SocialClub_MainScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, FocusButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, Image_73, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, JoinText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, SCAvailableText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, UnavailableCanvas, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, PlayHoverSound, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, PlayInteractSound, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, ButtonStyle, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, ButtonText, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, DidConstruct, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, DidStartLayout, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, UnknownData_DPQX, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, ButtonFunction, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, LastSelectedWidgetIndex, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, WasUsingController, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, UnknownData_DX6P, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, ButtonShowOnSignedIn, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, WasLoggedIn, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, UnknownData_X2E6, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SocialClub_MainScreen_C, ParentSocialClub, 0x0359);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SocialClub_MainScreen_C, 0x0388);
		}

		// class UUI_SlotButton_CenterMessage_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_CenterMessage__UI_SlotButton_CenterMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, UberGraphFrame, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, MainButton, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, MainSizeBox, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, OptionNameText, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, ScaleBox_1, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, HorizontalAlignment, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, UnknownData_B95O, 0x0601);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_CenterMessage_C, TextPadding, 0x0604);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_CenterMessage_C, 0x0614);
		}

		// class UUI_SlotButton_Message_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_Message__UI_SlotButton_Message_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, UberGraphFrame, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, LeftScale, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, MainButton, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, MainSizeBox, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, OptionNameText, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, RightScale, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, RightText, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, JustLeftMessage, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Message_C, DidConstruct, 0x0611);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_Message_C, 0x0612);
		}

		// class ABP_GameScalability_Switch_C : public ABP_GameScalability_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GameScalability_Switch__BP_GameScalability_Switch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GameScalability_Switch_C, 0x03D4);
		}

		// class UGTA3Interface : public UGameterface
		TEST_METHOD(Class__GTA3__GTA3Interface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGTA3Interface, UnknownData_VTRQ, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTA3Interface, 0x0780);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_JE01, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_7UWF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_F5HE, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_SOE3, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_RXE9, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UDeveloperSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, FavoriteTagSource, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0050);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_I1HK, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_M5E5, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_5WZI, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_PHPC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_VHHZ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0060);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_EXUX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_22SI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_WDLE, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_QXDR, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_902G, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_QS24, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_M3FJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_W6JI, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_3OOG, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, WorldToLocalScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_G5M5, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01C0);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_7COI, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_ICIC, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0078);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_R89B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_MOJA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_LCTI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_FSQS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_PLCF, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_LPNY, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_G7DN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_KL1P, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_4S7K, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_2W26, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_F6IG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_HUGH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_Y1CX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_3K51, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_OAQY, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_K96D, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_B9IO, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_EFIL, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_91GO, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_08U3, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_E6YF, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_PF4I, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_9MST, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0468);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_XYPW, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0490);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_XDON, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_WN27, 0x04A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x04B0);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_QM65, 0x0482);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0490);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_0FT4, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0490);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_1AGC, 0x0495);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x04A0);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_FXIY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_A1D7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_QHK0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_NZM3, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_5LJ9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_J3KT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_2U2S, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_W82J, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_5Q74, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_3EXM, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_CX9G, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_DZ82, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_YHRS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_JCOX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_8O7D, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_9ARN, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_7TA3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_PM3R, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_X6JQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_TQGH, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_GUQ2, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_4F8Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_WAS0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_BICK, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_JFYK, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_UM4R, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_7AWK, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_O2AA, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x0110);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_CXU8, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_M69J, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_8MXN, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_BZ3O, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_4RGV, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_EJBN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_W1DC, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_D06S, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_WW8H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_ZKPP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_IWLK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_X4AJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_LOY6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_IQBX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_QTTD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bGridSizeIsExplicit, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_N1MD, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitGridSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bRotationGridSizeIsExplicit, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_AJOR, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitRotationGridSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldRotGrid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_7XTJ, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_TT8A, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_25OP, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_CDFB, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_5J0P, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x01A0);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_RSGY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_2LSG, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_3LF3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_SYBU, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_MMVA, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class UDLSSOverrideSettings : public UObject
		TEST_METHOD(Class__DLSS__DLSSOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSOverrideSettings, EnableDLSSInEditorViewportsOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSOverrideSettings, EnableScreenpercentageManipulationInDLSSEditorViewportsOverride, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSOverrideSettings, EnableDLSSInPlayInEditorViewportsOverride, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSOverrideSettings, bShowDLSSIncompatiblePluginsToolsWarnings, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSOverrideSettings, ShowDLSSSDebugOnScreenMessages, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSOverrideSettings, UnknownData_H2LJ, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDLSSOverrideSettings, 0x0030);
		}

		// class UDLSSSettings : public UObject
		TEST_METHOD(Class__DLSS__DLSSSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bEnableDLSSD3D12, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bEnableDLSSD3D11, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bEnableDLSSVulkan, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bEnableDLSSInEditorViewports, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bEnableScreenpercentageManipulationInDLSSEditorViewports, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bEnableDLSSInPlayInEditorViewports, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bShowDLSSSDebugOnScreenMessages, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, UnknownData_7CCE, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, GenericDLSSBinaryPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bGenericDLSSBinaryExists, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, UnknownData_L227, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, NVIDIANGXApplicationId, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, CustomDLSSBinaryPath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, bCustomDLSSBinaryExists, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLSSSettings, UnknownData_9QWT, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDLSSSettings, 0x0060);
		}

		// class UDLSSLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DLSSBlueprint__DLSSLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDLSSLibrary, 0x0028);
		}

		// class UDefaults_Console_Switch_C : public UDefaults_Console_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_Switch__Defaults_Console_Switch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_Switch_C, 0x0148);
		}

		// class ABP_COL_Tree_C : public ABP_COL_Prop_C
		TEST_METHOD(BlueprintGeneratedClass__BP_COL_Tree__BP_COL_Tree_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_COL_Tree_C, UberGraphFrame, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_COL_Tree_C, 0x02E8);
		}

		// class ABP_BloodPool_C : public AGTABloodPool
		TEST_METHOD(BlueprintGeneratedClass__BP_BloodPool__BP_BloodPool_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, BloodDecal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, Scene, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, IsScalingUp, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, UnknownData_DAFN, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, FadeInPerSecond, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, IsFadingOut, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, UnknownData_EJJ8, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, DynamicMaterial, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPool_C, FadeOutPerSecond, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BloodPool_C, 0x02DC);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_D659, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_GY2K, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_TTZC, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_9KC6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UUI_HUDItem_MultiLineLargeText_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_MultiLineLargeText__UI_HUDItem_MultiLineLargeText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, UnknownData_N5NE, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, MainCanvas, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, RichText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, OverrideTextStyleSet, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, ExtraItem, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, ExtraText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, DefaultFont, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, TestString, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, TextAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, UnknownData_DCU2, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_MultiLineLargeText_C, LastScaledText, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_MultiLineLargeText_C, 0x0390);
		}

		// class UUI_HUD_Radar_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_Radar__UI_HUD_Radar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, UnknownData_4I2K, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, Hide, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, Show, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, ButtonCanvas, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite0, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite10, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite11, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite12, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite13, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite14, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite15, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite16, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite17, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite18, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite19, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite20, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite21, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite22, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite23, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite24, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite25, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite26, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite27, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite28, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite29, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite30, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite31, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite4, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite6, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite7, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite8, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, EdgeSprite9, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, HeightBar, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, HeightProgress, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, HeightSlider, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, Icon, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, Sprites, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, MarginScale, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, MapAlpha, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, NormalRadar, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, InteriorRadar, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, AltimeterTint, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_C, DefaultSpriteZOrder, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_Radar_C, 0x0464);
		}

		// class UTransition_Wasted_Base_C : public UTransition_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_Wasted_Base__Transition_Wasted_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, UnknownData_CXPW, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, BlockingButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, FadeIn1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, FadeIn2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, Image1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, StartingColor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, MainScreenBP, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, TextOverlayBP, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, CreatedUserWidget, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, missionText, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Wasted_Base_C, MissionTextColor, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_Wasted_Base_C, 0x0348);
		}

		// class ULoadingProgressBar_GTA3_C : public ULoadingProgressBar_base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__LoadingProgressBar_GTA3__LoadingProgressBar_GTA3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingProgressBar_GTA3_C, 0x02A8);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_COE7, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_PPEM, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_W6B9, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_HPW3, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_BION, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06C0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_JPUC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class UQuartzClockHandle : public UObject
		TEST_METHOD(Class__AudioMixer__QuartzClockHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzClockHandle, UnknownData_HRZI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzClockHandle, 0x0190);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_9N3X, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0130);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_T55T, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x00B0);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_095U, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x0110);
		}

		// class UQuartzSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__AudioMixer__QuartzSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzSubsystem, UnknownData_PE0V, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzSubsystem, 0x0080);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_FOU3, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x03E0);
		}

		// class UUI_HUDItem_Base_C : public UUI_GTAHUDItem
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_Base__UI_HUDItem_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Base_C, UberGraphFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Base_C, UnknownData_78LG, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Base_C, LastInPos, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Base_C, LastViewportSize, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Base_C, DrawOffset, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_Base_C, 0x02CC);
		}

		// class ULegalScreen_Stinger_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegalScreen_Stinger__LegalScreen_Stinger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MainCanvas, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MovieImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, TopBlockingImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, DidStartMovie, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, UnknownData_T2DG, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MediaPlayer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, spawnedSoundActor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MediaSound, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, First_Tick, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, UnknownData_8YAE, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, WasPlayingLastTick, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MediaTexture, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MediaSource, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MovieError, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, UnknownData_59MA, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, LowQualityMediaSource, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Stinger_C, MovieObject, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegalScreen_Stinger_C, 0x0300);
		}

		// class UUI_MenuBackground_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MenuBackground__UI_MenuBackground_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuBackground_C, UberGraphFrame, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MenuBackground_C, 0x0298);
		}

		// class ABP_Radar_Base_C : public AGTARadar
		TEST_METHOD(BlueprintGeneratedClass__BP_Radar_Base__BP_Radar_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Radar_Base_C, UberGraphFrame, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Radar_Base_C, 0x0688);
		}

		// class UUI_MenuBackground_3Pause_C : public UUI_MenuBackground_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MenuBackground_3Pause__UI_MenuBackground_3Pause_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuBackground_3Pause_C, ColorBackground, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MenuBackground_3Pause_C, 0x02A0);
		}

		// class UUI_UserInfo_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_UserInfo__UI_UserInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UserInfo_C, PlayerImage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UserInfo_C, PlayerImageScaleBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UserInfo_C, UserNameText, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_UserInfo_C, 0x02A8);
		}

		// class UUI_HUD_RadioWheel_GTA3_C : public UUI_HUD_RadioWheel_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_RadioWheel_GTA3__UI_HUD_RadioWheel_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_RadioWheel_GTA3_C, UberGraphFrame, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_RadioWheel_GTA3_C, 0x0660);
		}

		// class USimpleControllerMappingText_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SimpleControllerMappingText__SimpleControllerMappingText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleControllerMappingText_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleControllerMappingText_C, Scale, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleControllerMappingText_C, Text, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleControllerMappingText_C, HorizontalAlignment, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleControllerMappingText_C, VerticalAlignment, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleControllerMappingText_C, ButtonValue, 0x02AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleControllerMappingText_C, 0x02AB);
		}

		// class ULanguageOptions_C : public UUI_OptionsList_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__LanguageOptions__LanguageOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULanguageOptions_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULanguageOptions_C, 0x0538);
		}

		// class ABP_NoCapture_SSR_C : public AGTARTCaptureBase
		TEST_METHOD(BlueprintGeneratedClass__BP_NoCapture_SSR__BP_NoCapture_SSR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoCapture_SSR_C, 0x0330);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UGenlockedCustomTimeStep : public UFixedFrameRateCustomTimeStep
		TEST_METHOD(Class__TimeManagement__GenlockedCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedCustomTimeStep, 0x0030);
		}

		// class UGenlockedTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__TimeManagement__GenlockedTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, bUseGenlockToCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, UnknownData_C9JO, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedTimecodeProvider, 0x0058);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_G7GU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_MCF9, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_1N0X, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_0O5W, 0x045E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_1BE2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_I3T2, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0500);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_H7H0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_P7B1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_LX6D, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_5NAK, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_Y661, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_H4TK, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_VLPA, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_14RA, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_90WA, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_IA46, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_6B7J, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_SHO3, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_KL5D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_X26S, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_UDU4, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_R9JN, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_OVNW, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_OLM1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_TOK5, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_ZDVK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_13ZH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_YP11, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_5NEL, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_8PK7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_O1I1, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_7GZA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_4AHO, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_OS14, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_EHQY, 0x010F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0110);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_38I3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class UUI_HUDScalableText_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDScalableText__UI_HUDScalableText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDScalableText_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDScalableText_C, MainScalableText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDScalableText_C, TextScaleBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDScalableText_C, Font, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDScalableText_C, 0x0300);
		}

		// class UAdjustableControls_ListeningDialog_C : public UConfirmationDialog_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__AdjustableControls_ListeningDialog__AdjustableControls_ListeningDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_ListeningDialog_C, UnknownData_MVT8, 0x0C46);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableControls_ListeningDialog_C, UberGraphFrame, 0x0C48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdjustableControls_ListeningDialog_C, 0x0C50);
		}

		// class UUI_OptionsList_SaveGame_C : public UUI_OptionsList_Game_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_OptionsList_SaveGame__UI_OptionsList_SaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsList_SaveGame_C, UberGraphFrame, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_OptionsList_SaveGame_C, 0x0558);
		}

		// class ABP_COL_Prop_Tree_Oak_01_Fall_C : public ABP_COL_Tree_C
		TEST_METHOD(BlueprintGeneratedClass__BP_COL_Prop_Tree_Oak_01_Fall__BP_COL_Prop_Tree_Oak_01_Fall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_COL_Prop_Tree_Oak_01_Fall_C, 0x02E8);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__DeveloperSettings__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_LZPP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UUI_Button_Option_SA_C : public UUI_Button_Option_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_Option_SA__UI_Button_Option_SA_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_Option_SA_C, 0x0671);
		}

		// class UGameplayOptions_C : public UUI_OptionsList_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameplayOptions__GameplayOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayOptions_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayOptions_C, 0x0538);
		}

		// class UUI_Stats_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Stats__UI_Stats_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, Background, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, TopMessage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, UI_ScrollingSlotList, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, TopStatSize, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, UnknownData_SDBY, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, SlotClass, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, ScrollBoxStyle, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, CategoryClass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, PendingStatCreation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, DidConstruct, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, UnknownData_FTCY, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_C, Categories, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Stats_C, 0x0478);
		}

		// class UUI_SC_Achivements_C : public UUI_ScrollingSlotList_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SC_Achivements__UI_SC_Achivements_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SC_Achivements_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SC_Achivements_C, DidConstructAchivements, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SC_Achivements_C, 0x0511);
		}

		// class USC_Achievement_Button_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SC_Achievement_Button__SC_Achievement_Button_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, UberGraphFrame, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, AchivementImage, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, BGImage, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, Description, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, Image_80, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, LockedOverlay, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, SlotButton, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_Achievement_Button_C, Title, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USC_Achievement_Button_C, 0x0618);
		}

		// class ULoadingProgressBar_base_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LoadingProgressBar_base__LoadingProgressBar_base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar_base_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar_base_C, Image_80, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar_base_C, LoadingBar, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar_base_C, TitleImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar_base_C, ProgressBarBackgroundColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar_base_C, ProgressBarFillColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar_base_C, TitleTexture, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingProgressBar_base_C, 0x02A8);
		}

		// class UUI_Stats_GTA3_C : public UUI_Stats_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Stats_GTA3__UI_Stats_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_GTA3_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Stats_GTA3_C, TopStatSize_1, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Stats_GTA3_C, 0x0484);
		}

		// class UUI_ScrollingSlotList_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ScrollingSlotList__UI_ScrollingSlotList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, MainScrollBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, ScrollingCanvas, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, EmptyButtonType, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, HasConstructed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, UnknownData_YHNX, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, ParentTabbedLayout, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, SlotStyle, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, RunInitOnConstruct, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, UnknownData_RETN, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, LastUserSelectedWidget, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, SlotClasses, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, InteractSlotButtonSound, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, OverrideSlotFocus, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, DidClearMouseFocus, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, UnknownData_7L7H, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, OnSelectedTab, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, OnDeselectedTab, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, bUseHapticNavigation, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, bUseHapticInteract, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, UnknownData_9W3V, 0x04DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, ScrollbarThickness, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, ScrollBarVisibility, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, UnknownData_PLU1, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, VersionString, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ScrollingSlotList_C, VersionClass, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ScrollingSlotList_C, 0x0508);
		}

		// class UUniversalGameSettings_C : public UGameterSettings
		TEST_METHOD(BlueprintGeneratedClass__UniversalGameSettings__UniversalGameSettings_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniversalGameSettings_C, 0x0320);
		}

		// class UDefaults_Console_PS4_C : public UDefaults_Console_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Console_PS4__Defaults_Console_PS4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Console_PS4_C, 0x0148);
		}

		// class UDefaults_Mobile_C : public UDefaults_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Defaults_Mobile__Defaults_Mobile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaults_Mobile_C, 0x0148);
		}

		// class UUI_HUD_Radar_GTA3_C : public UUI_HUD_Radar_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_Radar_GTA3__UI_HUD_Radar_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_GTA3_C, UnknownData_UEP7, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Radar_GTA3_C, UberGraphFrame, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_Radar_GTA3_C, 0x0470);
		}

		// class URadioWheelItem_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RadioWheelItem__RadioWheelItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, Background, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, MainCanvas, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, MainImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, MainSizeBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, MainText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, RingBackground, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, Colors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioWheelItem_C, TextValue, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioWheelItem_C, 0x03C0);
		}

		// class ABP_Explosion_Small_C : public ABP_Explosion_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Explosion_Small__BP_Explosion_Small_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Explosion_Small_C, 0x0288);
		}

		// class UControllerUI_XBoxOne_C : public UControllerUI_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControllerUI_XBoxOne__ControllerUI_XBoxOne_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerUI_XBoxOne_C, 0x0450);
		}

		// class ABP_ExteriorHeightFog_C : public ABP_HeightFog_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ExteriorHeightFog__BP_ExteriorHeightFog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ExteriorHeightFog_C, UberGraphFrame, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ExteriorHeightFog_C, 0x02B8);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_BPXL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_MYIH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class UBodySetupCore : public UObject
		TEST_METHOD(Class__PhysicsCore__BodySetupCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, BoneName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, PhysicsType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionTraceFlag, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionReponse, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, UnknownData_A7G1, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetupCore, 0x0048);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_7V9Y, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_9WOL, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_226X, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepLinearVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepAngularVelocityThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepCounterThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_FXPB, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_MUXL, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsSettingsCore : public UDeveloperSettings
		TEST_METHOD(Class__PhysicsCore__PhysicsSettingsCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bDefaultHasComplexCollision, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_7ZTC, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, BounceThresholdVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, FrictionCombineMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RestitutionCombineMode, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_W8NF, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxAngularVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxDepenetrationVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, ContactOffsetMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MinContactOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxContactOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bSimulateSkeletalMeshOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultShapeComplexity, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_HNGI, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SolverOptions, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettingsCore, 0x00E0);
		}

		// class ABP_GameScalability_Gen9_C : public ABP_GameScalability_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GameScalability_Gen9__BP_GameScalability_Gen9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GameScalability_Gen9_C, 0x03D4);
		}

		// class ABP_Water_Base_C : public AGTAWater
		TEST_METHOD(BlueprintGeneratedClass__BP_Water_Base__BP_Water_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Water_Base_C, 0x0570);
		}

		// class UUI_HUDItem_SubtitleText_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_SubtitleText__UI_HUDItem_SubtitleText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, UnknownData_6FHB, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, HorizontalBox_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, MainCanvas, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, ScalableTextBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, OverrideTextStyleSet, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, ExtraItem, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_SubtitleText_C, ExtraText, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_SubtitleText_C, 0x0308);
		}

		// class UControllerUI_PS4_C : public UControllerUI_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControllerUI_PS4__ControllerUI_PS4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerUI_PS4_C, 0x0450);
		}

		// class UControllerUI_Base_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControllerUI_Base__ControllerUI_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, BackgroundImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ButtonText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ControllerImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, LeftArrow, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, MainScaleBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, RightArrow, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ToggleButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ToggleHolder, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ToggleText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ImageOverride, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ButtonLayouts, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, MappingFont, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, MainScaleBoxAnchor, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ToggleAnchors, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, CurrentToggleValue, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, UnknownData_V8X5, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, ToggleValueTexts, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, SelectedTextColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, NormalTextColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, SelectedBackgroundColor, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, NormalBackgroundColor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerUI_Base_C, InteractSound, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerUI_Base_C, 0x0450);
		}

		// class UUI_MenuRadar_C : public UUI_Radar
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MenuRadar__UI_MenuRadar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, MapUVImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, MapPosition, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, MapZoom, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, Destructed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, MouseDown, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, UnknownData_6IUJ, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, MouseSpeed, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, ControllerSpeedMult, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, HasResized, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, UnknownData_3E3B, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, LastClickTime, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, LastClickPos, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, WasClicked, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, UnknownData_E8QT, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MenuRadar_C, MouseWheelZoomBuffer, 0x02EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MenuRadar_C, 0x02F0);
		}

		// class UTransition_Base_C : public UUITransitionScreen
		TEST_METHOD(WidgetBlueprintGeneratedClass__Transition_Base__Transition_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, ShouldAutoContinueFromFade, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, ShouldStaticStatesAutoContinue, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, UnknownData_P64K, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, StaticTransitionTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, TimeSinceLastTransition, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, ForceDisableTimeoutWarning, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransition_Base_C, DidSkip, 0x02C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransition_Base_C, 0x02C6);
		}

		// class UUI_SlotButton_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton__UI_SlotButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, Options, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, FunctionBindNum, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_P60O, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, SlotDispatcher, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, IsSelected, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_RDQZ, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, ParentScrollingSLot, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, TextColor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, SelectedTextColor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, NormalBGColor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, SelectedBGColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, DefaultTextFont, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, InteractedSound, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, bLockBehavior, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_WGLB, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, DidUpdateSettings, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, AllowAutomaticFocusSelection, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_271T, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, ConfirmationRequired, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, Has_Changed_since_last_save, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_PKDF, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, PostConfirmationRequired, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, bDisabled, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_1SRW, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, DisabledBGColor, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, DisabledBGColorSelected, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, DisabledTextColor, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, bIsShownBecauseDebug, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_YFB1, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, NavigationMargin, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, DidChangeOnAnalogValueChanged, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_416I, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, MinNavigationTime, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, TimeSinceNavigation, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, ExtraDelayOnAnalogNavigation, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, OnOptionChange, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, OnOptionSelectionChanged, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, bUseHapticNavigation, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, bUseHapticInteract, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UsesLeftRightNavigation, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_HXUT, 0x0593);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, OnHoverSound, 0x0593);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, HoverSoundWithMouse, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, ForceIgnoreNextHoverSound, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, UnknownData_VBYK, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, DisabledErrorCode, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_C, OnFinalConfirmation, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_C, 0x05D8);
		}

		// class UMotoSynthPreset : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthPreset, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthPreset, 0x0090);
		}

		// class UMotoSynthSource : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, bConvertTo8Bit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_B12V, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, DownSampleFactor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, RPMCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceDataPCM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceSampleRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_KUG1, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, GrainTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_SDKV, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthSource, 0x00F8);
		}

		// class USynthComponentMoto : public USynthComponent
		TEST_METHOD(Class__MotoSynth__SynthComponentMoto)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, MotoSynthPreset, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, RPM, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, UnknownData_O26I, 0x06CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMoto, 0x0780);
		}

		// class UUI_PasswordDialog_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PasswordDialog__UI_PasswordDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, ClearButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, EnterButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, Image_58, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, MainCanvas, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, TextBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, PasswordSent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, DidJustRecieveControllerInput, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, LastInputTypeController, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, UnknownData_3HDF, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, LastSelectedWidget, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PasswordDialog_C, ConfirmationDialog, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PasswordDialog_C, 0x0308);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_VN28, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_QUTX, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_L55W, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0270);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_7KGU, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_LK4C, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_8LQT, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_4I6V, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0500);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_B9H8, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02A0);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UGTAImageDecorator_Base_C : public UGTAImageDecorator
		TEST_METHOD(BlueprintGeneratedClass__GTAImageDecorator_Base__GTAImageDecorator_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGTAImageDecorator_Base_C, 0x0090);
		}

		// class UUI_SlotButton_Version_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_Version__UI_SlotButton_Version_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Version_C, Image, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Version_C, LeftScale, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Version_C, MainSizeBox, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Version_C, SlotButton, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Version_C, VersionText, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_Version_C, 0x0600);
		}

		// class UUI_HUDItem_TitleText_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_TitleText__UI_HUDItem_TitleText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, UnknownData_F9PF, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, MainCanvas, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, RichText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, TextScaleBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, OverrideTextStyleSet, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, ExtraItem, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, ExtraText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, DefaultFont, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, TestString, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_TitleText_C, TextAlignment, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_TitleText_C, 0x0379);
		}

		// class ABP_Fire_C : public AGTAFire
		TEST_METHOD(BlueprintGeneratedClass__BP_Fire__BP_Fire_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fire_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fire_C, bExtinguished, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Fire_C, 0x02A1);
		}

		// class UUI_Button_Base_C : public UUI_DesignTimeUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_Base__UI_Button_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ButtonHorizontalBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ButtonPromptHolder, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ButtonPromptImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ButtonSizeBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ButtonText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, LeftPanelPadding, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, MainButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, MainIcon, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, MainShadow, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, RightPanelPadding, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, TextScaleBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ButtonTextValue, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ButtonDispatcher, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, ValueToBind, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, CurrentValue, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, UnknownData_GPQP, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, NormalTemplate, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, HoveredTemplate, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, SelectedTemplate, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, AllowButtonToControlState, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, UnknownData_RCRD, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, HoldForce, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Base_C, LastHoverFromFocusedDescendants, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_Base_C, 0x0671);
		}

		// class UHUDDrawer_Base_C : public UUI_GTAHUDDrawer
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUDDrawer_Base__HUDDrawer_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, UberGraphFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, MainCanvas, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, MainScaleBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, MainSizeBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, NotifyText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, HUDItemTemplates, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, HUDItems, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, CreateAllItemsAtStart, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, UnknownData_S2T7, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, TotalScreenSize, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, HudSizeMult, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDDrawer_Base_C, HudItemRefreshOnLanguageChanges, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDDrawer_Base_C, 0x0388);
		}

		// class UBP_VehicleLight_Dash_C : public UPointLightComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_VehicleLight_Dash__BP_VehicleLight_Dash_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VehicleLight_Dash_C, 0x0360);
		}

		// class UBP_HelicopterSpotLight_C : public USpotLightComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_HelicopterSpotLight__BP_HelicopterSpotLight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelicopterSpotLight_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelicopterSpotLight_C, FollowingActor, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HelicopterSpotLight_C, 0x0380);
		}

		// class UUI_HUD_Button_Base_C : public UUI_HUDItem_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_Button_Base__UI_HUD_Button_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, UnknownData_WICM, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, Hide, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, Show, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, ButtonCanvas, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, HelpCanvas, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, Icon, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, Icon2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, TextCanvas, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, SpriteMaterial, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, CurrentMappingWidget, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, MappingTImerHandle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, CurrentTextContent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, TextTImerHandle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_Base_C, IgnoreTextTimer, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_Button_Base_C, 0x0379);
		}

		// class UUI_SlotButton_Legend_C : public UUI_SlotButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SlotButton_Legend__UI_SlotButton_Legend_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Legend_C, BackgroundImage, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Legend_C, MainImage, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Legend_C, MainSizeBox, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SlotButton_Legend_C, Text, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SlotButton_Legend_C, 0x05F8);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UUI_HUDItem_Pager_GTA3_C : public UUI_HUD_Button_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUDItem_Pager_GTA3__UI_HUDItem_Pager_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Pager_GTA3_C, UnknownData_W212, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Pager_GTA3_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Pager_GTA3_C, PagerImage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Pager_GTA3_C, TextAnchors, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Pager_GTA3_C, TestText, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUDItem_Pager_GTA3_C, Font, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUDItem_Pager_GTA3_C, 0x0408);
		}

		// class UUI_HUD_Button_TwoImage_C : public UUI_HUD_Button_Base_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HUD_Button_TwoImage__UI_HUD_Button_TwoImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_TwoImage_C, UnknownData_3QUJ, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HUD_Button_TwoImage_C, UberGraphFrame, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HUD_Button_TwoImage_C, 0x0388);
		}

		// class ABP_Explosion_Molotov_C : public ABP_Explosion_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Explosion_Molotov__BP_Explosion_Molotov_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Explosion_Molotov_C, 0x0288);
		}

		// class ABP_Explosion_Large_C : public ABP_Explosion_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Explosion_Large__BP_Explosion_Large_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Explosion_Large_C, 0x0288);
		}

		// class ULegalScreen_Intro_GTA3_C : public ULegalScreen_Stinger_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegalScreen_Intro_GTA3__LegalScreen_Intro_GTA3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalScreen_Intro_GTA3_C, UberGraphFrame, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegalScreen_Intro_GTA3_C, 0x0308);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_DJZT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FButtonTemplateModifiers
		TEST_METHOD(UserDefinedStruct__ButtonTemplateModifiers__ButtonTemplateModifiers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, Image_2_594B49694C671B303DE0699A36A15EA3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, ImageUVs_42_DCD3F6ED459814AD9D7D15A1466850CE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, UnknownData_3U5A, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, Color_5_D8CDC0374EFFE84369CA1591BBA8F975, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, ImageSheer_8_77C7B5484CC455D7262BB58DC3C7A74B, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, TextColor_11_959524B14EF4F9B95D70A7A176DB93F2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, Font_14_80D8C4A049BBB745A376DE9CC8862093, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, TextHorizontalAlignment_17_79B0FCF84D38A71C205D1DB4356E1EDD, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, UnknownData_3EC2, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, TextMargin_20_431C4E994A2898ED811F29B812FD6AB5, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, ShadowColor_24_DA06C65047AA5DB5F4F779B1DCB2FD00, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, ShadowOffset_26_86238E16497318448263DBBAC5BF6EEA, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateModifiers, ImageShadow_45_CEA254E2462FCB9DD02CDDB00DD3DD7B, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonTemplateModifiers, 0x0118);
		}

		// struct FRadioWheelColors
		TEST_METHOD(UserDefinedStruct__RadioWheelColors__RadioWheelColors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWheelColors, NormalBackgroundColor_2_238B11E04ACB5B5719D06CA860C12A3C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWheelColors, SelectedBackgroundColor_4_10F2BABC475AE623F69FA691D74D8566, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWheelColors, NormalRingBackgroundColor_9_4327A0DA4948BD70B7BF61A14FDE4817, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWheelColors, SelectedRingBackgroundColor_10_2D0F785E4645FBC63950329649CEA436, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWheelColors, NormalTintColor_11_B6E6272B46BEEAEAB56ABDA1D026C5D7, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWheelColors, SelectedTintColor_12_F5C68A7A4414489FA65DA18B49DA61D0, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadioWheelColors, 0x00F0);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileShadowQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LodIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_C8TJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LodIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_Z6VH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_KK2W, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, OverrideMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_JET4, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_GM1I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_TMD0, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0058);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_RX7U, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_LGAQ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_RT8R, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_T3DD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_YFO8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_FU7S, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FPhysicalMaterialInput
		TEST_METHOD(ScriptStruct__Landscape__PhysicalMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, UnknownData_E6ZX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalMaterialInput, 0x0020);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_AGTT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_ICDT, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_1GIZ, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_L9SY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_L1Y1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_UM82, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_D49X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_UK2V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_2MYK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_WYH0, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_2RMH, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_0T59, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, materialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_1IQV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_WI4Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_8CH8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_PESC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_36H1, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_66VM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_GH1L, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_AZ0Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_I63N, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_R22I, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_KQSV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_EBX5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_W3LY, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_F7HF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_AZMT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_GINJ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_4JTW, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_56LW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, materialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_9581, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_P111, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FTimeOfDayData
		TEST_METHOD(UserDefinedStruct__TimeOfDayData__TimeOfDayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, PresetTimeOfDay_48_72731B344467C1038DE1E18CEB2DA386, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, SkyUpperColor_36_F574B1FF4C660D607018378D4D29D5D8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, SkyLowerColor_37_9AE60C56438D767F5189779E892918F6, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsUpperColor_38_427730AB4B57918C2621AC9E42481B18, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsLowerColor_39_8C51A73643E77F6D68DF0C9FB66307B7, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsSecondaryColor_53_DC9F541A4A5DF218D25F3BAEFD108CC9, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsBackground_40_C26ACFC54FD13F33D88102AE41FC8C47, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, SunColor_41_4127FF7441301541CCC14C97D84E54F5, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, MoonColor_42_A8304BE24B8F8E787E683A8FEA4D486C, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, StarsColor_43_5B3DF4A1431B005F9583B498B90E49FC, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, FogColor_44_3CDDDC604F2BA0AD72A137903A4167F5, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayData, 0x00A4);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_NFZU, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_RV7E, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E8);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_AYUD, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_A4EG, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01C0);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_ERDE, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_K5UM, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_NP9Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_5XIZ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_SO2X, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_CZL5, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_ILQN, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_5NHY, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_8SO0, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_ODDL, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_R06D, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_CBOX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_91S6, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_CYMA, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_NHSP, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_VYI8, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_UEFU, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_GAXS, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_3LK4, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_5PCN, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_HKAZ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_EJKH, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_UNKP, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_DAS5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_5ATS, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_3SWC, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_8NJ1, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_4WXI, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00F0);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_YCHI, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_IFWF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_ODN4, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_1X70, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_8KLH, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_N65Y, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_ZJDI, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_JRQL, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_1V27, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_AU63, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCustomAttributes, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_1N6O, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, RootBoneToCopy, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_PEYT, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x01D8);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_Z86V, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_LENR, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_M8Y4, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_D037, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_R9VF, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_JYVD, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_13BY, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_2D7O, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_N7G9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_R44I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_C5US, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_PCSR, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_AQW9, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_M5EY, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_837H, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_B4U9, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_ONHF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_95L9, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_UX7P, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_10CK, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_DGQK, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_Q996, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0080);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_RN10, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00A0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_AEKJ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0098);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_2M0X, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, bAutomaticRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_1V97, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_SNJK, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_DVX9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_OSVW, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_CSJI, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_J9I9, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, LODThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_YFSO, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0138);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_GXQB, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_OW1S, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_O0HI, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_QBQF, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_ELOW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_KIK3, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FSimSpaceSettings
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SimSpaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MasterAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, VelocityScaleZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearAcceleration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularAcceleration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDrag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDragV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearVelocity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalAngularVelocity, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimSpaceSettings, 0x0040);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_7M7V, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimSpaceSettings, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_LHBQ, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_WK9O, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, WorldSpaceMinimumScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, EvaluationResetTime, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_SXIV, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0650);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_HGC3, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_E1HF, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_HNAF, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_XVT7, 0x018E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0190);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_O83N, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_O1F4, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_LW0N, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_P5MM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0050);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_4X81, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_M77B, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_PCAW, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_IV54, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0270);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_8ZL7, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_9W4R, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_U9H8, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_0GS7, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_CM3Z, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_FS21, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_WY5N, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_VRUR, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_Q2D9, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_JWT6, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_MPSC, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_GVS8, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0A00);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_3RAA, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_JJ6K, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_9ZTM, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FButtonTemplateCombo
		TEST_METHOD(UserDefinedStruct__ButtonTemplateCombo__ButtonTemplateCombo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateCombo, NormalTemplate_2_30B698304CAC11C61FE490AB6E647E82, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateCombo, HoveredTemplate_4_86BCABDF40F6EA3B6D6F81A2E7B60D4C, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonTemplateCombo, SelectedTemplate_6_8D6368DF419117ED0876CF823D7FEED0, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonTemplateCombo, 0x0348);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_FOXD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_0GDR, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_K73B, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_LP2C, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_X6YQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_F632, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_8OXP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_956U, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_LC07, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_9IV4, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_93PA, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_008S, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_TYLP, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0008);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_UNZ5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0050);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_M8V1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_12CB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_KAJO, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_HHTQ, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_QDSC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_07KU, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_3TWM, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_0OZK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_KE5X, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_T28V, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_HA43, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_P52G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_ZHKA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_IN37, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_RJW7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_93CM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_4HU7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_1M1E, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Lifetime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimInstanceSubsystemData
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceSubsystemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceSubsystemData, UnknownData_X4SA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceSubsystemData, 0x0001);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_YIVK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_0DTU, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_FU28, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_DC6Q, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_XJGR, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_77AL, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_L113, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_LZLW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_SREM, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_1B5Q, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_UVCJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_HI04, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_MMTG, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_88K4, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_CT63, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_756P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_HKGN, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_JGCA, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_YPAR, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_YGRP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_B79S, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_OJRM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_4V2Y, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_HHES, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_JTCO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_1Q7X, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_QJ9R, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_A89Q, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_WUZ7, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_85T7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FSoundModulationDestinationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDestinationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, UnknownData_4D90, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Modulator, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDestinationSettings, 0x0010);
		}

		// struct FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, VolumeModulationDestination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, PitchModulationDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, HighpassModulationDestination, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, LowpassModulationDestination, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultSettings, 0x0040);
		}

		// struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultRoutingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, VolumeRouting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, PitchRouting, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, HighpassRouting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, LowpassRouting, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, UnknownData_OEUI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultRoutingSettings, 0x0048);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_55G0, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_KDD7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_0Y21, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_P2DU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_4PUE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_2E3A, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_MNG0, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_DWSO, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_W8AH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_PLX0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FBodyInstance : public FBodyInstanceCore
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_CJ8U, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_FBWO, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_FNSW, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_CGA7, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_G4QF, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_XFGJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_PQQJ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_81GV, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0158);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_V4V8, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_W0FW, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_97A7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_OPCN, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_A489, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_0NJQ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_ESY9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_30TX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_49OO, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_L5ML, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_EO0C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_TDZU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_TRY3, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_JLBB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_W03R, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_DAFA, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_389X, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_9FJI, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_2DZA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_0TRW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_BPX7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_2DHL, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_HPHI, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_PE65, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_P0F2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_R6GS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_0VXT, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_4M43, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_VJV2, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_G2MK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_5UKI, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_6ZE9, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_WDY9, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_S0NM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_FB3K, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_GI3A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_JD8P, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_DJJF, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_2CD2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_TMXD, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_B8OC, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FCameraShakeDuration
		TEST_METHOD(ScriptStruct__Engine__CameraShakeDuration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, UnknownData_B8MG, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeDuration, 0x0008);
		}

		// struct FCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__CameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendOut, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeInfo, 0x0010);
		}

		// struct FCameraShakeUpdateResult
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateResult, UnknownData_K6CJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateResult, 0x0020);
		}

		// struct FCameraShakeUpdateParams
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateParams, UnknownData_K7X0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateParams, 0x05F0);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_DU9M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterNetworkSerializationPackedBits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterNetworkSerializationPackedBits, UnknownData_2NPJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterNetworkSerializationPackedBits, 0x0098);
		}

		// struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterMoveResponsePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMoveResponsePackedBits, 0x0098);
		}

		// struct FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterServerMovePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterServerMovePackedBits, 0x0098);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_2IO1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_211L, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_9GN0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UniqueTransientPackage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0068);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00B8);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_LXMO, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00E8);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_B2Q1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_DPP4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__CustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, VariantType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_LXZG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_EDII, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttribute, 0x0030);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_LNGS, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_52L5, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_0XTU, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_ZNFJ, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_HESA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_0UFY, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_QXX9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x00A0);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_H40T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_UYF8, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_O1HU, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_QGQ4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_OCS5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_O2Y2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_BK6E, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_KIK1, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_DL3D, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_9N0L, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_1ADO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ToneCurveAmount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_9E44, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_EK3H, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_R9AJ, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_X7B5, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_33T8, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOIntensity, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAORadius, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_R881, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_NP8Y, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_1XJ1, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_G2KZ, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_CULA, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0550);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_HP9T, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_Y0OD, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_1IH5, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_F25D, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05E0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_VVKP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_0Z6U, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0600);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_WN76, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_BQZQ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_SGDS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_44F4, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_Z60G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_9TFC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_MZ54, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_FOZU, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_KMCN, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_HQ3M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_OOG6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_D3DD, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_3YN2, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_00TL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_7B0P, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_JPM8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_TU1E, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_9J8Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_20RD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_WMBD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_L10F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_QELV, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_B8FQ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_19XB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupScope, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_MSP4, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_4XLC, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0038);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_6M5W, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_QZVP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_3UFY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_TY8H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_ECPW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_VU57, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_0NA0, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_LPC8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_AIZZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0020);
		}

		// struct FVertexOffsetUsage
		TEST_METHOD(ScriptStruct__Engine__VertexOffsetUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexOffsetUsage, Usage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexOffsetUsage, 0x0004);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_S3Z1, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0048);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_WN3X, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_I2AV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_96I2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_FRF4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_8J9M, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_QG61, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_7QWJ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_711U, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_HYZP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_5UHZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_PKVR, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0160);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_Y0IZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_ABOO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_CZPZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsUObjectWrapper, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_C3V8, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_3M7K, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_G5QQ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_G8R5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_17V1, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_PQ6G, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_B3OP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_R3ME, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_3C7T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_QZ5X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_OJF9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_D1TR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_20Z1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_EQKT, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_EHNI, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_KAHN, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_8WV8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_3JOM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_OSZZ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LodIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_51Y0, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_ALRP, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_7AV5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, RetriggerTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_WL3J, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_IBLG, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0028);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_H81P, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_776F, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_TTX8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_B4DS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_3E6G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ElementIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_KGCR, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x008C);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, UnknownData_DVSL, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B0);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_ASZV, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_6TA8, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_5NZZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_RJTU, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_JBZO, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_OMLW, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_GRTX, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_O7ZT, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_J9FO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_V8KQ, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendStage, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_A9BM, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_CEZA, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_EUP0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_GB8B, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, CollisionEnabled, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_QDVA, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_1AW4, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_IPTE, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_WNWC, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_NMD7, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_1TN9, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_YX9C, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_MQK8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_8A21, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_FJ59, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_9006, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_NA2A, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_7ESA, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_EXXM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_E7J5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_BREF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_MF3N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_WBNZ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_PKDM, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LodIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_DZO7, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_JF6L, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_BUP6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_AM1V, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FSceneViewExtensionIsActiveFunctor
		TEST_METHOD(ScriptStruct__Engine__SceneViewExtensionIsActiveFunctor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneViewExtensionIsActiveFunctor, UnknownData_GT7Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneViewExtensionIsActiveFunctor, 0x0050);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_N9KW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_15WH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_CJQ5, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LodIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_69XF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_MW9K, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_MDXM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_PLNL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, nodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LodIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_L6AB, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_AJA2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, AudioBus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_DLAO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B8);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_RITD, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Version, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, UnknownData_4I0W, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0070);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupScope, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_ORGF, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_POZM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_7T91, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_DP7C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_YHF1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_5XWA, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_1KHM, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_0N36, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordTransforms, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordCurves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_CPM8, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0014);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_PVN7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_6KUG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_9023, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_7C4T, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_DU45, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_OOPU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_C0B3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_Z47U, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, bIsVelocityDeltaUnderThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, UnknownData_NEC2, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0030);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_LTIB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_6E7Y, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_HCOO, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_8EDZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_96A4, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FCustomAttributeSetting
		TEST_METHOD(ScriptStruct__Engine__CustomAttributeSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Meaning, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributeSetting, 0x0020);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_9IES, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_WH2F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_0L5V, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_3L3Z, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_N55F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_SX3W, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_QDCG, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FCustomOutput
		TEST_METHOD(ScriptStruct__Engine__CustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, UnknownData_0R3D, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomOutput, 0x000C);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_ODK9, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_CT4E, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_LEC0, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_C3HG, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_JCZL, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_FB3U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstanceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstanceBase, UnknownData_GVB0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstanceBase, 0x0018);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_I7P2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_0H6Y, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_LTMI, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_0MEO, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_GG7I, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_Z2HL, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_EINL, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearAlpha, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularAlpha, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_F1VQ, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x010C);
		}

		// struct FConstraintInstance : public FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_R1OO, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_1RQS, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01C0);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0114);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_5PN2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_T8ZZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_STTQ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_ER2B, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_M48M, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_IHXS, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_7O0K, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_9UKL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_TC70, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_FMO4, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_L0JW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FAudioVolumeSubmixOverrideSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, SubmixEffectChain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, CrossfadeTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, UnknownData_SYYQ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixOverrideSettings, 0x0020);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FBakedStringCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedStringCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, StringCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStringCustomAttribute, 0x0090);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_MTQ6, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_HYFG, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_HRW1, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, ScalabilityGroup, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_IT10, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0028);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_MLKX, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_SF0O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_V7ES, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LodIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_PLF4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FBakedIntegerCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedIntegerCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, IntCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedIntegerCustomAttribute, 0x0088);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_WJ7F, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FBakedFloatCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedFloatCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, FloatCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedFloatCustomAttribute, 0x0090);
		}

		// struct FBakedCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__BakedCustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, UnknownData_Y4GV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, StringAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, IntAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, FloatAttributes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedCustomAttributePerBoneData, 0x0038);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_9GBU, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_86N8, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_XX3C, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_KVNR, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_OKRV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_OR4A, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FAudioVolumeSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, ListenerLocationState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SourceLocationState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, UnknownData_3D2E, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SubmixSends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixSendSettings, 0x0018);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_VDEX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_H86J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_JXXN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_3ZW1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_AV41, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_5FOE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_HMWT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_ZCYY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x00E0);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_D9WD, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_T591, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0118);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_427Z, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x0158);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_XKML, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0080);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_MUY3, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_E32F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_XVTE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_2R6M, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_R85C, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_Z458, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_VO31, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x00F8);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_1IT4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__CustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, UnknownData_ED7M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, Attributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributePerBoneData, 0x0018);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_YABZ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_ZSV3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_DQG6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_ISQB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_LIBS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_REY2, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_J20E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_N0PC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_9NU8, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_XFQS, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_DE8K, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_1JYU, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_O0JC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_CDC3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_IDTR, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x0100);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FQuartzPulseOverrideStep
		TEST_METHOD(ScriptStruct__Engine__QuartzPulseOverrideStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, NumberOfPulses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, PulseDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, UnknownData_VVTH, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzPulseOverrideStep, 0x0008);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_Y5JK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_VEMI, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_0V0R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_FG04, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_1AUI, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_AUM1, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_QIPS, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_RW62, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_S1SK, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_F56G, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_LID8, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_U1JL, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_W1FU, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_J41F, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_TTZM, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_JV4E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_Y89N, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_YPY5, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_EN72, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_RNGD, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FSkinWeightProfileManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileManagerTickFunction, UnknownData_YDZV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileManagerTickFunction, 0x0030);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_QHOS, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0170);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_DTLS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_MCYH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0018);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_5X0A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_YVJU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSoundSubmixSpectralAnalysisBandSettings
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSpectralAnalysisBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, BandFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, QFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSpectralAnalysisBandSettings, 0x0010);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_UWNJ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_L7HP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0040);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_RLT9, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x01A0);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_T4OZ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00E8);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_VFC3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_KQ7K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, materialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bVisibleInRayTracing, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_9STA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_OFGT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_LGJH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_V264, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05F0);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_5B27, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_U4D8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_MMGK, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_H28L, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_N37G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_HSO2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_GE86, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_69KW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_Q2KW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_X7UV, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_MMWK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_O2CE, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_6N0Q, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_NQFS, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_NSDU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_0T30, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_LRVY, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_XDL4, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_RROC, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Downscale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DownscaleOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_A7F3, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileCountBias, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileSizeBias, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0064);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_TGFK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_S3PQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_53IY, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_EHFI, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_ZABV, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0288);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_RRP2, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_F2LG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_MESI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_UZUF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_XIU9, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_8LME, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_PW12, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0760);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_ZDKB, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x08B0);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FHLODISMComponentDesc
		TEST_METHOD(ScriptStruct__Engine__HLODISMComponentDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, StaticMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Instances, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODISMComponentDesc, 0x0020);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_P1M4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_YYWF, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_CQHS, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_U5QM, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0150);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_K86H, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_YTYG, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_U8JX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_PMJQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_3M8I, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_AZK9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_SKQW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_7Q05, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_2MKP, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_4BO6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_CGJ0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_O90Z, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_G0ZI, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0110);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_7HMU, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_Y7YN, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_DBIE, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_HO4D, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FStaticComponentMaskValue
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskValue, 0x0004);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_C4W1, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_8CF4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_PTUT, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_U0PG, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_0S8U, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_N9J0, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_RLTX, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_PPR1, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_VNWC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_3FB3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_4EGG, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_SYXA, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_IBPT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_TPJD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_ZD46, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTTTrackId
		TEST_METHOD(ScriptStruct__Engine__TTTrackId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackId, 0x0008);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_PQ4E, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_YQFO, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_3V5Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_95RN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_P611, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_1QST, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DynamicAmbientBoost, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x005C);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_WOTP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_15OG, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_W172, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_3EAJ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_LAKS, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_2NG1, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_WQQU, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_4XL4, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FComponentSync
		TEST_METHOD(ScriptStruct__Engine__ComponentSync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, SyncOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, UnknownData_14GZ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSync, 0x000C);
		}

		// struct FLODMappingData
		TEST_METHOD(ScriptStruct__Engine__LODMappingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, mapping, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, InverseMapping, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODMappingData, 0x0020);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_5NER, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_BZGB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_AOQ2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_F8ML, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_YKGX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_BZQ4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_5FU3, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_PMXK, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_13O7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, Tooltip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_Q4PL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_82OZ, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_EZRZ, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_6XPW, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_O5KO, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_CX22, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_VICR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_MX3C, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, FixedTimeStep, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x001C);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_KHMQ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_GV29, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_M0PZ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, ModulationSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_6LFY, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0080);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_ERZ2, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_CPG0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_M6K3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FQuartzTimeSignature
		TEST_METHOD(ScriptStruct__Engine__QuartzTimeSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, NumBeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, BeatType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, UnknownData_HPO5, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, OptionalPulseOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTimeSignature, 0x0018);
		}

		// struct FQuartzClockSettings
		TEST_METHOD(ScriptStruct__Engine__QuartzClockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, TimeSignature, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, bIgnoreLevelChange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, UnknownData_02U4, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzClockSettings, 0x0020);
		}

		// struct FQuartzQuantizationBoundary
		TEST_METHOD(ScriptStruct__Engine__QuartzQuantizationBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Quantization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_ULIO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Multiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, CountingReferencePoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_SMV6, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzQuantizationBoundary, 0x000C);
		}

		// struct FQuartzTransportTimeStamp
		TEST_METHOD(ScriptStruct__Engine__QuartzTransportTimeStamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTransportTimeStamp, UnknownData_V3D2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTransportTimeStamp, 0x000C);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_Z6KT, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_9URM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FDFF2DEffect
		TEST_METHOD(ScriptStruct__GTABase__DFF2DEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDFF2DEffect, nodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDFF2DEffect, Data, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDFF2DEffect, 0x0020);
		}

		// struct FAOGenSettings
		TEST_METHOD(ScriptStruct__GTABase__AOGenSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGenSettings, ray_distance_degrees, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGenSettings, face_distance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGenSettings, power, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGenSettings, weld_distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGenSettings, projection_distance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGenSettings, penetration_check_distance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGenSettings, extrusion_step_distance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAOGenSettings, 0x001C);
		}

		// struct FUplightGenSettings
		TEST_METHOD(ScriptStruct__GTABase__UplightGenSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, attenuation_threshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, angle_power, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, absorption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, point_scale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, spot_scale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, rect_scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, window_scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, Intensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, origin_power, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, color_power, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, ao_percent_applied, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, scattering_amount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, upscattering, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUplightGenSettings, directionality, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUplightGenSettings, 0x0048);
		}

		// struct FGTAColTriVertex
		TEST_METHOD(ScriptStruct__GTABase__GTAColTriVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColTriVertex, Vertex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColTriVertex, 0x000C);
		}

		// struct FPostDecalSettings
		TEST_METHOD(ScriptStruct__GTABase__PostDecalSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, MI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, GridSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, SizeX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, SizeY, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, MaxDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, MeshOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, bGroundOnly, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, UnknownData_QYK6, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, MinVisualSetting, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, TimeTilFade, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, TimeSpentFading, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, VertexColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, MinDirDeviation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, MaxEntriesPerBatch, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, UnknownData_E4VK, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostDecalSettings, UVScaleOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostDecalSettings, 0x0060);
		}

		// struct FGrassMovement
		TEST_METHOD(ScriptStruct__GTABase__GrassMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassMovement, UnknownData_1NZZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassMovement, 0x0020);
		}

		// struct FGTAGrassPatch
		TEST_METHOD(ScriptStruct__GTABase__GTAGrassPatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPatch, UnknownData_8ZRH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAGrassPatch, 0x000C);
		}

		// struct FHudString
		TEST_METHOD(ScriptStruct__GTABase__HudString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, UnknownData_HC9D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, Font, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, justify, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, UnknownData_KOZH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, DisplayTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, UseShadow, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHudString, UnknownData_ZUWV, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHudString, 0x0040);
		}

		// struct FHUDText
		TEST_METHOD(ScriptStruct__GTABase__HUDText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDText, HudString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHUDText, 0x0040);
		}

		// struct FHUDQuad
		TEST_METHOD(ScriptStruct__GTABase__HUDQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDQuad, drawable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDQuad, UnknownData_44E1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHUDQuad, 0x0058);
		}

		// struct FBevelInfo
		TEST_METHOD(ScriptStruct__GTABase__BevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBevelInfo, BevelDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBevelInfo, HardBevelAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBevelInfo, WeldDistance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBevelInfo, 0x000C);
		}

		// struct FBackgroundImage
		TEST_METHOD(ScriptStruct__GTABase__BackgroundImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBackgroundImage, BackgroundImages, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBackgroundImage, ForegroundImages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBackgroundImage, 0x0110);
		}

		// struct FGTAUpgradeMaterial
		TEST_METHOD(ScriptStruct__GTABase__GTAUpgradeMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAUpgradeMaterial, DynMatRefs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAUpgradeMaterial, UpgradeID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAUpgradeMaterial, UnknownData_NORO, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAUpgradeMaterial, MeshComponentRef, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAUpgradeMaterial, UnknownData_N0ON, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAUpgradeMaterial, 0x0028);
		}

		// struct FWindowLightCollectionParameters
		TEST_METHOD(ScriptStruct__GTABase__WindowLightCollectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, EmissiveBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, BaseColorMult, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, EmissiveMask, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, WindowMask, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, WindowUVOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, WindowUVMult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, WindowComponentMult, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, WindowMinMask, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, BaseUVScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, EnableRandomization, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, bUseInverseAlphaModulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, bUseVertexColor, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollectionParameters, UnknownData_RTX0, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowLightCollectionParameters, 0x0058);
		}

		// struct FDynamicWindowLightInfo
		TEST_METHOD(ScriptStruct__GTABase__DynamicWindowLightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicWindowLightInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicWindowLightInfo, LastRenderedFrame, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicWindowLightInfo, OriginalIntensity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicWindowLightInfo, 0x0010);
		}

		// struct FWindowLight
		TEST_METHOD(ScriptStruct__GTABase__WindowLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLight, UnknownData_WWFH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowLight, 0x0018);
		}

		// struct FRibbonMaterialMap
		TEST_METHOD(ScriptStruct__GTABase__RibbonMaterialMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRibbonMaterialMap, HeadlightMIC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRibbonMaterialMap, HeadlightEmissiveMIC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRibbonMaterialMap, ForMeshes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRibbonMaterialMap, 0x0060);
		}

		// struct FMappingStruct
		TEST_METHOD(ScriptStruct__GTABase__MappingStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMappingStruct, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMappingStruct, helpTag, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMappingStruct, mapping, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMappingStruct, UnknownData_AB6Q, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMappingStruct, 0x0038);
		}

		// struct FBevelVertInfluences
		TEST_METHOD(ScriptStruct__GTABase__BevelVertInfluences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBevelVertInfluences, UnknownData_T87K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBevelVertInfluences, 0x0028);
		}

		// struct FDFFFrameData
		TEST_METHOD(ScriptStruct__GTABase__DFFFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDFFFrameData, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDFFFrameData, BoneTag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDFFFrameData, UnknownData_UGKL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDFFFrameData, BoneRotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDFFFrameData, 0x0020);
		}

		// struct FGTAModelData
		TEST_METHOD(ScriptStruct__GTABase__GTAModelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, gtaModelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, modelIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, UnknownData_7M9L, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, Asset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, Blueprint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, FXDatas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, CollisionData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, Frames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, ExtraStreamDistance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, bClassReferenceIsUnique, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, bHasFrameRotations, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, bCanCollapseMesh, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAModelData, UnknownData_P0PS, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAModelData, 0x00A0);
		}

		// struct FGTAStreamRequest
		TEST_METHOD(ScriptStruct__GTABase__GTAStreamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreamRequest, resultObjects, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreamRequest, processor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreamRequest, UnknownData_PLUK, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAStreamRequest, 0x0048);
		}

		// struct FSpecialCutsceneMapping
		TEST_METHOD(ScriptStruct__GTABase__SpecialCutsceneMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialCutsceneMapping, SpecialToRealName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialCutsceneMapping, AppendName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialCutsceneMapping, 0x0060);
		}

		// struct FHUDItem
		TEST_METHOD(ScriptStruct__GTABase__HUDItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDItem, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDItem, UnknownData_P4RV, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHUDItem, 0x00A0);
		}

		// struct FHelpTextOverrides
		TEST_METHOD(ScriptStruct__GTABase__HelpTextOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, originalKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, gamepadKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, gamepadModernKey, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, gamepadTapToSprintKey, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, gamepadFreeAimKey, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, touchKey, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, keyboardKey, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, SwitchKey, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, PlaystationKey, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, PS4Key, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, PS5Key, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, XBoxKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTextOverrides, PCKey, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHelpTextOverrides, 0x00D0);
		}

		// struct FReflectionMaterialSetup
		TEST_METHOD(ScriptStruct__GTABase__ReflectionMaterialSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, SSR, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, Planar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, Cube, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, TextureParams, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, ScalarParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, VectorParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, bUseReflectionPower, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReflectionMaterialSetup, UnknownData_TR1D, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReflectionMaterialSetup, 0x0058);
		}

		// struct FGTASelectionOptionSpecifier
		TEST_METHOD(ScriptStruct__GTABase__GTASelectionOptionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectionOptionSpecifier, ForPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectionOptionSpecifier, isBool, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectionOptionSpecifier, UnknownData_NWUG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectionOptionSpecifier, ForPropertyValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASelectionOptionSpecifier, 0x0020);
		}

		// struct FGTAOptionsItemTemplate
		TEST_METHOD(ScriptStruct__GTABase__GTAOptionsItemTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, bIsDisplayNameKeyed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, Style, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, UnknownData_DKKJ, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, SelectionOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, SelectionOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, UseSlider, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, UseText, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, UnknownData_42LF, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, MinSlider, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, MaxSlider, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, StepSizeOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, PlatformBitMask, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, GameBitMask, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, InputType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, RequiresOtherSelectionValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, RequireListRefreshOnChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, RequireConfirmationOnChange, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, ConfirmationMessageOnChangeOnlyForTrue, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, UnknownData_26YK, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, ConfirmationMessageOnChangeOverride, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, RequireConfirmationPostChange, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, RequiresSpecialEnabledCheck, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, VisiblyDisabled, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAOptionsItemTemplate, UnknownData_IUN5, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAOptionsItemTemplate, 0x0090);
		}

		// struct FGTAFidelityChanges
		TEST_METHOD(ScriptStruct__GTABase__GTAFidelityChanges)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, Visuals, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, SimulationScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, Streetlights, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, headlights, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, ResolutionPercent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, Shadows, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, FrameRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, AntiAlias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, AnisotropicFiltering, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, DistanceScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, TextureQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, ReflectionQuality, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, CarReflectionMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, AmbientOcclusion, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, Tessellation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, CityGlowEffect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelityChanges, CloudQuality, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAFidelityChanges, 0x0044);
		}

		// struct FGTASettings_Graphics
		TEST_METHOD(ScriptStruct__GTABase__GTASettings_Graphics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Visuals, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, SimulationScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Streetlights, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, headlights, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, ResolutionPercent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Shadows, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Brightness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Contrast, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Sharpening, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Renderer, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, DisplayMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, FrameRate, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, FrameRatePC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, ResolutionSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, OutputMonitor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, VSync, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, UnknownData_XB01, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, AntiAlias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, AnisotropicFiltering, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, DistanceScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, TextureQuality, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, ReflectionQuality, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, CarReflectionMethod, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, RTX, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, AmbientOcclusion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Tessellation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, CityGlowEffect, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, CloudQuality, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, Bloom, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, LensFlare, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, MotionBlur, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, DepthOfField, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, HDR, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, UnknownData_PEBP, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, DLSS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Graphics, AspectRatio, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASettings_Graphics, 0x007C);
		}

		// struct FGTASettings_Controls
		TEST_METHOD(ScriptStruct__GTABase__GTASettings_Controls)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, SteerType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, Accelerometer, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, TouchLayout, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, LeftHanded, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, InvertLook, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, UnknownData_Z12X, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, BikeControl, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, JoypadLookSensitivity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, JoypadFirstPersonAimingSensitivity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, JoypadThirdPersonAimingSensitivity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, VibrationFeedback, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, UnknownData_2MML, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, MouseSensitivityX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, MouseSensitivityY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, TapToShoot, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, GyroControls, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, UnknownData_Q542, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, GyroSensitivity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, InvertGyroX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, InvertGyroY, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, UnknownData_3M4F, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, ControlScheme, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, AutoClimb, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, ModernKeyboardDriveBy, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, UnknownData_HD5D, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, TouchSensitivity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, TapToSprint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, ModernMeleeAttacks, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Controls, UnknownData_DL6T, 0x0046);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASettings_Controls, 0x0048);
		}

		// struct FGTASettings_Gameplay
		TEST_METHOD(ScriptStruct__GTABase__GTASettings_Gameplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, Traffic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, Targeting, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, AimAssistSensitivity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, VehicleCameraHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, SimulationSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, FrameLimiter, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, DisableAutoSleepInCutscenes, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, PauseOnFocusLoss, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Gameplay, UnknownData_8DDE, 0x0017);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASettings_Gameplay, 0x0018);
		}

		// struct FGTASettings_Audio
		TEST_METHOD(ScriptStruct__GTABase__GTASettings_Audio)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, SFXVolume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, MusicVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, DialogueVolume, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, Autotune, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, UnknownData_GNNF, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, DefaultRadioStationSA, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, DefaultRadioStationVC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, DefaultRadioStationIII, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, HRTF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, ReplayKit, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Audio, UnknownData_ZQN9, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASettings_Audio, 0x0020);
		}

		// struct FGTASettings_Language
		TEST_METHOD(ScriptStruct__GTABase__GTASettings_Language)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, Language, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, Subtitles, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, UnknownData_STY6, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, SubtitleSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, HelpTextSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, InvincibleMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, UnknownData_YK6I, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, ColorBlindMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, ReducedFOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASettings_Language, UnknownData_KZXF, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASettings_Language, 0x001C);
		}

		// struct FGTAFidelitySettings
		TEST_METHOD(ScriptStruct__GTABase__GTAFidelitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelitySettings, Platform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelitySettings, b4kOrGreater, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelitySettings, UnknownData_D76Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAFidelitySettings, FidelityOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAFidelitySettings, 0x0020);
		}

		// struct FSkeletonToSkeletonMap
		TEST_METHOD(ScriptStruct__GTABase__SkeletonToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToSkeletonMap, UnknownData_IYX5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToSkeletonMap, 0x13A0);
		}

		// struct FBloodyFootprint
		TEST_METHOD(ScriptStruct__GTABase__BloodyFootprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodyFootprint, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodyFootprint, Lifetime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodyFootprint, UnknownData_ANXH, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodyFootprint, Component, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodyFootprint, InitialAlpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodyFootprint, UnknownData_J393, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodyFootprint, 0x00B0);
		}

		// struct FDistantMeshData
		TEST_METHOD(ScriptStruct__GTABase__DistantMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantMeshData, UnknownData_FYAG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistantMeshData, 0x0001);
		}

		// struct FSkelProxyBoneTweak
		TEST_METHOD(ScriptStruct__GTABase__SkelProxyBoneTweak)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelProxyBoneTweak, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelProxyBoneTweak, UnknownData_NJWD, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelProxyBoneTweak, Trx, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelProxyBoneTweak, 0x0040);
		}

		// struct FGTACarRecordingData
		TEST_METHOD(ScriptStruct__GTABase__GTACarRecordingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, Speed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, MatrixX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, MatrixY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, SteerAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, Gas, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, Brake, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, HandBrake, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingData, Coords, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTACarRecordingData, 0x0038);
		}

		// struct FGTACarRecordingFile
		TEST_METHOD(ScriptStruct__GTABase__GTACarRecordingFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingFile, OriginalFileLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACarRecordingFile, Keyframes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTACarRecordingFile, 0x0020);
		}

		// struct FGTACinematicLevelLoad
		TEST_METHOD(ScriptStruct__GTABase__GTACinematicLevelLoad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicLevelLoad, TimeNeeded, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicLevelLoad, TimeNotNeeded, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicLevelLoad, TimeToLoad, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicLevelLoad, LevelToLoad, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicLevelLoad, bForceVisible, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicLevelLoad, bCurrentlyLoaded, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicLevelLoad, UnknownData_ESHT, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTACinematicLevelLoad, 0x0018);
		}

		// struct FGTACinematicData
		TEST_METHOD(ScriptStruct__GTABase__GTACinematicData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicData, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicData, Sequence, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicData, LevelLoads, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicData, ForceArea, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicData, bUsePlayerForReflectionPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACinematicData, UnknownData_D2NL, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTACinematicData, 0x0048);
		}

		// struct FGTABoundingBox
		TEST_METHOD(ScriptStruct__GTABase__GTABoundingBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTABoundingBox, BoxMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTABoundingBox, BoxMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTABoundingBox, SphereCentre, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTABoundingBox, SphereRadius, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTABoundingBox, 0x0028);
		}

		// struct FGTAColAccelItem
		TEST_METHOD(ScriptStruct__GTABase__GTAColAccelItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColAccelItem, Bounds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColAccelItem, modelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColAccelItem, Level, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColAccelItem, HasCollisionVols, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColAccelItem, UnknownData_E8TV, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColAccelItem, 0x0030);
		}

		// struct FGTARect
		TEST_METHOD(ScriptStruct__GTABase__GTARect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARect, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARect, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARect, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARect, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTARect, 0x0010);
		}

		// struct FGTAColDefAccelItem
		TEST_METHOD(ScriptStruct__GTABase__GTAColDefAccelItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColDefAccelItem, BoundingBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColDefAccelItem, FirstModel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColDefAccelItem, LastModel, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColDefAccelItem, InMemoryAlways, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColDefAccelItem, Interior, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColDefAccelItem, UnknownData_BFB7, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColDefAccelItem, 0x0018);
		}

		// struct FGTAIplAccelItem
		TEST_METHOD(ScriptStruct__GTABase__GTAIplAccelItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplAccelItem, IplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplAccelItem, LodIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplAccelItem, modelIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplAccelItem, LodModelIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplAccelItem, Actions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAIplAccelItem, 0x0014);
		}

		// struct FGTAIplDef
		TEST_METHOD(ScriptStruct__GTABase__GTAIplDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, BoundingBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, FirstBuilding, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, LastBuilding, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, FirstDummy, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, LastDummy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, StaticIplIndex, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, Interior, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, Loaded, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, Required, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, Ignore, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, IgnoreWhenDeleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, LargeIpl, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIplDef, UnknownData_J2HK, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAIplDef, 0x0034);
		}

		// struct FGTAColCapsule
		TEST_METHOD(ScriptStruct__GTABase__GTAColCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColCapsule, SpheresAlongLine, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColCapsule, UnknownData_PNJ6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColCapsule, position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColCapsule, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColCapsule, Length, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColCapsule, Radius, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColCapsule, 0x0024);
		}

		// struct FGTAColBox
		TEST_METHOD(ScriptStruct__GTABase__GTAColBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColBox, InternalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColBox, Box, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColBox, SurfaceType, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColBox, UnknownData_CCFI, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColBox, 0x0050);
		}

		// struct FGTAColTriData
		TEST_METHOD(ScriptStruct__GTABase__GTAColTriData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColTriData, Dummy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColTriData, UnknownData_YJ6F, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColTriData, 0x0028);
		}

		// struct FSkySettings
		TEST_METHOD(ScriptStruct__GTABase__SkySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudDensityVariation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudBaseDensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudVariationSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudWindSpeed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, SkylightColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, SkyLowerColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, SkyUpperColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, SkyReflectionColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CameraParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudBackgroundColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudLowerColor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudUpperColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CloudSecondaryColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, VolumetricCloudColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, VolumetricCloudExtinction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, VolumetricCloudEmission, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, FogColor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, FogParameters, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, MoonColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, StarsColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, SunColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, SunshineAmount, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, UplightingColor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, PostSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CityGlowAmount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, PostProcessMaterials, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, bUseRainCulling, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, UnknownData_5COM, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CameraFX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, CameraFXComponent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, RepressSkyAmt, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, LerpSkyColor, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkySettings, UnknownData_8KD1, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkySettings, 0x0108);
		}

		// struct FGTATrafficLight
		TEST_METHOD(ScriptStruct__GTABase__GTATrafficLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTATrafficLight, Coor1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTATrafficLight, Coor2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTATrafficLight, EntityOrientation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTATrafficLight, EntityX, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTATrafficLight, EntityY, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTATrafficLight, 0x0024);
		}

		// struct FGTAColSphere
		TEST_METHOD(ScriptStruct__GTABase__GTAColSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColSphere, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColSphere, Origin, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColSphere, 0x0010);
		}

		// struct FGTAColBoundingBox
		TEST_METHOD(ScriptStruct__GTABase__GTAColBoundingBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColBoundingBox, BoundingSphere, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColBoundingBox, BoundingBox, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColBoundingBox, 0x002C);
		}

		// struct FCollisionMeshGroup
		TEST_METHOD(ScriptStruct__GTABase__CollisionMeshGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionMeshGroup, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionMeshGroup, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionMeshGroup, StartFace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionMeshGroup, EndFace, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionMeshGroup, 0x001C);
		}

		// struct FCollisionMeshSection
		TEST_METHOD(ScriptStruct__GTABase__CollisionMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionMeshSection, Groups, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionMeshSection, 0x0010);
		}

		// struct FDecalEntry
		TEST_METHOD(ScriptStruct__GTABase__DecalEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalEntry, DecalComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalEntry, FadeStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalEntry, FadeEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalEntry, NumEntries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalEntry, MaxEntries, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalEntry, 0x0018);
		}

		// struct FText3DEntry
		TEST_METHOD(ScriptStruct__GTABase__Text3DEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FText3DEntry, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FText3DEntry, CachedString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FText3DEntry, bHasMIDs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FText3DEntry, UnknownData_ASJX, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FText3DEntry, 0x0020);
		}

		// struct FGTAEffectData
		TEST_METHOD(ScriptStruct__GTABase__GTAEffectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAEffectData, LookupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAEffectData, System, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAEffectData, System_VC, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAEffectData, System_GTA3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAEffectData, Sound, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAEffectData, TransparencyPriority, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAEffectData, UnknownData_ZG6L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAEffectData, 0x0030);
		}

		// struct FBulletImpactInfo
		TEST_METHOD(ScriptStruct__GTABase__BulletImpactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, SurfaceTypes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, HoleMIC, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, BulletHoleSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, BulletHoleVertexColor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, DebrisCount, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, DebrisSize, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, DebrisVelocity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, DebrisColor, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, UnknownData_CAP4, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBulletImpactInfo, ImpactSystem, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBulletImpactInfo, 0x00A8);
		}

		// struct FAOGridInfo
		TEST_METHOD(ScriptStruct__GTABase__AOGridInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGridInfo, NumCells, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGridInfo, NumSkyCells, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAOGridInfo, UnknownData_OQGU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAOGridInfo, 0x0028);
		}

		// struct FGTAMeshVariation
		TEST_METHOD(ScriptStruct__GTABase__GTAMeshVariation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMeshVariation, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMeshVariation, MIC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAMeshVariation, 0x0010);
		}

		// struct FGTANoiseModSettings
		TEST_METHOD(ScriptStruct__GTABase__GTANoiseModSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTANoiseModSettings, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTANoiseModSettings, Strength, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTANoiseModSettings, 0x0008);
		}

		// struct FGTAGrassProcGeneration
		TEST_METHOD(ScriptStruct__GTABase__GTAGrassProcGeneration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, UVSets, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, CardHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, CardWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, CardFlattening, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, NormalRandomization, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, GroundNormalBottom, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, GroundNormalTop, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, EdgeBiasedScalingDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, HeightNoiseMap, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, AONoiseMap, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, UVNoiseMap, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassProcGeneration, UnknownData_FT3D, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAGrassProcGeneration, 0x0058);
		}

		// struct FGTAGrassSpawn
		TEST_METHOD(ScriptStruct__GTABase__GTAGrassSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, StartCullDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, EndCullDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, MinLOD, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, Scaling, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, UnknownData_JT59, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, ScalePower, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, ScaleX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, ScaleY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, ScaleZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, ZOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassSpawn, UnknownData_5J7H, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAGrassSpawn, 0x0038);
		}

		// struct FGTANoiseSettings
		TEST_METHOD(ScriptStruct__GTABase__GTANoiseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTANoiseSettings, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTANoiseSettings, Range, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTANoiseSettings, 0x000C);
		}

		// struct FGTAGrassPlacement
		TEST_METHOD(ScriptStruct__GTABase__GTAGrassPlacement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPlacement, GrassDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPlacement, PlacementJitter, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPlacement, EdgeMinDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPlacement, EdgeMaxDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPlacement, KeepApartDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPlacement, Noise, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassPlacement, UnknownData_2XNG, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAGrassPlacement, 0x0024);
		}

		// struct FGTAGrassListing
		TEST_METHOD(ScriptStruct__GTABase__GTAGrassListing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, ScaleMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, DensityMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, ProceduralHeightMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, BoundsExpand, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MinPatchSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MaxPatchSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MaxJoin2DPercent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MaxJoinZError, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MinAllowedZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MinWorldZ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MaxWorldZ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, UnknownData_7SWR, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassListing, MaterialDictionary, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAGrassListing, 0x0088);
		}

		// struct FGTAForceFeedback
		TEST_METHOD(ScriptStruct__GTABase__GTAForceFeedback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAForceFeedback, FFE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAForceFeedback, Priority, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAForceFeedback, attenuated, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAForceFeedback, UnknownData_R4RQ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAForceFeedback, 0x0010);
		}

		// struct FScrollListStyle
		TEST_METHOD(ScriptStruct__GTABase__ScrollListStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotTextColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotTextColorSelected, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotColor1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotColor2, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotColorSelected, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotColorDisabled, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotColorSelectedDisabled, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotTextColorDisabled, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, SlotHeight, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, MinimumEntryNumber, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, HoverSound, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, UseHoverSoundWithMouse, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollListStyle, UnknownData_DSCX, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollListStyle, 0x0158);
		}

		// struct FDynamicMaterials
		TEST_METHOD(ScriptStruct__GTABase__DynamicMaterials)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicMaterials, Materials, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicMaterials, 0x0010);
		}

		// struct FGTAColorEntry
		TEST_METHOD(ScriptStruct__GTABase__GTAColorEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColorEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColorEntry, ColorIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColorEntry, VehicleOverrideName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColorEntry, Color, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColorEntry, AltColor, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColorEntry, 0x0034);
		}

		// struct FWindowLightCollection
		TEST_METHOD(ScriptStruct__GTABase__WindowLightCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollection, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollection, NumWindows, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollection, SizeOnDisk, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowLightCollection, UnknownData_8HF8, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowLightCollection, 0x0020);
		}

		// struct FRuntimeProxyComponent
		TEST_METHOD(ScriptStruct__GTABase__RuntimeProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeProxyComponent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeProxyComponent, Alpha, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeProxyComponent, UnknownData_LMTO, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeProxyComponent, 0x0010);
		}

		// struct FSuperBounds
		TEST_METHOD(ScriptStruct__GTABase__SuperBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSuperBounds, FullBounds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSuperBounds, UnknownData_KLFN, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSuperBounds, DiscreteBounds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSuperBounds, 0x0030);
		}

		// struct FGTASubMap
		TEST_METHOD(ScriptStruct__GTABase__GTASubMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, MapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, MeshProxy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, StreetDecalProxy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, Bounds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, MapProxyComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, MapStreetlightComponent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, MapStreetDecalsComponent, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, bSubMapLoading, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, bSubMapLoaded, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, UnknownData_EN3U, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASubMap, StreamingDistanceMultiplier, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASubMap, 0x00B8);
		}

		// struct FGTAInteriorMap
		TEST_METHOD(ScriptStruct__GTABase__GTAInteriorMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAInteriorMap, MapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAInteriorMap, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAInteriorMap, bHasLightSetup, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAInteriorMap, bMapLoaded, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAInteriorMap, UnknownData_MF4H, 0x0026);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAInteriorMap, 0x0028);
		}

		// struct FIMGFileEntry
		TEST_METHOD(ScriptStruct__GTABase__IMGFileEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIMGFileEntry, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIMGFileEntry, contents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIMGFileEntry, 0x0020);
		}

		// struct FUE4CachedMapAsset
		TEST_METHOD(ScriptStruct__GTABase__UE4CachedMapAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMapAsset, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMapAsset, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMapAsset, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMapAsset, UnknownData_L01B, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMapAsset, NonInstancedTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMapAsset, modelIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMapAsset, UnknownData_WO6U, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUE4CachedMapAsset, 0x0090);
		}

		// struct FRawSelectedNode
		TEST_METHOD(ScriptStruct__GTABase__RawSelectedNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawSelectedNode, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawSelectedNode, IndexInGroup, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawSelectedNode, bEdit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawSelectedNode, UnknownData_1KY5, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawSelectedNode, 0x000C);
		}

		// struct FSimpleEditNode
		TEST_METHOD(ScriptStruct__GTABase__SimpleEditNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleEditNode, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleEditNode, bConsideredExternal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleEditNode, UnknownData_YUN8, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleEditNode, InternalLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleEditNode, ExternalLink, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleEditNode, 0x0028);
		}

		// struct FUGTAClothingEntry
		TEST_METHOD(ScriptStruct__GTABase__UGTAClothingEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, SkeletalMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, maskTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, StaticMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, SocketName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, materialIndex, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGTAClothingEntry, UnknownData_IPN3, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUGTAClothingEntry, 0x00C8);
		}

		// struct FGTAPoseableComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__GTABase__GTAPoseableComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPoseableComponentClothTickFunction, UnknownData_RG5M, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAPoseableComponentClothTickFunction, 0x0030);
		}

		// struct FTerrainBlendEntry
		TEST_METHOD(ScriptStruct__GTABase__TerrainBlendEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainBlendEntry, TargetMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainBlendEntry, Material0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainBlendEntry, Material1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainBlendEntry, BlendTexture, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTerrainBlendEntry, 0x00A0);
		}

		// struct FTerrainOverlayEntry
		TEST_METHOD(ScriptStruct__GTABase__TerrainOverlayEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainOverlayEntry, TargetMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainOverlayEntry, OverlayMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainOverlayEntry, BlendTexture, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTerrainOverlayEntry, 0x0078);
		}

		// struct FSlotImageStruct
		TEST_METHOD(ScriptStruct__GTABase__SlotImageStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotImageStruct, Image, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotImageStruct, Enabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotImageStruct, UnknownData_9SZ2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotImageStruct, string, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotImageStruct, extraString, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotImageStruct, 0x0030);
		}

		// struct FTabbedMenuStyle
		TEST_METHOD(ScriptStruct__GTABase__TabbedMenuStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, VerticalTabPercentage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, UnknownData_TKMS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, TabTypeClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, TabConfirmationDialog, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, TabNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, TabContent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, CustomFunctionStrings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, SelectedTabMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, RegularTabMargin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, StartingTab, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuStyle, UnknownData_D2WZ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTabbedMenuStyle, 0x0070);
		}

		// struct FConfirmationMenuStyle
		TEST_METHOD(ScriptStruct__GTABase__ConfirmationMenuStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationMenuStyle, ConfirmButtonColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationMenuStyle, ConfirmTextColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationMenuStyle, CancelButtonColor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationMenuStyle, CancelTextColor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationMenuStyle, ConfirmMessageTextColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationMenuStyle, ConfirmBGColor, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfirmationMenuStyle, 0x00F0);
		}

		// struct FGTAGrassVariety
		TEST_METHOD(ScriptStruct__GTABase__GTAGrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, Meshes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, SlowBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, bConstructProcedurally, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, UnknownData_U2H4, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, Procedural, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, Spawn, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, Place, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAGrassVariety, UnknownData_UB2S, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAGrassVariety, 0x00E0);
		}

		// struct FGTAQuadrant
		TEST_METHOD(ScriptStruct__GTABase__GTAQuadrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, QuadrantName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, HLODMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, MeshProxy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, HLODProxy, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, StreetDecalProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, HeadlightRibbonProxy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, maps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, bNeverLoadMaps, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, bContainsCinematicForceLoadMap, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, bMarkForReadahead, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, UnknownData_PDNX, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, Bounds, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, QuadrantProxyComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, QuadrantHLODComponent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, QuadrantStreetlightComponent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAQuadrant, QuadrantHeadlightRibbonComponent, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAQuadrant, 0x0138);
		}

		// struct FGTAMapSection
		TEST_METHOD(ScriptStruct__GTABase__GTAMapSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, SectionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, MeshProxy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, DistantHLODProxy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, bIncludeQuadrantStreetlights, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, UnknownData_URXT, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, Bounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, SectionProxyComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, SectionHLODComponent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAMapSection, Quadrants, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAMapSection, 0x0080);
		}

		// struct FGTAPatchDefinition
		TEST_METHOD(ScriptStruct__GTABase__GTAPatchDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, Grasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, ListingIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, SizeOnDisk, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, Bounds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, UnknownData_JGEJ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, GroupIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, BaseLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, LocationDelta, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAPatchDefinition, UnknownData_1JM3, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAPatchDefinition, 0x0078);
		}

		// struct FGTAIFPKeyframe
		TEST_METHOD(ScriptStruct__GTABase__GTAIFPKeyframe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPKeyframe, KeyframeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPKeyframe, ExtractedDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPKeyframe, ExtractedTime, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAIFPKeyframe, 0x0014);
		}

		// struct FRawNodesContainer
		TEST_METHOD(ScriptStruct__GTABase__RawNodesContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawNodesContainer, UnknownData_YT07, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawNodesContainer, 0x0010);
		}

		// struct FConstructNode
		TEST_METHOD(ScriptStruct__GTABase__ConstructNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, Direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, Width, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, MedianWidth, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, UVDist, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, bBacktracking, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, bBidirectional, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, UnknownData_6HL0, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, MeshRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructNode, MapName, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstructNode, 0x0034);
		}

		// struct FGTAClothingModel
		TEST_METHOD(ScriptStruct__GTABase__GTAClothingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingModel, ModelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingModel, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingModel, maskTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAClothingModel, 0x0058);
		}

		// struct FGTAClothingMaterialPair
		TEST_METHOD(ScriptStruct__GTABase__GTAClothingMaterialPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterialPair, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterialPair, replacesMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterialPair, StaticMesh, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterialPair, SocketName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAClothingMaterialPair, 0x0088);
		}

		// struct FGTARadarSprite
		TEST_METHOD(ScriptStruct__GTABase__GTARadarSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, LegendText, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, LegendCategory, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, UnknownData_7ZK9, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, UVCoords, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, bIsFlat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, bIsDisplayedOnEdge, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, bCameraAligned, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, bPlayerAligned, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, bNeverDistanceScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, UnknownData_3KYX, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, Scale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, bShouldAnimateInMap, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, bShouldAnimateInRadar, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, AnimationStyle, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, UnknownData_CR9P, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, ZOrderOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadarSprite, UnknownData_1JG0, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTARadarSprite, 0x0060);
		}

		// struct FRadarEdgeSprite
		TEST_METHOD(ScriptStruct__GTABase__RadarEdgeSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, UVs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, Offsets, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, Anchors, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, Priority, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, ZOrderOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadarEdgeSprite, UnknownData_UIFB, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadarEdgeSprite, 0x0058);
		}

		// struct FGTARadioStation
		TEST_METHOD(ScriptStruct__GTABase__GTARadioStation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadioStation, Station, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadioStation, UnknownData_U2EA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARadioStation, RadioAudio, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTARadioStation, 0x0030);
		}

		// struct FCachedSoundWaveAsset
		TEST_METHOD(ScriptStruct__GTABase__CachedSoundWaveAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSoundWaveAsset, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSoundWaveAsset, ActualStartTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSoundWaveAsset, TotalNumFrames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSoundWaveAsset, UnknownData_OSD2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSoundWaveAsset, SoundAsset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSoundWaveAsset, PreloadedSoundWave, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedSoundWaveAsset, 0x0040);
		}

		// struct FProcQueuedPayload
		TEST_METHOD(ScriptStruct__GTABase__ProcQueuedPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcQueuedPayload, UnknownData_UAUW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcQueuedPayload, Sound, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcQueuedPayload, UnknownData_W8ET, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcQueuedPayload, 0x0028);
		}

		// struct FGTAVisualOption
		TEST_METHOD(ScriptStruct__GTABase__GTAVisualOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualOption, CVar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualOption, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAVisualOption, 0x0020);
		}

		// struct FGTAVisualsSetting
		TEST_METHOD(ScriptStruct__GTABase__GTAVisualsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, CVars, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, ExtraCVars, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, WindowLights_Quality, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, WindowLights_Distance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, WindowLights_FadeInDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, MaxInteriorShadowedLights, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, MaxInteriorActiveLights, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAVisualsSetting, UnknownData_JB6S, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAVisualsSetting, 0x0038);
		}

		// struct FGTASimulationScaleSetting
		TEST_METHOD(ScriptStruct__GTABase__GTASimulationScaleSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASimulationScaleSetting, PedDensityMult, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASimulationScaleSetting, PedDistanceMult, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASimulationScaleSetting, CarDensityMult, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASimulationScaleSetting, CarDistanceMult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASimulationScaleSetting, 0x0010);
		}

		// struct FGTAShadowSetting
		TEST_METHOD(ScriptStruct__GTABase__GTAShadowSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, DynamicShadowDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, DynamicShadowCascades, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, FarShadowDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, FarShadowCascades, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, bTreesCastFarShadows, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, bEnableMoonShadows, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, bEnableMorningSunShadows, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, UnknownData_TQGC, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAShadowSetting, DistributionExponent, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAShadowSetting, 0x0018);
		}

		// struct FGTAHeadlightSetting
		TEST_METHOD(ScriptStruct__GTABase__GTAHeadlightSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, bCastShadows, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, bDynamicTailLights, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, bLowCostLights, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, UnknownData_FF4Y, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, ShadowResolutionScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, ShadowDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, LightDrawDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAHeadlightSetting, AttenuationRadius, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAHeadlightSetting, 0x0014);
		}

		// struct FGTAStreetlightSetting
		TEST_METHOD(ScriptStruct__GTABase__GTAStreetlightSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, DecalDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, VisibleDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, SpotLightShadowDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, PointLightShadowDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, ShadowResolutionScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, bCastSpotlightShadows, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, bCastPointlightShadows, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, bLowCostLights, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAStreetlightSetting, UnknownData_L5D2, 0x0017);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAStreetlightSetting, 0x0018);
		}

		// struct FGTASceneExperiment
		TEST_METHOD(ScriptStruct__GTABase__GTASceneExperiment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, ExperimentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, bDevelopmentOnly, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, bDiffFromBaseline, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, UnknownData_SH0U, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, EnableCommands, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, DisableCommands, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, ScreenPercentageOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneExperiment, UnknownData_J8WH, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASceneExperiment, 0x0040);
		}

		// struct FGTAIFPFile
		TEST_METHOD(ScriptStruct__GTABase__GTAIFPFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPFile, bEnableOverridesForThisAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPFile, UnknownData_XB0M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPFile, GroupId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPFile, AnimId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPFile, UnknownData_FH4M, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAIFPFile, Keyframes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAIFPFile, 0x0020);
		}

		// struct FPathNode
		TEST_METHOD(ScriptStruct__GTABase__PathNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, PreviousLink, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, NextLink, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, IndexAdjacentNodes, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, NodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, PathWidth, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, Group, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, NumAdjacentNodes, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, Speed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, Density, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, SpecialFunction, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathNode, UnknownData_VL3K, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathNode, 0x0024);
		}

		// struct FPathLink
		TEST_METHOD(ScriptStruct__GTABase__PathLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, Node1Region, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, Node1Index, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, Direction, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, Width, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, LanesTo, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, LanesFrom, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, Node1HasMoreTrafficLightNeighbors, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, TrafficLightsCycle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, BridgeOrRailwayLights, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLink, UnknownData_HJNW, 0x0026);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathLink, 0x0028);
		}

		// struct FPathAdjacent
		TEST_METHOD(ScriptStruct__GTABase__PathAdjacent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathAdjacent, AdjNodeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathAdjacent, AdjNodeRegion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathAdjacent, LinkIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathAdjacent, LinkRegion, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathAdjacent, Length, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathAdjacent, Flags, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathAdjacent, UnknownData_YPBA, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathAdjacent, 0x0010);
		}

		// struct FGTARegionMetadata
		TEST_METHOD(ScriptStruct__GTABase__GTARegionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARegionMetadata, RegionBounds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARegionMetadata, ColorGroups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTARegionMetadata, UnknownData_1CIF, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTARegionMetadata, 0x0018);
		}

		// struct FNodeAddr
		TEST_METHOD(ScriptStruct__GTABase__NodeAddr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeAddr, NodeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeAddr, RegionIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeAddr, 0x0008);
		}

		// struct FPathLinkAssoc : public FPathLink
		TEST_METHOD(ScriptStruct__GTABase__PathLinkAssoc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLinkAssoc, UnknownData_S61R, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLinkAssoc, Node2Region, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLinkAssoc, Node2Index, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathLinkAssoc, UnknownData_9DYE, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathLinkAssoc, 0x0040);
		}

		// struct FGTASelectedNode
		TEST_METHOD(ScriptStruct__GTABase__GTASelectedNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, Region, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, NodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, Node, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, UnknownData_XECH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, AdjacentNodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, Links, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, LinksBackup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, AdjacentsBackup, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, UnknownData_OL9K, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, bNeedsNewPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, bNewNode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASelectedNode, UnknownData_DJ27, 0x007A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASelectedNode, 0x0080);
		}

		// struct FGTAInteriorArea
		TEST_METHOD(ScriptStruct__GTABase__GTAInteriorArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAInteriorArea, maps, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAInteriorArea, 0x0010);
		}

		// struct FFloodTweak
		TEST_METHOD(ScriptStruct__GTABase__FloodTweak)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloodTweak, Addr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloodTweak, Direction, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloodTweak, 0x0014);
		}

		// struct FConstructPath
		TEST_METHOD(ScriptStruct__GTABase__ConstructPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstructPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstructPath, 0x0010);
		}

		// struct FGTAClothingModelType
		TEST_METHOD(ScriptStruct__GTABase__GTAClothingModelType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingModelType, ModelTypeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingModelType, Models, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAClothingModelType, 0x0018);
		}

		// struct FDamageInfoContainer
		TEST_METHOD(ScriptStruct__GTABase__DamageInfoContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageInfoContainer, NumTrianglesOk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageInfoContainer, NumTriangles, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageInfoContainer, 0x0020);
		}

		// struct FGTAClothingMaterial
		TEST_METHOD(ScriptStruct__GTABase__GTAClothingMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterial, MaterialName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterial, MaterialSwaps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAClothingMaterial, 0x0018);
		}

		// struct FGTAClothingMaterialType
		TEST_METHOD(ScriptStruct__GTABase__GTAClothingMaterialType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterialType, MaterialTypeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAClothingMaterialType, Materials, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAClothingMaterialType, 0x0018);
		}

		// struct FBoneHackTweak
		TEST_METHOD(ScriptStruct__GTABase__BoneHackTweak)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneHackTweak, BoneTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneHackTweak, Axis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneHackTweak, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneHackTweak, Rotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneHackTweak, 0x0020);
		}

		// struct FGTACVarListSetting
		TEST_METHOD(ScriptStruct__GTABase__GTACVarListSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACVarListSetting, CVars, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTACVarListSetting, 0x0010);
		}

		// struct FUE4CachedMap
		TEST_METHOD(ScriptStruct__GTABase__UE4CachedMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMap, UnknownData_ZF6J, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4CachedMap, Cache, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUE4CachedMap, 0x0028);
		}

		// struct FStreetLightLowQualitySetting
		TEST_METHOD(ScriptStruct__GTABase__StreetLightLowQualitySetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreetLightLowQualitySetting, ZOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreetLightLowQualitySetting, NewRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreetLightLowQualitySetting, NewIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreetLightLowQualitySetting, NewInnerConeAngle, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreetLightLowQualitySetting, NewOuterConeAngle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreetLightLowQualitySetting, NewExponent, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreetLightLowQualitySetting, 0x0018);
		}

		// struct FGrassMaterialSetup
		TEST_METHOD(ScriptStruct__GTABase__GrassMaterialSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassMaterialSetup, bOverrideMaterialBlending, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassMaterialSetup, bEdgesRequireWalls, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassMaterialSetup, UnknownData_UL8J, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassMaterialSetup, ValidUVCoords, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassMaterialSetup, 0x0018);
		}

		// struct FGTAWorldOverlayTexture
		TEST_METHOD(ScriptStruct__GTABase__GTAWorldOverlayTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAWorldOverlayTexture, MinCoordinates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAWorldOverlayTexture, MaxCoordinates, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAWorldOverlayTexture, bAllowWrap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAWorldOverlayTexture, bInvertMask, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAWorldOverlayTexture, UnknownData_A75W, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAWorldOverlayTexture, Texture, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAWorldOverlayTexture, 0x0048);
		}

		// struct FGTAProbeSpawn
		TEST_METHOD(ScriptStruct__GTABase__GTAProbeSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAProbeSpawn, BPClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAProbeSpawn, SkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAProbeSpawn, Location, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAProbeSpawn, Rotation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAProbeSpawn, 0x0068);
		}

		// struct FGTASceneProbe
		TEST_METHOD(ScriptStruct__GTABase__GTASceneProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, ProbeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, PlayerPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, CameraPosition, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, CameraRotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, CameraFOV, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, TimeOfDay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, CapturedPedMult, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, CapturedCarMult, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, UnknownData_RGSK, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, SpawnData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, SpawnedActors, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTASceneProbe, UnknownData_P4PY, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTASceneProbe, 0x0078);
		}

		// struct FVariationAttachment
		TEST_METHOD(ScriptStruct__GTABase__VariationAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariationAttachment, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariationAttachment, Weight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariationAttachment, UnknownData_BUA4, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVariationAttachment, 0x0010);
		}

		// struct FNextVariationData
		TEST_METHOD(ScriptStruct__GTABase__NextVariationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, SkinBaseColors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, SkinAdditionalBaseColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, ClothingBaseColors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, EyeMaterials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, HairColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, AccessoryMaterials, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, Attachments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, SkinSlotName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, AdditionalSkinSlotName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, ClothingSlotName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, EyeSlotName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, HairSlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, AccessorySlotName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, SkinSlotIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, AdditionalSkinSlotIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, ClothingSlotIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, EyeSlotIndex, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, HairSlotIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNextVariationData, AccessorySlotIndex, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNextVariationData, 0x00B8);
		}

		// struct FRequestedSoundStruct
		TEST_METHOD(ScriptStruct__GTABase__RequestedSoundStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestedSoundStruct, UnknownData_Y5R3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestedSoundStruct, 0x0002);
		}

		// struct FTargetHaloInfo
		TEST_METHOD(ScriptStruct__GTABase__TargetHaloInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, TargetActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, bDeactivating, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, UnknownData_040G, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, UnknownData_ABTC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, Alpha, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, StaticMap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetHaloInfo, SkinnedMap, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTargetHaloInfo, 0x00B8);
		}

		// struct FWindowSectionInfo
		TEST_METHOD(ScriptStruct__GTABase__WindowSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowSectionInfo, SectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowSectionInfo, UnknownData_L7QJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowSectionInfo, SectionSphere, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowSectionInfo, 0x0020);
		}

		// struct FWindowSectionInfoContainer
		TEST_METHOD(ScriptStruct__GTABase__WindowSectionInfoContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowSectionInfoContainer, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowSectionInfoContainer, 0x0010);
		}

		// struct FStreetDecalData
		TEST_METHOD(ScriptStruct__GTABase__StreetDecalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreetDecalData, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreetDecalData, 0x0010);
		}

		// struct FDistantMeshSubstitution
		TEST_METHOD(ScriptStruct__GTABase__DistantMeshSubstitution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantMeshSubstitution, MeshToSubstitute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantMeshSubstitution, WithOverriddenMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantMeshSubstitution, UseAtlasMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantMeshSubstitution, Data, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistantMeshSubstitution, UnknownData_BE6L, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistantMeshSubstitution, 0x0020);
		}

		// struct FEntityLink
		TEST_METHOD(ScriptStruct__GTABase__EntityLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEntityLink, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEntityLink, UnknownData_F4A0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEntityLink, 0x0028);
		}

		// struct FSCAchive
		TEST_METHOD(ScriptStruct__GTABase__SCAchive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSCAchive, AchivementName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSCAchive, LocalizedAchivementName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSCAchive, LocalizedDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSCAchive, Icon, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSCAchive, isUnlocked, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSCAchive, invisibleWhenLocked, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSCAchive, UnknownData_HVHO, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSCAchive, 0x0050);
		}

		// struct FKeyboardDisplayStrings
		TEST_METHOD(ScriptStruct__GTABase__KeyboardDisplayStrings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyboardDisplayStrings, theEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyboardDisplayStrings, theMapping, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyboardDisplayStrings, mapping, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyboardDisplayStrings, UnknownData_K718, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyboardDisplayStrings, 0x0028);
		}

		// struct FGTACollisionDataWrapper
		TEST_METHOD(ScriptStruct__GTABase__GTACollisionDataWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACollisionDataWrapper, OriginalCollisionModelNameMirror, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTACollisionDataWrapper, CollisionRef, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTACollisionDataWrapper, 0x0038);
		}

		// struct FGTAColTriIndex
		TEST_METHOD(ScriptStruct__GTABase__GTAColTriIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColTriIndex, TriIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColTriIndex, SurfaceType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGTAColTriIndex, UnknownData_W4UV, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGTAColTriIndex, 0x0010);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_W8L8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_04JJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_C7PD, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_U63V, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_UKT3, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_UYXY, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_BG8L, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_77AO, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FBPS_PickupData
		TEST_METHOD(UserDefinedStruct__BPS_PickupData__BPS_PickupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPS_PickupData, Mesh_2_18357F1A4CE55F4CDFC095B78C2F8014, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPS_PickupData, LightAttenuationRadius_5_BB1FBA01401BD19257D437AD070B42E8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPS_PickupData, LightColor_8_A7C193414BACFE2F31A95F871CCCDF40, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPS_PickupData, 0x0010);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FActorLayer
		TEST_METHOD(ScriptStruct__ActorLayerUtilities__ActorLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLayer, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLayer, 0x0008);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_6LN7, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_8AMW, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_J8DE, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FRadialBoxSettings
		TEST_METHOD(ScriptStruct__UMG__RadialBoxSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, bDistributeItemsEvenly, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, UnknownData_TWDU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, AngleBetweenItems, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, StartingAngle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialBoxSettings, 0x000C);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_C9WE, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_1CO1, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_R8NA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_WHUJ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_0B09, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_XDFL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_05HE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_KDM5, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0278);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_2DIS, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00C8);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_SQMT, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_VD2I, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_3GJ6, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FTimeOfDayCurves
		TEST_METHOD(UserDefinedStruct__TimeOfDayCurves__TimeOfDayCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, SkyUpperColorCurve_14_F574B1FF4C660D607018378D4D29D5D8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, SkyLowerColorCurve_15_9AE60C56438D767F5189779E892918F6, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsUpperColorCurve_16_427730AB4B57918C2621AC9E42481B18, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsLowerColorCurve_17_8C51A73643E77F6D68DF0C9FB66307B7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsBackgroundCurve_18_C26ACFC54FD13F33D88102AE41FC8C47, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsSecondaryColorCurve_31_EE55225E47F0CD95AF3DED9A93746791, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, SunColorCurve_19_4127FF7441301541CCC14C97D84E54F5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, MoonColorCurve_20_A8304BE24B8F8E787E683A8FEA4D486C, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, StarsColorCurve_22_5B3DF4A1431B005F9583B498B90E49FC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, FogColorCurve_26_3CDDDC604F2BA0AD72A137903A4167F5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayCurves, 0x0050);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_BMOV, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_WY3K, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_RVHX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_T9AK, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_V41H, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_0SWU, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_QIY1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_PXM2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FPropertyAccessSegment
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Struct, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Property, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, ArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Flags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, UnknownData_BS0E, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessSegment, 0x0040);
		}

		// struct FPropertyAccessPath
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentStartIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, UnknownData_DW2Y, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessPath, 0x000C);
		}

		// struct FPropertyAccessCopy
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, AccessIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessStartIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessEndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, UnknownData_AX83, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopy, 0x0010);
		}

		// struct FPropertyAccessIndirectionChain
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirectionChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, Property, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionStartIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionEndIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, EventId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, UnknownData_U3Z4, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirectionChain, 0x0030);
		}

		// struct FPropertyAccessIndirection
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Function, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferAlignment, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ObjectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Type, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, UnknownData_AV1B, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirection, 0x0040);
		}

		// struct FPropertyAccessCopyBatch
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopyBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopyBatch, Copies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopyBatch, 0x0010);
		}

		// struct FPropertyAccessLibrary
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, PathSegments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcPaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, CopyBatches, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcAccesses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestAccesses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, Indirections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, EventAccessIndices, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, UnknownData_UB0L, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessLibrary, 0x00C8);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_TD93, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_4KQH, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_YP7C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_LMC8, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FLevelSequenceAnimSequenceLinkItem
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceAnimSequenceLinkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, SkelTrackGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, PathToAnimSequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportCurves, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bRecordInWorldSpace, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, UnknownData_ZMOX, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceAnimSequenceLinkItem, 0x0030);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_WD81, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_EEQK, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_WSMM, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_ESIK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_DQ4S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FConfirmationDialogStyle
		TEST_METHOD(UserDefinedStruct__ConfirmationDialogStyle__ConfirmationDialogStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, CancelButtonStyle_4_9F5478264AA3E5E98BEB60AD98233BC1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, AcceptButtonStyle_6_040658794D6E9870F2A860ACA2767F64, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, BackgroundBrush_13_4BE2702D4019F782F561DFAC893C686D, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, BackgroundWidget_25_631981C94738665382B593A4D7A4F09C, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, MainBoxAnchor_16_7D7EB4A4490A60D7D4D264A82ABBEF19, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, DefaultMessageText_9_B213E5EF459CAE05FA1476947443884D, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, MessageFont_19_17032EA7499133BE31670285543A7690, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, MessageColor_22_A7B9E63A495F0F95ADDE68BDA84960A7, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, AcceptSound_28_F46CF9884D5E24256CF0F8A1ED6310BA, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, CancelSound_31_359043AF4CCE14831EA188ABB7F8B9D1, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfirmationDialogStyle, HoveredSound_32_02B7EB2E454D5B14BFC24CBA55B35303, 0x0828);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfirmationDialogStyle, 0x0830);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_UDRW, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_NIAG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_0XXR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_1CA2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_DILU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_GB16, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_ZGFV, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_QZ5A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_6G3J, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_EGPJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_4WZ8, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_EH5H, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_7X0P, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_XDNZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_EIK4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_80UD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_DUDK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_BVNS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FARSessionPayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, ConfigFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, UnknownData_O00M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultMeshMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultWireframeMeshMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionPayload, 0x0018);
		}

		// struct FARPlaneUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPlaneUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_OOI2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Center, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Extents, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, BoundaryVertices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, ObjectClassification, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_7TU9, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPlaneUpdatePayload, 0x0080);
		}

		// struct FARPointUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPointUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPointUpdatePayload, UnknownData_HAWH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPointUpdatePayload, 0x0001);
		}

		// struct FARFaceUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARFaceUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LeftEyePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, RightEyePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LookAtTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, UnknownData_OAVY, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFaceUpdatePayload, 0x0040);
		}

		// struct FARImageUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARImageUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, UnknownData_3HSO, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, DetectedImage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, EstimatedSize, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARImageUpdatePayload, 0x0060);
		}

		// struct FARQRCodeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARQRCodeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_H5M4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, Extents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_JCYE, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, QRCode, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARQRCodeUpdatePayload, 0x0070);
		}

		// struct FARPoseUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPoseUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, WorldTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, JointTransforms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPoseUpdatePayload, 0x0040);
		}

		// struct FAREnvironmentProbeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__AREnvironmentProbeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAREnvironmentProbeUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAREnvironmentProbeUpdatePayload, 0x0030);
		}

		// struct FARObjectUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARObjectUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARObjectUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARObjectUpdatePayload, 0x0030);
		}

		// struct FARMeshUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARMeshUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_I3HJ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, ObjectClassification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_3K4M, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARMeshUpdatePayload, 0x0060);
		}

		// struct FARGeoAnchorUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARGeoAnchorUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_U5NW, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Longitude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Latitude, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeMeters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeSource, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_HK5X, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AnchorName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARGeoAnchorUpdatePayload, 0x0070);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_K8EA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_7CSV, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FTrackedGeometryGroup
		TEST_METHOD(ScriptStruct__AugmentedReality__TrackedGeometryGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, TrackedGeometry, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedGeometryGroup, 0x0018);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_AIQN, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_CZJS, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARCameraIntrinsics
		TEST_METHOD(ScriptStruct__AugmentedReality__ARCameraIntrinsics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, ImageResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, FocalLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, PrincipalPoint, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARCameraIntrinsics, 0x0018);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_7LS2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_PC8R, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackEvaluationFieldEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationFieldEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Range, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, ForcedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Flags, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, UnknownData_E5UG, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, LegacySortOrder, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationFieldEntry, 0x0020);
		}

		// struct FMovieSceneTrackEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationField, Entries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationField, 0x0010);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_V32Y, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_RLXG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_QTPZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_VI3M, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, WeakRootSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_8Z5C, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_7CHD, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_N65N, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x00E8);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_LG7M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_YVGD, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_XCJ7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_6D2G, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_ZI40, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_HIT1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_FCR1, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_OQ35, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_DMKX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_165P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_BVRS, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_UZVA, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_V6Q4, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x0078);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneSubSequenceTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTree, UnknownData_1YFH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTree, 0x0060);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_6K30, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneEvaluationFieldEntityTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityTree, UnknownData_VKL2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityTree, 0x0060);
		}

		// struct FMovieSceneEvaluationFieldEntityKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityKey, 0x000C);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x0008);
		}

		// struct FMovieSceneSequenceCompilerMaskStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceCompilerMaskStruct)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceCompilerMaskStruct, 0x0001);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bEvaluateTracksWhenNotSpawned, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_XH4Y, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_SFAU, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_YGT5, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_RT6R, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_JOTY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_ZPL9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_GY3T, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x0160);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_82A7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_A36W, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, bHasHierarchicalEasing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_J0TE, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_GZ85, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, RootNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Tree, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x0118);
		}

		// struct FMovieSceneEvaluationFieldEntity
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, SharedMetaDataIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntity, 0x0010);
		}

		// struct FMovieSceneFieldEntry_ChildTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_ChildTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ChildIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, Flags, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, UnknownData_KOBS, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ForcedTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_ChildTemplate, 0x0008);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneFieldEntry_EvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_EvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, TrackPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, NumChildren, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, UnknownData_2YW6, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_EvaluationTrack, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, TrackLUT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SectionLUT, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0030);
		}

		// struct FMovieSceneEvaluationFieldEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, ForcedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_M3HQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_VPS7, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityMetaData, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldSharedEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSharedEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, 0x0010);
		}

		// struct FMovieSceneEntityComponentField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntityComponentField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, PersistentEntityTree, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, OneShotEntityTree, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, Entities, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, EntityMetaData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, SharedMetaData, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntityComponentField, 0x00F0);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0020);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneEntitySystemGraphNodes
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNodes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNodes, UnknownData_F112, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNodes, 0x0038);
		}

		// struct FMovieSceneEntitySystemGraph
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_702K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, Nodes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_20MM, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraph, 0x0138);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_NSAJ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieSceneTrackInstanceInput
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, UnknownData_Q03D, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceInput, 0x0010);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_A6UM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_G9PW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_OCBW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_L6M3, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_D9OP, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_OWKT, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_YZD3, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_Y9ZH, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_2UJK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FTrackInstanceInputComponent
		TEST_METHOD(ScriptStruct__MovieScene__TrackInstanceInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, UnknownData_L2SD, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackInstanceInputComponent, 0x0010);
		}

		// struct FMovieSceneTrackInstanceComponent
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, TrackInstanceClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceComponent, 0x0010);
		}

		// struct FEasingComponentData
		TEST_METHOD(ScriptStruct__MovieScene__EasingComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEasingComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEasingComponentData, 0x0008);
		}

		// struct FMovieScenePropertyBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, bCanUseClassLookup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, UnknownData_9IWR, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertyBinding, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_3JHT, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_KDUY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEntitySystemGraphNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, UnknownData_SN4F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, System, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNode, 0x0028);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_TTZJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_IPJX, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_OB1F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_XNTX, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_4FQ5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_QVW7, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0018);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0038);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_EDKF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_OAUZ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSubSequenceTreeEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTreeEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTreeEntry, UnknownData_9E7L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTreeEntry, 0x0008);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_M2G1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneSequencePlaybackParams
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Frame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_T7R2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, MarkedFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, PositionType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UpdateMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_PP4B, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackParams, 0x0028);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_FONL, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneTrackInstanceEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, BoundObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, TrackInstance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceEntry, 0x0010);
		}

		// struct FHairGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, GroupId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumCurves, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumGuides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumCurveVertices, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumGuideVertices, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupInfo, 0x0014);
		}

		// struct FHairGroupInfoWithVisibility : public FHairGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupInfoWithVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfoWithVisibility, bIsVisible, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfoWithVisibility, UnknownData_UFH1, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupInfoWithVisibility, 0x0018);
		}

		// struct FHairGeometrySettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGeometrySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairRootScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairTipScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairClipScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGeometrySettings, 0x0010);
		}

		// struct FHairShadowSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairShadowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, HairShadowDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, HairRaytracingRadiusScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, bUseHairRaytracingGeometry, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, bVoxelize, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, UnknownData_O7V4, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairShadowSettings, 0x000C);
		}

		// struct FHairAdvancedRenderingSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairAdvancedRenderingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairAdvancedRenderingSettings, bUseStableRasterization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairAdvancedRenderingSettings, bScatterSceneLighting, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairAdvancedRenderingSettings, 0x0002);
		}

		// struct FHairSolverSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, EnableSimulation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, NiagaraSolver, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, UnknownData_HIMC, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, CustomSystem, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, SubSteps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, IterationCount, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairSolverSettings, 0x0038);
		}

		// struct FHairDecimationSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairDecimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairDecimationSettings, CurveDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairDecimationSettings, VertexDecimation, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairDecimationSettings, 0x0008);
		}

		// struct FHairInterpolationSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bOverrideGuides, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, UnknownData_VPFN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, HairToGuideDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, InterpolationQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, InterpolationDistance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bRandomizeGuide, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bUseUniqueGuide, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairInterpolationSettings, 0x000C);
		}

		// struct FHairLODSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, CurveDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, VertexDecimation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, AngularThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, ScreenSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, ThicknessScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, bVisible, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, GeometryType, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, UnknownData_B1ZJ, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairLODSettings, 0x0018);
		}

		// struct FHairCardsClusterSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsClusterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, ClusterDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, bUseGuide, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, UnknownData_BVEP, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsClusterSettings, 0x0008);
		}

		// struct FHairCardsGeometrySettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsGeometrySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, GenerationType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, UnknownData_RWLH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, CardsCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, ClusterType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, UnknownData_S09V, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MinSegmentLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, AngularThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MinCardsLength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MaxCardsLength, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsGeometrySettings, 0x001C);
		}

		// struct FHairCardsTextureSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsTextureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, AtlasMaxResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, PixelPerCentimeters, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, LengthTextureCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, DensityTextureCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsTextureSettings, 0x0010);
		}

		// struct FHairGroupCardsTextures
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupCardsTextures)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, DepthTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, CoverageTexture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, TangentTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, AttributeTexture, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, AuxilaryDataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, UnknownData_1D3F, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupCardsTextures, 0x0030);
		}

		// struct FHairGroupCardsInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupCardsInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsInfo, NumCards, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsInfo, NumCardVertices, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupCardsInfo, 0x0008);
		}

		// struct FHairGroupsMaterial
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMaterial, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMaterial, SlotName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsMaterial, 0x0010);
		}

		// struct FGoomBindingGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__GoomBindingGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, RenRootCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, RenLODCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, SimRootCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, SimLODCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGoomBindingGroupInfo, 0x0010);
		}

		// struct FHairGroupsRendering
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsRendering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, GeometrySettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, ShadowSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, AdvancedSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, UnknownData_3JOC, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsRendering, 0x0030);
		}

		// struct FHairGroupsMeshesSourceDescription
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsMeshesSourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, ImportedMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, Textures, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, GroupIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, LodIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, ImportedMeshKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsMeshesSourceDescription, 0x0060);
		}

		// struct FHairGroupDesc
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, GuideCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairWidth_Override, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_I54Z, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRootScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRootScale_Override, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_NZAM, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairTipScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairTipScale_Override, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_NXRQ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairClipLength, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairClipLength_Override, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_O3XO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairShadowDensity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairShadowDensity_Override, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_MX6M, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRaytracingRadiusScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRaytracingRadiusScale_Override, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseHairRaytracingGeometry, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseHairRaytracingGeometry_Override, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_BC9Q, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, LODBias, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseStableRasterization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseStableRasterization_Override, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bScatterSceneLighting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bScatterSceneLighting_Override, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bSupportVoxelization, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bSupportVoxelization_Override, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_7O4F, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, LODForcedIndex, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupDesc, 0x004C);
		}

		// struct FHairExternalForces
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairExternalForces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, GravityVector, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, AirDrag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, AirVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairExternalForces, 0x001C);
		}

		// struct FHairBendConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairBendConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, SolveBend, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, ProjectBend, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, UnknownData_FYGI, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendDamping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendStiffness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, UnknownData_1O6K, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairBendConstraint, 0x0098);
		}

		// struct FHairStretchConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairStretchConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, SolveStretch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, ProjectStretch, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, UnknownData_UWZ6, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchDamping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchStiffness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, UnknownData_9WAC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairStretchConstraint, 0x0098);
		}

		// struct FHairCollisionConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCollisionConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, SolveCollision, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, ProjectCollision, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, UnknownData_FYV6, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, StaticFriction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, KineticFriction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, StrandsViscosity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, GridDimension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, CollisionRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, RadiusScale, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCollisionConstraint, 0x00A8);
		}

		// struct FHairMaterialConstraints
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairMaterialConstraints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, BendConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, StretchConstraint, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, CollisionConstraint, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairMaterialConstraints, 0x01D8);
		}

		// struct FHairGroupsInterpolation
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsInterpolation, DecimationSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsInterpolation, InterpolationSettings, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsInterpolation, 0x0014);
		}

		// struct FHairStrandsParameters
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairStrandsParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, UnknownData_BFNZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsSmoothing, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsThickness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, ThicknessScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairStrandsParameters, 0x0098);
		}

		// struct FHairGroupsPhysics
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsPhysics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, SolverSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, ExternalForces, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, UnknownData_IMV9, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, MaterialConstraints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, StrandsParameters, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsPhysics, 0x02C8);
		}

		// struct FHairGroupsLOD
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, LODs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, ClusterWorldSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, ClusterScreenSizeScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsLOD, 0x0018);
		}

		// struct FHairGroupsProceduralCards
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsProceduralCards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, ClusterSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, GeometrySettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, TextureSettings, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, Version, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsProceduralCards, 0x0038);
		}

		// struct FHairGroupsCardsSourceDescription
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsCardsSourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, SourceType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, UnknownData_72A5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralMeshKey, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ImportedMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, Textures, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, GroupIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, LodIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, CardsInfo, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ImportedMeshKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsCardsSourceDescription, 0x00C0);
		}

		// struct FFollicleMaskOptions
		TEST_METHOD(ScriptStruct__HairStrandsCore__FollicleMaskOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, Groom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, Channel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, UnknownData_MKIA, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFollicleMaskOptions, 0x0010);
		}

		// struct FGroomHairGroupPreview
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomHairGroupPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, GroupId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, CurveCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, GuideCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, InterpolationSettings, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomHairGroupPreview, 0x0020);
		}

		// struct FGroomBuildSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bOverrideGuides, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, UnknownData_E6RJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, HairToGuideDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, InterpolationQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, InterpolationDistance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bRandomizeGuide, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bUseUniqueGuide, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomBuildSettings, 0x000C);
		}

		// struct FGroomConversionSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomConversionSettings, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomConversionSettings, Scale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomConversionSettings, 0x0018);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FJoinedButtonTemplateModifiers
		TEST_METHOD(UserDefinedStruct__JoinedButtonTemplateModifiers__JoinedButtonTemplateModifiers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinedButtonTemplateModifiers, ButtonTextValue_9_9FE5D8904013DDDA10120BBC559DE894, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinedButtonTemplateModifiers, NormalTemplate_4_D481CDC24C95D1DA54CD16B5E3926A46, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinedButtonTemplateModifiers, HoveredTemplate_6_EDFC4F3240BC68BF7F32079C51EDDE06, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinedButtonTemplateModifiers, SelectedTemplate_8_1F80D9A94B64D7C09694628E03F1C935, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinedButtonTemplateModifiers, 0x0360);
		}

		// struct FNiagaraTypeDefinitionHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinitionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinitionHandle, RegisteredTypeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinitionHandle, 0x0004);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDefHandle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x000C);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, UnknownData_X3YA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0020);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0010);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_LUJD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_TQZ8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x0078);
		}

		// struct FNiagaraMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, MaterialSubIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, UnknownData_CNFK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, EmitterRendererProperty, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialOverride, 0x0018);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_FG22, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_C9F7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FNiagaraPlatformSetCVarCondition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetCVarCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, CVarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_XNAB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinInt, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxInt, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinFloat, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxFloat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_WPI3, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetCVarCondition, 0x0028);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_AEBN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, CVarConditions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_4IAJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0030);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_3H4K, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, ParamMapVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_HD8Q, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, RootVariable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BindingSourceMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_ARK8, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_SE9Y, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0058);
		}

		// struct FNiagaraComponentPropertyBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraComponentPropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, AttributeBinding, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, MetadataSetterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, WritableValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, UnknownData_PTZO, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraComponentPropertyBinding, 0x00A0);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0020);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x00C8);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_KJRZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0038);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentByteOffsets, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentRegisterOffsets, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0060);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_AOP1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_0NSG, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0040);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, HalfComponentStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, UnknownData_WBHV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0070);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalHalfComponents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_3RP3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_7J7K, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_DAL9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_3I5X, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_8R6R, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_GXUS, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_GVQ5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxSystemInstances, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_NDST, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0048);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_3CA3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_C0X3, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraMaterialAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, MaterialParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraVariable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, ResolvedNiagaraVariable, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraChildVariable, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialAttributeBinding, 0x002C);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_J0W2, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0050);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_4XCI, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_F381, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0218);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0028);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraRibbonUVSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRibbonUVSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, LeadingEdgeMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_BY7A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TrailingEdgeMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_AGS4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, DistributionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_SAF1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TilingLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleUOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleVRangeOverride, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_FSLM, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRibbonUVSettings, 0x0024);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_BGH2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_CMLM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_ZPON, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0020);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0040);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E0);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_PFPY, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_L0ZK, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptInstanceParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptInstanceParameterStore, UnknownData_19CZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptInstanceParameterStore, 0x0088);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_ZPE6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_RQ6J, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_XPJG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_GCDS, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x0098);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0028);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_6H1I, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_SQ0F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_BNUT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_SZ2S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraHalfVector4
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, W, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector4, 0x0008);
		}

		// struct FNiagaraHalfVector3
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Z, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector3, 0x0006);
		}

		// struct FNiagaraHalfVector2
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, Y, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector2, 0x0004);
		}

		// struct FNiagaraHalf
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalf, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalf, 0x0002);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_U4F6, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_2QYD, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_A6RT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ScriptLiterals, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_ION1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_VDBB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_LAKS, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_VL9X, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x00E0);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_DUI4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_MD9X, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_EYUG, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_BHMY, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_M9V2, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02C8);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0040);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToNotifySimDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_IX83, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0048);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_F2DF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ModuleUsageBitmask, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMinIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMaxIndex, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0090);
		}

		// struct FNiagaraEmitterNameSettingsRef
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterNameSettingsRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, EmitterName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterNameSettingsRef, 0x0018);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_JG6Z, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInstanceSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0130);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_XTKJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_WPFQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ParentAttribute, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_IE58, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_RJY4, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_BF4K, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_JJEY, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00F0);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_UX8S, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_Y309, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__NiagaraShader__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, SimulationStageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_8EUT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0030);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_SDBN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_3444, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_LQGA, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_IHE4, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_OIKQ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FRenderableTriangleVertex
		TEST_METHOD(ScriptStruct__ModelingComponents__RenderableTriangleVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, UV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, Normal, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, Color, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderableTriangleVertex, 0x0024);
		}

		// struct FRenderableTriangle
		TEST_METHOD(ScriptStruct__ModelingComponents__RenderableTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, UnknownData_OFE4, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderableTriangle, 0x0078);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_Y0DZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_3QKY, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_2LAK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_I8U4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_W32R, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_PYQF, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_QIIW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_ZFC9, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_9QAS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_DZ3S, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_3ZQY, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_GSWY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_HDGE, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_E51U, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_TJH3, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_6V7G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_3AH1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_MI77, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_Y2JT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_CYHK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_ZWB7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_6O2X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_EB50, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_TY05, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFrameNumberRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, UnknownData_ZNOJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRangeBound, 0x0008);
		}

		// struct FFrameNumberRange
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRange, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_RFP9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_4QTS, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_6CVC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_XOHE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__CoreUObject__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_U6H7, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_WI3S, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00F0);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_IWKK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_HNIX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_KJY0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_2CEO, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTrigger
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_11LQ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_S55W, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTrigger, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, UnknownData_DBMA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerChannel, 0x0088);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_6A7Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_XDD4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_RLYA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimRootMotionTrackParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimRootMotionTrackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, UnknownData_LNUT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, 0x0030);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_AU7V, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_9R9Z, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_IKXN, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_5HSY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_JMP1, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_ESNJ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_LUOT, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_QRVH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_5RMO, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_M6Q9, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_410A, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_SRT4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_A6U6, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_PATW, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_ZZI7, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_DV61, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_4F95, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, 0x0040);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_32BX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_G8H5, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEventTriggerData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, Ptrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, ObjectBindingId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, UnknownData_BR0X, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerData, 0x0048);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, UnknownData_I3FG, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_N6RT, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x00F8);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, materialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_B291, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, materialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_60N2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_V1OI, 0x02BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02C0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_P7DV, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FLevelVisibilityComponentData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__LevelVisibilityComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelVisibilityComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelVisibilityComponentData, 0x0008);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_T4NO, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_K5JN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_PEMB, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00C8);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_399G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_WADY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_T8WY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_QQVH, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_LTOK, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_OPC2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_QURS, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_CTSC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_LK3D, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_DQBT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_31HS, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FControllerButtonLayout
		TEST_METHOD(UserDefinedStruct__ControllerButtonLayout__ControllerButtonLayout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerButtonLayout, ButtonValue_19_9CAB8B674C518A083C0DDB817F4719F9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerButtonLayout, UnknownData_J9YQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerButtonLayout, Anchor_6_4E3712EF4D5999008732DEA68DF48625, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerButtonLayout, Margin_9_5714A3E84480593CEE24ACB0FD45FBBC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerButtonLayout, HorizontalAlignment_15_A54405BA469CE19091984EBD011E6FED, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerButtonLayout, VerticalAlignment_18_A3065697449FCE7AED59C7B6D4DDBCDD, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControllerButtonLayout, 0x0026);
		}

		// struct FPhysicsBoxData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsBoxData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Dimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, UnknownData_XORX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsBoxData, 0x0070);
		}

		// struct FPhysicsSphereData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsSphereData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, UnknownData_5RKH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsSphereData, 0x0070);
		}

		// struct FPhysicsCapsuleData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsCapsuleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, UnknownData_MNZV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsCapsuleData, 0x0070);
		}

		// struct FPhysicsConvexData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsConvexData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, NumVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, NumFaces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, Element, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConvexData, 0x0038);
		}

		// struct FPerlinLayerProperties
		TEST_METHOD(ScriptStruct__MeshModelingTools__PerlinLayerProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerlinLayerProperties, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerlinLayerProperties, Intensity, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerlinLayerProperties, 0x0008);
		}

		// struct FEditPivotTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__EditPivotTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditPivotTarget, 0x0010);
		}

		// struct FTransformMeshesTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__TransformMeshesTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformMeshesTarget, 0x0010);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_N2S5, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_2W95, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_K8JB, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_FZLW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_7RZV, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_5LS2, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_QURY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_BQ1U, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_NC95, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_7Y6C, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FGeometryCollectionRepData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionRepData, UnknownData_W7W3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionRepData, 0x0018);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_Q259, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_5KPU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_FTXN, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_71CE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FGeometryCollectionSource
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceGeometryObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, UnknownData_OIQB, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, LocalTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceMaterial, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSource, 0x0060);
		}

		// struct FCachedFontMeshes
		TEST_METHOD(ScriptStruct__Text3D__CachedFontMeshes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedFontMeshes, Glyphs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedFontMeshes, UnknownData_YGNM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedFontMeshes, 0x0060);
		}

		// struct FCachedFontData
		TEST_METHOD(ScriptStruct__Text3D__CachedFontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedFontData, Font, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedFontData, Meshes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedFontData, UnknownData_RUYB, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedFontData, 0x00E8);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_7PM1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_VUKL, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_ZCI0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_9MZB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0050);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_BIWR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_XNTN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_JGJT, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_LVSN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_QD5C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_8CAW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, bUseMultipleInfluences, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_YQFD, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, SkinningKernelRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_KFZZ, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0160);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_BH7U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_JIWM, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_F45D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_UYMD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_K848, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_196A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00AC);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_K4TJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_HT58, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_SWN0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FBrushEffectBlurring
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectBlurring)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectBlurring, bBlurShape, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectBlurring, UnknownData_J3XD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectBlurring, Radius, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectBlurring, 0x0008);
		}

		// struct FBrushEffectCurlNoise
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl1Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl2Amount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl1Tiling, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl2Tiling, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectCurlNoise, 0x0010);
		}

		// struct FBrushEffectSmoothBlending
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectSmoothBlending)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectSmoothBlending, InnerSmoothDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectSmoothBlending, OuterSmoothDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectSmoothBlending, 0x0008);
		}

		// struct FBrushEffectTerracing
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectTerracing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, TerraceAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, TerraceSpacing, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, TerraceSmoothness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, MaskLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, MaskStartOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectTerracing, 0x0014);
		}

		// struct FBrushEffectDisplacement
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectDisplacement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, DisplacementHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, DisplacementTiling, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, Texture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, Midpoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, Channel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, WeightmapInfluence, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectDisplacement, 0x0028);
		}

		// struct FLandmassBrushEffectsList
		TEST_METHOD(ScriptStruct__Landmass__LandmassBrushEffectsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, Blurring, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, CurlNoise, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, Displacement, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, SmoothBlending, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, Terracing, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, UnknownData_0N9K, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandmassBrushEffectsList, 0x0060);
		}

		// struct FBrushEffectCurves
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, bUseCurveChannel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, UnknownData_AEGE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, ElevationCurveAsset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, ChannelEdgeOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, ChannelDepth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, CurveRampWidth, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, UnknownData_FB25, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectCurves, 0x0020);
		}

		// struct FLandmassFalloffSettings
		TEST_METHOD(ScriptStruct__Landmass__LandmassFalloffSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, FalloffMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, UnknownData_D3F8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, FalloffAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, FalloffWidth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, EdgeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, ZOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandmassFalloffSettings, 0x0014);
		}

		// struct FLandmassTerrainCarvingSettings
		TEST_METHOD(ScriptStruct__Landmass__LandmassTerrainCarvingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, BlendMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, bInvertShape, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, UnknownData_EN0Q, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, FalloffSettings, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, Effects, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, Priority, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, UnknownData_2HBF, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandmassTerrainCarvingSettings, 0x0080);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_5VQF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_G5V5, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_VJDS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_XVET, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_PNSN, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_I2NG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_Y7ZI, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassEarlyReflections, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_H3KA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassLateReflections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_41J7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypass, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_3FOH, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0040);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_ZGVB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_8SU8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_28DM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_Y6I7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FChaosSolverConfiguration
		TEST_METHOD(ScriptStruct__Chaos__ChaosSolverConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, Iterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPairIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, PushOutIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPushOutPairIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginFraction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginMax, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPairIterations, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPushOutPairIterations, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterConnectionFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterUnionConnectionType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateCollisionData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_X1HG, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionFilterSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateBreakData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_9B9H, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, BreakingFilterSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateTrailingData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_FSGR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, TrailingFilterSettings, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateContactGraph, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_SLPY, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosSolverConfiguration, 0x0068);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__Chaos__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_415O, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__Chaos__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FXRMotionControllerData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRMotionControllerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_ZS3L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceVisualType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandIndex, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, TrackingStatus, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_QM3K, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_IVC3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_KG63, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyPositions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRotations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRadii, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bIsGrasped, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_D7N7, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRMotionControllerData, 0x00A0);
		}

		// struct FXRHMDData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRHMDData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_K7HF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, TrackingStatus, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_ZYJY, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, position, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_NIKQ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Rotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRHMDData, 0x0040);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FXRGestureConfig
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRGestureConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bTap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bHold, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, AxisGesture, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisX, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRGestureConfig, 0x0006);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_TVEB, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_FP25, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_P1WB, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_ONM0, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_260Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_YOB5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_1M6F, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_GETX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_7X6U, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_X0CE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_NDOC, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_V7ME, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FWeatherData
		TEST_METHOD(UserDefinedStruct__WeatherData__WeatherData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsScale_6_46BD2FFD4101E62C58B396AE3DAA8046, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsDensity_8_C959F15B494C31785AB9BDA43B1D7D13, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsVertexDensity_80_5B70D3CB4EBF864F08091E8395A218C9, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHarness_10_C035BB69421FE083D844959BBFE947D1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsTranslucent_18_6BF1A8914FAA8F67988B9DADC914CBC6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsBlend_17_0B0902B849FFF532D0FA73AD750162A7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsDistotion_19_FF8260554CA3B701D6C62A87A392E3BA, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsScattering_20_EA03A384445C04BBBC4EA2A3A28674D9, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsUpperBrightness_47_80E6F59C44C0E63FF352E1ACA405DEAD, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsLowerBrightness_48_C275CDC444671D9809D344A043817F24, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsAmbient_26_B3DE5189457AF2F2C9061DAE095629E4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsShadowSize_32_30070F544C29A5175B4905A3CAA43C9B, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsShadowSoft_33_242397844998748E4CE442A82FABD76E, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsBackground_34_81AB1CD743507906283E26BC8179CD02, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHorizonDensity_35_A9DA12E04BD1ACCE877556A07AFC0A81, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHorizonAlpha_36_B5FE09604EE51B66C6109689DD26A633, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHorizonScattering_38_96C12A72485C8C653890E983ADECA031, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, HorizonFalloff_41_7ADEA15D4BAFCED09051BDAAB67D0E6E, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, WindForceScale_42_494196B04350B9CE2B731E97799FE070, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, WindDynamic_45_4BD5C5EC4B00477CD0BAC8857B6087F7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, WindDispersing_46_747C4F2B40612E5FE76792B0CB7C4E90, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SkylightBrightness_52_D0DC0C2C48095A9468CA2A8ECC6B512B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerColor_71_16427994489B87788D8B02B67E7E863B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerAlpha_72_8759E297465AF80FD8856791526E7414, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerScale_77_6F5F9AE84D7C8132AF2BD68DD7F5A018, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerWind_73_58F8ABAE4AE471692F3D53A832B70EC0, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeatherData, 0x0068);
		}

		// struct FButtonShadowModifiers
		TEST_METHOD(UserDefinedStruct__ButtonShadowModifiers__ButtonShadowModifiers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonShadowModifiers, UseShadow_5_F54A428D4B468314608EAB8FCCC48C23, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonShadowModifiers, UnknownData_QFLP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonShadowModifiers, Offset_8_21B1C641427C5BE7D99D668B5138305C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonShadowModifiers, Tint_11_EFB014E9409A3928738549B93AAFBB59, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonShadowModifiers, 0x001C);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_DU21, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_DPIK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_X7OT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_ASMY, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_ZPTX, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_WXY3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_QKGW, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_CB09, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_WYLJ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_OQKP, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_DCAL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_T9Q0, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_I2EC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, LetterSpacing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_XJTX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_NSBF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_YYKT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0270);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_ICHU, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_DCIG, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_DUEZ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_IT9F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_IJGU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1060);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_UESK, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_DNRI, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_EXNZ, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_WI9M, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_NJQB, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A70);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0500);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_XG6J, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FBodyInstanceCore
		TEST_METHOD(ScriptStruct__PhysicsCore__BodyInstanceCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_PU9F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_6ZLN, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstanceCore, 0x0018);
		}

		// struct FMotoSynthRuntimeSettings
		TEST_METHOD(ScriptStruct__MotoSynth__MotoSynthRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bSynthToneEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_SY82, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthOctaveShift, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bGranularEngineEnabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_Z3I0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEngineVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEnginePitchScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumSamplesToCrossfadeBetweenGrains, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumGrainTableEntriesPerGrain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainTableRandomOffsetForConstantRPMs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainCrossfadeSamplesForConstantRPMs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_VNCC, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, AccelerationSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, DecelerationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_5ZY4, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoDelayMsec, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoFeedback, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerWetlevel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDryLevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDelayRatio, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerFilterEnabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_ZAAZ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterFrequency, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_QPOF, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotoSynthRuntimeSettings, 0x0068);
		}

		// struct FGrainTableEntry
		TEST_METHOD(ScriptStruct__MotoSynth__GrainTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, SampleIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, RPM, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrainTableEntry, 0x0008);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_BINN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_DX6T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_F2Y2, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_XH6N, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, string, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_GHXG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_WA0R, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_18JE, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_TKLQ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_6SRD, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_09DN, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_U74Q, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_DVOG, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_PP36, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_T6EG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_XL7E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_9X7J, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_3JXW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_R8A7, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_X2LK, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_HK68, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_IZA7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_7HKY, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_GFQ9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_86MC, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FSlotListSlotClasses
		TEST_METHOD(UserDefinedStruct__SlotListSlotClasses__SlotListSlotClasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotListSlotClasses, SelectionSlot_16_21334F67445D0915174B259D0A6A418E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotListSlotClasses, BoolSlot_17_DDD4E7444C403BF8D69D27817B5EEBF0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotListSlotClasses, SliderSlot_15_629C09C842D281F9A001D0BFC582C856, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotListSlotClasses, MessageSlot_19_775D88024FE142D95137A3818A5608DA, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotListSlotClasses, 0x0020);
		}
	};
}
